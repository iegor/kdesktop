
<!--
Please keep the formatting simple.
Do not indent XML constructs.
Keep lines at 80 characters length maximum.
-->

<chapter id="getting-started">

<chapterinfo>
<authorgroup>
<author
><firstname
>Bernd</firstname
><surname
>Pol</surname
></author>
&erik.kjaer.pedersen.role; 
</authorgroup>
</chapterinfo>

<title
>Kom i gang med &kdevelop; &mdash; en guided tur</title>

<para
>Nu da du har fået udviklingsmiljøet &kdevelop; hvordan skal du så bruge det? Eftersom dette er et temmelig komplekst program, er det ret let at løbe panden mod muren når man skal lære at bruge det, især hvis du ikke i forvejen har erfaringer med et integreret udviklingsmiljø.</para>

<para
>Vi skal forsøge at gøre det hele lidt lettere ved at gennemgå trinene i processen at lave et simpelt KDE C++ program. På den måde får vi et hurtigt blik på:</para>

<simplelist>
<member
><link linkend="gettingstarted-overview"
>Et første kig: Elementer i brugergrænsefladen for det integrerede udviklingsmiljø &kdevelop;.</link
></member>
<member
><link linkend="gettingstarted-configure"
>Udfør visse indledende indstillinger.</link
></member>
<member
><link linkend="gettingstarted-new"
>Hvordan man opretter et nyt projekt.</link>
</member>
<member
><link linkend="gettingstarted-edit"
>Nogle vink om hvordan man håndterer dokumenter.</link
></member>
<member
><link linkend="gettingstarted-compile"
>Hvordan man kompilerer programmet i dette projekt.</link
></member>
<member
><link linkend="gettingstarted-extend"
>Hvordan man tilføjer klasser og andre ting til projektet.</link
></member>
<member
><link linkend="gettingstarted-debug"
>Hvad man skal gøre for at fejlsøge programmet.</link
></member>
<member
><link linkend="gettingstarted-doc"
>Nogle grundlæggende værktøjer for at bygge program eller brugerdokumentation.</link
></member>
<member
><link linkend="gettingstarted-keys"
>Sidst men ikke mindst, genvejstaster</link
></member>
</simplelist>

<para
>Inden vi begynder, skal et vigtigt begreb klargøres.</para>

<formalpara>
<title
>Hvad kan man forvente sig?</title>
<para
>Som sagt er &kdevelop; et <emphasis
>integreret udviklingsmiljø</emphasis
>. Det betyder væsentligt at &kdevelop; ikke selv er et udviklingsværktøj, men snarere en grafisk grænseflade for nemt at få adgang til et omfattende antal udviklingsværktøjer, hvor mange i virkeligheden ville kræve komplicerede tastaturkommandoer hvis de blev kørt i en tekstterminal.</para>
</formalpara>

<para
>Selvom &kdevelop; forenkler mange af disse programmeringsopgaver, forbliver meget af kompleksiteten i dette sæt værktøjer alligevel, hvilket betyder at for en fuldstændig forståelse af det integrerede udviklingsmiljø &kdevelop; skal du stadigvæk forstå de værktøjer som egentlig køres i baggrunden.</para>

<para
>Derfor kan vi ikke lære dig hvordan man laver software, men snarere introducere nogle af de måder &kdevelop; blev designet til at forenkle denne proces. Hvis du vil lære dig mere om hvad et integreret udviklingsmiljø er beregnet til, kan du tage et kig på den historiske oversigt <link linkend="unixdev"
>Udvikling på &UNIX;</link
>, i særdeleshed kapitlet <link linkend="unixdev-ide"
>Integration af begreber og værktøjer</link
>.</para>

<note>
<para
>Følgende beskrivelse gælder normaltilfældet, hvor &kdevelop; starter med <guilabel
>Forenklet IDEA-vinduestilstand</guilabel
>. Hvis du allerede er skiftet til en andet brugergrænseflade, findes visse punkter måske ikke ifølge beskrivelsen, eller opfører sig noget anderledes. Hvis du ikke er sikker på hvilken brugergrænseflade som &kdevelop; for øjeblikket bruger, så tjek det i dialogen <menuchoice
><guimenu
>Opsætning</guimenu
> <guimenuitem
>Indstil KDevelop...</guimenuitem
> <guimenuitem
>Brugergrænseflade</guimenuitem
></menuchoice
>.</para>
</note>

<sect1 id="gettingstarted-overview">
<title
>Et første kig på &kdevelop;</title>

<para
>Her handler det kun om det du ser når du først starter &kdevelop;. Du finder preliminær information om:</para>

<simplelist>
<member
><link linkend="gettingstarted-overview-basic"
>Hvad er det som ses på fladen?</link
></member>
<member
><link linkend="gettingstarted-overview-help"
>Hvordan man får hjælp.</link
></member>
<member
><link linkend="gettingstarted-overview-menu"
>Hvad findes i menuerne?</link
></member>
<member
><link linkend="gettingstarted-overview-tools"
>Hvad er værktøjsvisningerne til for?</link
></member>
</simplelist>

<sect2 id="gettingstarted-overview-basic">
<title
>På overfladen</title>

<para
>Når du starter &kdevelop; for første gang får du noget at se der ligner det her:</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="empty-ide.png" format="PNG"/>
</imageobject>
<caption>
<para
>&kdevelop;s udseende ved første opstart.</para>
<para
>(I virkeligheden er &kdevelop;s oprindelige vindue større, men elementerne du ser er de samme.)</para>
</caption>
</mediaobject>
</screenshot>

<formalpara>
<title
>Arbejdsområde og værktøjsvisnings-faneblade.</title>
<para
>I denne førstegangstilstand bruger &kdevelop; den såkaldte <link linkend="uimodes-survey"
>IDEAl -brugergrænseflade</link
>. Et så stort arbejdsområde som muligt er omkrandset til venstre, nederst og til højre af en en række knapper der ligner faneblade i en fanebladsvisning. Klikker du på en af knapperne åbnes en <emphasis
>værktøjsvisning</emphasis
> i et vindue så du kan arbejde på en bestemt opgave.</para>
</formalpara>

<formalpara>
<title
>Menuer og værktøjslinjer</title>
<para
>I toppen er der den sædvanlige menulinje, med selskab af flere rækker af værktøjslinjer, nogle af dem tomme til at begynde med. De fyldes op med knapper så snart der er et åbent projekt.</para>
</formalpara>

<formalpara>
<title
>Statuslinje</title>
<para
>Til sidst er der en statuslinje i bunden af vinduet, der viser kort information om flere forskellige opgaver.</para>
</formalpara>
</sect2>

<sect2 id="gettingstarted-overview-help">
<title
>Sådan får du hjælp</title>

<para
>Udover <guimenu
>Hjælpe</guimenu
>menuen der har svar på specifikke spørgsmål, sørger statuslinjen og to slags værktøjsvink for hurtig information.</para>

<formalpara>
<title
>Hvad gør denne menuindgang?</title>
<para
>Når du placerer musemarkøren på et menupunkt, vises der som regel lidt kort information i statuslinjen. I de fleste tilfælde er det blot samme navn som menupunktet, mens der i andre tilfælde vises yderligere information om menupunktets formål.</para>
</formalpara>

<formalpara>
<title
>Hvad hedder dette element.</title>
<para
>På mange elementer vises der et kort værktøjsvink når du placerer musemarkøren på det et par sekunder. Det er nyttigt når man hurtigt skal orientere sig i en værktøjslinje eller en værktøjsvisning i IDEAL-tilstanden når KDevelop er indstillet til kun at vise ikoner på disse knapper.</para>
</formalpara>

<formalpara>
<title
>Hvad gør denne her?</title>
<para
>Man kan få mere information gennem udvidede værktøjsvink for mange elementer i udviklingsmiljøet. Vælg <menuchoice
><guimenu
>Hjælp</guimenu
> <guimenuitem
>Hvad er dette?</guimenuitem
></menuchoice
> eller tryk på <keycombo
><keycap
>&Shift;</keycap
><keycap
>F1</keycap
></keycombo
> og vælg så med spørgsmålstegnet det element du ønsker at vide mere om. Du kan også åbne en hvilken som helst menu på denne måde og klikke på et menupunkt (aktivt som inaktivt) for at få mere information.</para>
</formalpara>
</sect2>

<sect2 id="gettingstarted-overview-menu">
<title
>Hvad er der i menuerne?</title>

<para
>Der er ti menuer som kan vælges i menulinjen. De fleste befolkes med alle tilvalg når et projekt er åbnet for egentligt arbejde, mens andre kræver at mindst et dokument er åbnet. I korthed tillader de følgende slags handlinger.</para>

<note>
<para
>Dette er kun en oversigt. For en detaljeret beskrivelse af menuerne, se <link linkend="commands"
>Kommandoreferencen</link
>.</para>
</note>

<variablelist>
<varlistentry>
<term
><guimenu
>Fil</guimenu
></term>
<listitem>
<formalpara>
<title
>Almindelige handlinger</title>
<para
>Dette er ret grundlæggende. Det lader dig oprette, åbne, gemme, udskrive og lukke dokumentfiler, såvel som afslutte &kdevelop;-programmet som normalt.</para>
</formalpara>

<formalpara>
<title
>Nulstil alt</title>
<para
>Lader dig nulstille alle de seneste ændringer som endnu ikke er gemt, ved at indlæse filen igen fra disk. Dette fungerer for alle filer du redigerer, ikke kun dem som indgår i et projekt.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Redigér</guimenu
></term>
<listitem>
<para
>Denne menu er brugbar hvis kun et dokument er åbnet.</para>

<formalpara>
<title
>Almindelige handlinger</title>
<para
>Det tilbyder den sædvanlige fortryd/annullér fortryd og klip, kopiér og indsæt-funktionalitet. Derforuden lader det dig vælge tekstblokke på forskellige vis.</para>
</formalpara>

<formalpara>
<title
>Søg og erstat</title>
<para
>Der er to meget kraftfulde søgefunktioner tilgængelige, <menuchoice
><guimenu
>Redigér</guimenu
> <guimenuitem
>Søg i filer</guimenuitem
></menuchoice
> og <menuchoice
><guimenu
>Redigér</guimenu
> <guimenuitem
>Søg-vælg-erstat...</guimenuitem
></menuchoice
>. Foruden de sædvanlige søge- og erstatningsfunktioner begrænsede til det nuværende dokument, kan du desuden udføre globale søge- og erstatningshandlinger på en gang.</para>
</formalpara>

<formalpara>
<title
>Avanceret tekstredigering</title>
<para
>Der er mulighed for at reformatere det aktuelle dokument og automatisk fuldstændiggøre delvist indtastet tekst på forskellige måder.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Vis</guimenu
></term>
<listitem>
<para
>Ligesom menuen <guimenu
>Redigér</guimenu
>, er denne menu kun nyttig hvis et projekt er åbent. I dette tilfælde er (bland andet) følgende tilvalg tilgængelige:</para>

<formalpara>
<title
>Navigeringshistorik</title>
<para
>Skift mellem dokumenterne &etc; du har besøgt.</para>
</formalpara>

<formalpara>
<title
>Fejlsporing</title>
<para
>Navigér til linjerne i kildekoden hvor fejlene i den seneste oversættelse skete.</para>
</formalpara>

<formalpara>
<title
>Editor-relaterede handlinger</title>
<para
>Nogle indgane i <guimenu
>Vis</guimenu
>-menuen kontrollerer editorens udseende. Når der er tale om &kate;-parten (Embedded Advanced Text Editor) er følgende kontroller til rådighed:</para>
</formalpara>

<itemizedlist>
<listitem>
<para
>Kontrollér opførsel af linjeombrydning i dokumentvinduet.</para>
</listitem>
<listitem>
<para
>Vis eller skjul forskellige visninger i kanten af dokumentvinduet. linjenumre, ikoner og desuden bogmærker i rullebjælken.</para>
</listitem>
<listitem>
<para
>Kontrollér visningen af foldede sektioner (midlertidigt skjult) i kildekode.</para>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Projekt</guimenu
></term>
<listitem>
<para
>Al arbejde i &kdevelop; er baseret på <emphasis
>projekter</emphasis
> der egentlig bare samler kildekoder-filer, byggehåndterings-filer og andet information i en projektmappe. i denne menu kan du kontrollere hvilket projekt du vil bruge, hvilke egenskaber det har og her er også nogle håndteringshandlinger. Specielt:</para>

<formalpara>
<title
>Åbn et projekt</title>
<para
>Tillader dig at oprette nye projekter, åbne eksisterende og importere projekter fra andre miljøer.</para>
</formalpara>

<formalpara>
<title
>Projektindstillinger</title>
<para
>Tillader dig at definere en hel masse forskellige projektegenskaber.</para>
</formalpara>

<formalpara>
<title
>Klassehåndtering</title>
<para
>Tilføj nye klasser til projektet og få overblik over klassers arv-sammenhæng.</para>
</formalpara>

<formalpara>
<title
>Distribuér projekt</title>
<para
>Hjælper dig med at bygge distributionspakker af projektet.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Byg</guimenu
></term>
<listitem>
<para
>Denne menu drejer sig om at oversætte og dokumentere projektet. Derfor er den kun mulig at bruge når et projekt er åbnet. I dette tilfælde er følgende handlinger til rådighed:</para>

<formalpara>
<title
>Oversæt, link, kør</title>
<para
>Lader dig oversætte og linke hele projektet eller dele af det, såvel som køre programmet i udviklingsmiljøet.</para>
</formalpara>

<formalpara>
<title
>Forbered bygge-operationer</title>
<para
>Dette afhænger faktisk af make-systemet du benytter til dette projekt. Når der er talte om automake-projekter, kan du køre <filename
>Makefile.cvs</filename
> og <filename
>configure</filename
> for sig selv. Der er også mulighed for, i forskellig udstrækning, at fjerne oversatte filer fra projektet.</para>
</formalpara>

<formalpara>
<title
>Installér programmet</title>
<para
>Lader dig installerere programmet i lokale kataloger, men også i system-kataloger hvortil kun root har adgang.</para>
</formalpara>

<formalpara>
<title
>API-dokumentation</title>
<para
>Byg eller eller fjern doxygen-baseret API-dokumentation fra projektet som defineret i projektindstillingerne.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Fejlsøg</guimenu
></term>
<listitem>
<para
>Selvom denne menu fyldes med punkter så snart et projekt er aktivt, er den naturligvis kun brugbar hvis dette projekt i forvejen er oversat med fejlsøgningsinformation (dette sættes op i <menuchoice
><guimenu
>Projekt</guimenu
> <guimenuitem
>Projektindstillinger...</guimenuitem
></menuchoice
>. Dermed er følgende handlinger til rådighed:</para>

<formalpara>
<title
>Almindelige fejlsøgerhandlinger</title>
<para
>Første sektion i <guimenu
>Fejlsøg</guimenu
>-menuen sørger for en grafisk brugergrænseflade til GDB &GNU; symbolsk fejlsøger. Den lader dig starte og stoppe dit program i fejlsøgeren og trinvis gennemgå det på forskellige måder.</para>
</formalpara>

<formalpara>
<title
>Stoppunkter</title>
<para
>&kdevelop; lader dig sætte stoppunkter i dit programs kildekode på flere måder. En af dem er at bruge <guimenuitem
>Slå stoppunkt til/fra</guimenuitem
>-menupunktet.</para>
</formalpara>

<formalpara>
<title
>Avanceret fejlsøgning</title>
<para
>Andre <guimenu
>Fejlsøg</guimenu
>-menuindgange tillader mere sofistikeret programanalyse. Brug <keycombo
><keycap
>&Shift;</keycap
><keycap
>F1</keycap
></keycombo
>  for at få mere information om deres formål.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Scripter</guimenu
></term>
<listitem>
<para
>Du kan kalde diverse scripter fra menuen for nemmere at opnå langtrækkende ændringer af teksten i editorvinduet som for øjeblikket bruges. Tilgængelige handlinger afhænger dog af scriptet som vælges. </para>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Vindue</guimenu
></term>
<listitem>
<para
>Dette er ret almindeligt. Du kan vælge et hvilket som helst åbent dokumentvindue såvel som lukke et eller flere dokumentvinduer derinde. Du kan endda vælge en samling af vinduer der skal lukkes med en enkel handling.</para>

<para
>Afhængig af editorpluginnet du bruger, kan der måske også findes andre menupunkter. Kate, standard-editorplugin, tillader eksempelvis også at editorvinduet opdeles vandret eller lodret.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Værktøjer</guimenu
></term>
<listitem>
<para
>&kdevelop; kan tilpasses på mange områder. Du kan vælge din favorit-editor til dine dokumenter såvel som udvide udviklingsmiljøets funktionalitet med eksterne værktøjer og plugin. Menuen <guimenu
>Værktøjer</guimenu
> afspejler det meste af disse mulige indstillinger.</para>

<formalpara>
<title
>Avanceret redigering</title>
<para
>Den øvre del af <guimenu
>Værktøjer</guimenu
>-menuindgangene sørges der for af det valgte editor-plugin. Du kan vælge din favorit-editor gennem <menuchoice
><guimenu
>Opsætning</guimenu
> <guimenuitem
>Indstil KDevelop...</guimenuitem
> <guilabel
>Editor</guilabel
></menuchoice
> Så snart et redigerbart dokumenter markeret, vil den øvre del af <guimenu
>Værktøjer</guimenu
>-menuen sørge for avancerede redigeringskommandoer, specifik for den aktuelle editor.</para>
</formalpara>

<formalpara>
<title
>Webside-håndtering</title>
<para
>Hvis det aktive dokumentvindue indeholder en HTML-side, (&eg; vist fra udvalget i <guilabel
> Dokumentation</guilabel
>, vil <guimenu
>Værktøjer</guimenu
> vise ekstra menuindgange som giver diverse måder at håndtere websiden på.</para>
</formalpara>

<formalpara>
<title
>Andre værktøjer</title>
<para
>Sædvanligvis er der en mængde andre indgange ifølge de værktøjer som for øjeblikket er tilgængelige. Brug <keycombo
><keycap
>&Shift;</keycap
> <keycap
>F1</keycap
></keycombo
> for at få mere information om deres formål.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Opsætning</guimenu
></term>
<listitem>
<para
>Denne menu lader dig vise og skjule menulinjen, værktøjslinjer og statuslinjen. Desuden kan du indstille genveje, værktøjslinjer, underretninger, editoren og &kdevelop;&apos;s generelle opførsel.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Hjælp</guimenu
></term>
<listitem>
<para
>Her kan du vise KDevelops håndbog, slå begreber op i diverse dokumentationsfiler, vise manualsider (det traditionelle Unix manualformat) og infosider (GNU manualformatet). Desuden kan du rapportere fejl og få noget information om den nuværende version af KDevelop og dets forfattere.</para>
</listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="gettingstarted-overview-tools">
<title
>Hvad er de der værktøjsvisningerne til for?</title>

<para
>Med brugergrænsefladen IDEA-vinduetilstand omgives arbejdsfladen af tre linjer med knapper, såkaldte <emphasis
>værktøjsvisningsfaneblade</emphasis
>. De gør at man kan få adgang til <emphasis
>værktøjsvisningsvinduer</emphasis
> som løser vigtige opgaver under programmeludviklingen. Hver af disse tre linjer værktøjsvisninger tjener forskellige hovedformål.</para>

<itemizedlist>
<listitem>
<formalpara>
<title
>Venstre side</title>
<para
>Giver mulighed for adgang til værktøjer for navigering og udvalg.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Underkanten</title>
<para
>Disse visninger viser meddelelser som skabes af forskellige værktøjer.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Højre side</title>
<para
>Giver mulighed for adgang til dokumentation og værktøjer for kildekodehåndtering.</para>
</formalpara>
</listitem>
</itemizedlist>

<para
>Antal værktøjsvisningsfaneblade som vises vil ændres når et projekt er åbnet til at arbejde med. Flere værktøjer for at arbejde med projektet kommer så til at være tilgængelige. Det egentlige antal værktøjsvisninger afhænger af de <link linkend="plugin-tools"
>plugin-værktøjer</link
> som for øjeblikket er tilgængelige i &kdevelop;. Du finder mere om dette emne i kapitlet <link linkend="setup"
>Indstil KDevelop</link
>.</para>

<para
>For øjeblikket, når intet projekt er åbent, og standardantal plugin-værktøjer er indlæste, findes følgende værktøjsvisninger. Ved at klikke på et faneblad åbnes eller lukkes værktøjsvisningens vindue.</para>

<variablelist>
<varlistentry>
<term
>Navigering og udvalg</term>
<listitem>
<formalpara>
<title
>Filvælger</title>
<para
>Sørger for et felt for at navigere i mappetræet og vælge filer at arbejde med præcis som du gør i &konqueror;. At klikke på en fil åbner den i et passende redigeringsvindue på arbejdsfladen. Et højreklik i filvælgerens område gør at en menu for navigering og filhåndtering vises.</para>
</formalpara>

<formalpara>
<title
>Filliste</title>
<para
>Lister filer som for øjeblikket er åbne. At klikke på en fil vælger oftest dets redigeringsvindue på arbejdsfladen. Brug dette for hurtigt at navigere blandt et stort antal åbne filer. Desuden giver denne visning en måde at organisere åbne filer i forskellige <emphasis
>sessioner</emphasis
>. Dette er særligt nyttigt i meget store og komplekse projekter, for at hjælpe udvikleren med at koncentrere sig om forskellige opgaver. At højreklikke på en fil gør at en filhåndteringsmenu dukker op.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
>Visning af meddelelser</term>
<listitem>
<formalpara>
<title
>Program</title>
<para
>Viser uddata fra et program som startes indefra &kdevelop;.</para>
</formalpara>

<formalpara>
<title
>Diff</title>
<para
>Bruges til at vise indholdet i filer med programrettelser. Viser uddata fra værktøjet for visning af forskelle, som startes fra menuen <menuchoice
><guimenu
>Værktøjer</guimenu
> <guimenuitem
>Visning af forskelle...</guimenuitem
></menuchoice
>.</para>
</formalpara>

<formalpara>
<title
>Meddelelser</title>
<para
>Viser meddelelser som skabes af byggeværktøjerne som kaldes indefra &kdevelop;, oftest fra menuen <guimenu
>Byg</guimenu
>.</para>
</formalpara>

<formalpara>
<title
>Søg i filer</title>
<para
>Viser listen med punkter som findes af den generelle søgefunktion som startes fra menuen <menuchoice
><guimenu
>Redigér</guimenu
> <guimenuitem
>Søg i filer...</guimenuitem
></menuchoice
>. Ved at klikke på en linje her, åbnes filen automatisk på angivet position i et redigeringsvindue.</para>
</formalpara>

<formalpara>
<title
>Erstat</title>
<para
>Lister resultat af den generelle søge- og erstatningsfunktionen som startes fra menuen <menuchoice
><guimenu
>Redigér</guimenu
> <guimenuitem
>Søg-vælg-erstat...</guimenuitem
></menuchoice
>. I denne visning kan du for hvert fundet punkt bestemme dig for om du virkelig vil erstatte det eller ikke.</para>
</formalpara>
<note>
<para
>Den generelle søge- og erstatningsfunktion er i virkeligheden kun tilgængelig efter et projekt er indlæst i &kdevelop;. Ellers er værktøjet i menuen <menuchoice
><guimenu
>Redigér</guimenu
> <guimenuitem
>Søg-vælg-erstat</guimenuitem
></menuchoice
> ikke aktiveret.</para>
</note>

<formalpara>
<title
>Konsol</title>
<para
>Åbner et terminalemuleringsvindue som ligner <application
>Konsole</application
> i &kde; hvor du kan bruge tastaturkommandoer med en traditionelt &UNIX; kommandoradsgrænseflade.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
>Dokumentation og kildekodehåndtering</term>
<listitem>
<formalpara>
<title
>Dokumentation</title>
<para
>&kdevelop; giver adgang til en mængde dokumentation via dette værktøj. Her kan du komme til dokumentfiler, oftest direkte fra en anden computer, på en struktureret måde. Der er flere måder direkte at komme til værdifuld information fra håndbøger om &kde; og &Qt;.</para>
</formalpara>

<para
>Se kapitlerne <link linkend="documentation"
>Dokumentation</link
> og <link linkend="setup-docu"
>Indstil dokumentationen</link
> for mere information.</para>

<formalpara>
<title
>Kodestumper</title>
<para
>Dette værktøj tillader dig at opbevare udvalgt tekst permanent for senere brug for andre redigeringsomgange. Det er et meget fleksibelt værktøj, eftersom alle tekststumper som opbevares her kan indeholde en sæt variabler, som får deres virkelige værdier når en sådan tekststump indsættes i en anden tekst.</para>
</formalpara>
<para
>Mere information om dette er tilgængelig i kapitlerne <link linkend="editing-snippets"
>Kodestumper</link
> og <link linkend="setup-snippets"
>Indstil værktøjet for kodestumper</link
>.</para>
</listitem>
</varlistentry>
</variablelist>
</sect2>
</sect1>

<sect1 id="gettingstarted-configure">
<title
>Nogle indstillinger</title>

<para
>Inden vi påbegynder det første eksempelprojekt rigtigt, bør vi indstille &kdevelop;s opførsel efter vore behov. Selvom de fleste standardindstillinger allerede er passende, er der nogle steder som det ville være godt at ændre.</para>

<note>
<para
>Hvis du vil vide mere om indstilling af &kdevelop;, så kig i kapitlet <link linkend="setup"
>Indstil KDevelop</link
>.</para>
</note>

<sect2 id="gettingstarted-configure-general">
<title
>Nogle generelle indstillinger</title>

<para
>Klik på menuen <menuchoice
><guimenu
>Opsætning</guimenu
> </menuchoice
> for at indstille &kdevelop; og vælg <menuchoice
><guimenuitem
>Indstil KDevelop...</guimenuitem
></menuchoice
>. Dialogen <guilabel
>Indstil KDevelop</guilabel
> dukker op, og viser følgende indstillingsside, <guilabel
>Generelt</guilabel
>, til højre.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-general.png" format="PNG"/>
</imageobject>
<caption>
<para
>Den generelle indstillingsdialog i &kdevelop;</para>
</caption>
</mediaobject>
</screenshot>

<para
>De fleste standardindstillinger er o.k., men to af indstillingerne vil du måske ændre.</para>

<formalpara>
<title
>Standardprojektmappe</title>
<para
>Når &kdevelop; startes for første gang er den formodentlig forudindstillet til din hjemmemappe. De fleste foretrækker imidlertid særlig projektmappe for programmeludvikling. Ændr tekstfeltet til hovedmappen for udvikling som du foretrækker. Du kan vælge det i mappetræet hvis du klikker på knappen <guilabel
>Åbn fildialog</guilabel
> markeret med en mappeikon, til højre for tekstfeltet.</para>
</formalpara>

<para
>I vort eksempel antager vi (i mangel på bedre) en brugere som kaldes <filename class="directory"
>udvikler</filename
>. Erstat derfor altid <quote
>udvikler</quote
> med dit brugernavn. Vor udvikler udnytter hovedmappen <filename class="directory"
>/home/udvikler/projekt</filename
> til selve udviklingen. Igen, erstat <filename class="directory"
>projekt</filename
> med navnet på din udviklingsmappe. </para>

<para
>&kdevelop; laver normalt en egen undermappe under hovedmappen for hvert nyt projekt du laver. Alle filer i et projekt som for eksempel hedder <quote
>Hello</quote
> kommer i vort tilfælde til at blive placeret i mappen <filename class="directory"
>/home/udvikler/projekt/hello</filename
>.</para>

<para
>Du kan naturligvis midlertidigt sætte disse mappeindstillinger ud af kraft hvis du behøver det. Se kapitlet <link linkend="applicationwizard"
>Programguide</link
> for mere information om dette.</para>

<formalpara>
<title
>Oversætteruddata</title>
<para
>Så snart &kdevelop; kompilerer noget kildekode, vises meddelelser fra byggeværktøjerne, såsom <application
>make</application
>, i vinduet <guilabel
>Meddelelser</guilabel
> længst nede på arbejdsfladen. Oftest er meddelelserne overvældende ordrige. For at få et bedre overblik over hvad der sker, har &kdevelop; et antal indbyggede måder at forkorte meddelelserne.</para>
</formalpara>

<para
>Afhængig af hvilken version af &kdevelop; du bruger, kan indstillingen <guilabel
>Oversætteruddata</guilabel
> være forudindstillet til <quote
>fuldstændig</quote
>, hvilket gør at alt indhold i meddelelser vises i sin helhed. Du vil nok ændre dette til den meget mere praktiske indstillingen <quote
>meget kort</quote
>. Vælg den blot i dropned-feltet.</para>

<caution>
<para
>Vær klart over at kun <emphasis
>den mest grundlæggende</emphasis
> information vises i vinduet <guilabel
>Meddelelser</guilabel
> med denne indstilling. Hvis fejl skulle opstå når du bygger, behøver du formodentlig se mere af, om ikke hele, meddelelseteksten. Meddelelserne er imidlertid ikke gået tabt. Højreklik blot i vinduet <guilabel
>Meddelelser</guilabel
> og vælg f.eks. <quote
>Fuldstændig oversætteruddata</quote
> i den sammenhængsafhængige menuen.</para>
</caution>
</sect2>

<sect2 id="gettingstarted-configure-search">
<title
>Initiér søgeindeks for dokumentation</title>

<para
>Der er en anden, ikke så åbenbar, indstilling som helst skal gøres inden selve udviklingsarbejdet påbegyndes. Dette skyldes at du regelmæssigt vil lave søgninger i dokumentationen under udviklingen. &kdevelop; kræver at et antal søgeindekser skabes inden en sådan søgehandling kan gennemføres. Lad os initiere dem inden vi udfører de første skridt i det egentlige arbejdet med &kdevelop;.</para>

<para
>Åbn værktøjsvisningen <guilabel
>Dokumentation</guilabel
> i højre side i &kdevelop;s hovedvindue. Åbn dialogsiden <guilabel
>Søg</guilabel
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="documents-search.png" format="PNG"/>
</imageobject>
<caption
><para
>Hvor skal søgeindeks skabes.</para
></caption>
</mediaobject>
</screenshot>

<para
>Klik nu på knappen <guibutton
>Opdatér indstilling</guibutton
> for at sikre dig at de grundlæggende søgeværktøjer er rigtigt indstillede. En dialog skal dukke op, som siger <quote
>Configuration file updated</quote
>. Klik på <guibutton
>O.k.</guibutton
> for at lukke den.</para>

<para
>Når dette er gjort, er &kdevelop; klar til at tolke kendt dokumentation og bygge nogle nyttige søgeindekser ud fra den. Klik på knappen <guibutton
>Opdatér indeks</guibutton
> til højre. Nu dukker dialogen <guilabel
>Opretter søgeindeks</guilabel
> op, og viser forløbet når indekset skabes.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-docu-indexgen.png" format="PNG"/>
</imageobject>
<caption
><para
>&kdevelop; laver søgeindeks for dokumentation.</para
></caption>
</mediaobject>
</screenshot>

<para
>Det tager en vis tid afhængig af dokumentationens størrelse og computerens ydelse. Men til sidst ændres knappen <guibutton
>Annullér</guibutton
> til <guibutton
>O.k</guibutton
>. Klik så på knappen for at fortsætte.</para>

<note>
<itemizedlist>
<listitem>
<para
>Det bør normalt fungere direkte, men i visse tilfælde er programmet <application
>htdig</application
> som &kdevelop; bruger til at udføre fuldtekstsøgning måske ikke rigtigt indstillet. Kig i kapitlet <link linkend="setup-docu-textsearch"
>Indstilling af indeks for tekstsøgning</link
> for mere hjælp i dette tilfælde.</para>
</listitem>
<listitem>
<para
>For at kunne slå specifik information op om &kde;'s og &Qt;'s programmeringsgrænseflade, kræves at <emphasis
>KDELibs Apidocs</emphasis
> fandtes da &kdevelop; blev installeret. Hvis du har problemer med at oprette indeks eller udføre <link linkend="gettingstarted-edit-defs"
>eksemplerne med opslag af identifikator</link
> senere i kapitlet, så sørg for at dokumentationen findes og at &kdevelop; kan komme til den. Se <link linkend="kdevelop-install"
>Installér KDevelop</link
> for mere information.</para>
</listitem>
</itemizedlist>
</note>
</sect2>
</sect1>


<sect1 id="gettingstarted-new">
<title
>Start et nyt projekt</title>

<para
>Næsten alle programmer består af dusinvis, hundredevis eller til og med tusindevis af filer som skal holdes strukturerede og mulige at vedligeholde. For at opnå dette, organiserer &kdevelop; udvikling af programmel i <emphasis
>projekter</emphasis
>. Derfor er det første praktiske skridt for at udvikle programmel i &kdevelop; oftest at oprette et nyt projekt.</para>

<para
>Heldigvis er det ganske let at opnå dette. &kdevelop; sørger for værktøjet Programguide for at gøre det. (Se kapitlet <link linkend="applicationwizard"
>Kom i gang: Programguiden</link
> for mere information.)</para>

<para
>Nu laver vi et enkelt &kde;-programprojekt for at anskueliggøre hvor enkelt dette kan opnås, og hvilke filer og værktøjer som &kdevelop; sørger for. Derigennem tager vi et hurtigt kig på:</para>

<simplelist>
<member
><link linkend="gettingstarted-new-setup"
>Hvordan man laver et nyt projekt ved hjælp af programguiden.</link
></member>
<member
><link linkend="gettingstarted-new-files"
>Hvilke filer som programguiden oprettede fra begyndelsen.</link
></member>
<member
><link linkend="gettingstarted-new-toolviews"
>Hvad som gælder for de yderligere værktøjsvisninger som vises sammen med projektet?</link
></member>
</simplelist>

<sect2 id="gettingstarted-new-setup">
<title
>Hvordan man laver et nyt projekt</title>

<para
>Lad os oprette et ganske enkelt &kde;-projekt, <quote
>Hello World</quote
>. Udfør blot følgende skridt:</para>

<procedure>
<step>
<para
>Klik på menupunktet <menuchoice
><guimenu
>Projekt</guimenu
> <guimenuitem
>Nyt projekt...</guimenuitem
></menuchoice
> for at starte programguiden.</para>
</step>

<step>
<para
>Dialogen <guilabel
>Opret nyt projekt</guilabel
> dukker op. I vinduet længst oppe til venstre, <guilabel
>Alle projekter</guilabel
>, findes et antal programsprog listede.</para>

<substeps>
<step>
<para
>Vi vil bygge et sædvanligt &kde;-program i C++. Klik derfor på knappen <guilabel
>+</guilabel
> til venstre for <guilabel
>C++</guilabel
> for at vise indholdet.</para>
</step>

<step>
<para
>Et sæt mulige programtyper vises. Vi skal bygge et &kde;-program, og viser derfor næste underniveau via knappen <guilabel
>+</guilabel
> ud for <guilabel
>KDE</guilabel
>.</para>
</step>

<step>
<para
>Nu tilbydes du et antal mulige <emphasis
>projektskabeloner</emphasis
>. Gå til begyndelsen af listen og klik på <guilabel
>Simpelt KDE-program</guilabel
>.</para>

<para
>En forhåndsvisning og kort beskrivelse af programmet som projektskabelonen vil oprette dukker op i de to vinduer til højre.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="tutorial-new-project.png" format="PNG"/>
</imageobject>
<caption>
<para
>Vælg projektskabelonen <quote
>Hello World</quote
></para>
</caption>
</mediaobject
></screenshot>
</step>

<step>
<para
>Vort program behøver et navn. Find feltet <guilabel
>Egenskaber</guilabel
> længst nede i dialogen og skriv et passende navn i indtastningsfeltet <guilabel
>Programnavn</guilabel
>.</para>

<para
>Vi bruger <quote
>Hello</quote
> i vort eksempel, men du kan bruge hvad du vil, under forudsætning af at navnet kun består af bogstaver, tal og understregningstegnet. Du vil bemærke at programguiden ikke accepterer andre tegn.</para>
</step>

<step>
<para
>Sørg for at tekstfeltet <guilabel
>Sted</guilabel
> under indtastningsfeltet viser navnet på hovedmappen for projekter, som vi indstillede i kapitlet <link linkend="gettingstarted-configure"
>Nogle indstillinger</link
> ovenfor. Hvis den ikke gør det, skriv da et passende mappenavn eller vælg et i mappelisten som knappen med mappeikonen til højre sørger for.</para>

<para
>Hvis alt gik godt, viser linjen <guilabel
>Endeligt sted</guilabel
> mappesøgestien som det nye projekt vil bruge. Hvis suffikset <quote
>(ugyldig)</quote
> er tillagt, så prøv med et andet navn på projektet og/eller sørg for at hovedmappen for projekter i tekstfeltet <guilabel
>Sted</guilabel
> virkelig findes og er skrivbar.</para>
</step>

<step>
<para
>Når alting er rigtigt, aktiveres knappen <guibutton
>Næste</guibutton
> på linjen længst nede i dialogen. Klik på den for at fortsætte.</para>
</step>
</substeps>
</step>

<step>
<para
>Dette fører dig til dialogsiden <guilabel
>Projektindstillinger</guilabel
>. Sørg for dig at tekstfelterne <guilabel
>Forfatter</guilabel
> og <guilabel
>E-mail</guilabel
> er rigtigt udfyldte. Oftest er de forudindstillede til de generelle brugerindstillinger i &kde; som angives i dialogen <guilabel
>Kodeord og brugerkonto</guilabel
> i &kde;'s kontrolcenter. Hvis de ikke er det, ændres de til værdier som du foretrækker for programmet.</para>

<screenshot id="gettingstarted-new-setup-options">
<mediaobject>
<imageobject>
<imagedata fileref="tutorial-hello-options.png" format="PNG"/>
</imageobject>
<caption>
<para
>Angiv dit navn og (valgfrit) e-mail-adresse.</para>
</caption>
</mediaobject>
</screenshot>

<note>
<para
>Du skal i det mindste angive navn for <guilabel
>Forfatter</guilabel
>. Det kræves for indstilling af programmets filer.</para>
</note>

<para
>Hvis alt er rigtigt, er knappen <guibutton
>Næste</guibutton
> aktiveret. Klik på den for at gå videre.</para>
</step>

<step>
<para
>Følgende dialogsider, <guilabel
>Versionskontrolsystem</guilabel
>, <guilabel
>Skabelon for .h-filer</guilabel
> og <guilabel
>Skabelon for .cpp-filer</guilabel
>, er ikke interessante for øjeblikket. Spring over dem ved at klikke på knappen <guibutton
>Næste</guibutton
>, og til sidst knappen <guibutton
>Afslut</guibutton
>.</para>
</step>
</procedure>

<para
>Det var alt! Programguiden tager over og laver et sæt oprindelige filer i mappen <guilabel
>Endeligt sted</guilabel
> du sørgede for i skridt 2c ovenfor.</para>

<para
>Når fasen at oprette filer er færdig, åbner &kdevelop; et redigeringsvindue med implementeringsfilen for <emphasis
>programmets hovedvindue</emphasis
> (som er <filename
>hello.cpp</filename
> i vort eksempel), så du nemt kan gå videre.</para>
</sect2>

<sect2 id="gettingstarted-new-files">
<title
>Oprindelige projektfiler</title>

<para
>Selvom vort eksempelprojekt Hello er ganske enkelt, oprettede programguiden en hel mængde kildekode og projekthåndteringsfiler. Den nemmeste måde at liste dem er at åbne værktøjsvisningen <guilabel
>Filtræ</guilabel
> længst nede til venstre. Dette åbner en filliste som ligner den nedenfor.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="tutorial-hello-new.png" format="PNG"/>
</imageobject>
<caption>
<para
>Oprindelige filer i projektet <quote
>Hello World</quote
></para>
</caption>
</mediaobject>
</screenshot>

<para
>For at forevise de væsentligste filer som programguiden oprettede, viser vi de fleste mappegrene i værktøjsvisningen <guilabel
>Filtræ</guilabel
> til venstre. Klik blot på grenenes navn i træet for at se selv.</para>

<para
>Desuden, kun for demonstrationsformål, viser vi også de fleste grene i værktøjsvisningen <guilabel
>Håndtering af automake</guilabel
> til højre, hvor nogle af projektets kildefiler også listes.</para>

<sect3 id="gettingstarted-new-files-copyright">
<title
>Anmærkninger om ophavsret</title>

<para
>Alle programmer som opfylder kravene ifølge &GNU; skal have en ophavsret. Der er to niveauer hvor ophavsret kræves, <emphasis
>i individuelle kildekodefiler</emphasis
> og <emphasis
>ved programkørsel</emphasis
>. Programguiden har allerede tilføjet passende ophavsret- og licensinformation i projektfiler.</para>

<formalpara>
<title
>Ophavsret på kildekodeniveau</title>
<para
>Husker du dialogsiden <link linkend="gettingstarted-new-setup-options"
> <guilabel
>Projektindstillinger</guilabel
></link
> da det nye projekt blev oprettet? Der var du tvunget til at angive dit (udviklerens) navn og en valgfri e-mail-adresse. Kig nu længst oppe i redigeringsvinduet <guilabel
>hello.cpp</guilabel
> som for øjeblikket vises på arbejdsfladen. Programguiden skrev  denne tekst ind længst oppe i licenshovedet for hver kildekodefil som blev oprettet.</para>
</formalpara>

<programlisting
>/***************************************************************************
 *   Copyright (C) 2006 by Dit Navn   *
 *   dit.navn@adresse.se   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
</programlisting>

<para
>Du finder nøjagtigt samme teksthovede i hver kildekodefil som skabes inde i &kdevelop; (under forudsætning af at du bruger passende indbyggede værktøjer til at oprette filer). &kdevelop; husker indstillingerne i nogle skabelonfiler som du finder i mappen <filename class="directory"
>templates</filename
>.</para>

<formalpara>
<title
>Ophavsret når programmet køres</title>
<para
>Når &kde;-programmet kører, kan brugeren vise data <guilabel
>Om</guilabel
> programmet, oftest via menuen <guimenu
>Hjælp</guimenu
>. Programguiden sørgede også for dette. Hvis du tager et kig i filen <filename
>main.cpp</filename
> finder du en indgang som ligner den nedenfor.</para>
</formalpara>

<programlisting
>int main(int argc, char **argv)
{
    KAboutData about("hello", I18N_NOOP("Hello"), version, description,
                     KAboutData::License_GPL, "(C) 2006 Dit Navn", 0, 0,
                     "dit.navn@adresse.dk");
    about.addAuthor( "Dit Navn", 0, "dit.navn@adresse.dk" );
</programlisting>

<para
>Dette tilføjer hovedudviklerens navn (<quote
>Dit Navn</quote
> i vort tilfælde) og din e-mail-adresse på ophavsretssiden <guilabel
>Om</guilabel
> når den vises, og desuden angives navn og adresse på siden <guilabel
>Forfattere</guilabel
>.</para>

<important>
<para
>Så snart du laver betydelige ændringer i et eksisterende projekt, så sørg for  at indtaste dit navn og din e-mail-adresse i ophavsretmeddelelsen for hver fil du ændrer, og selv i ophavsretmeddelelsen som vises når programmet køres. Vær ikke genert. Du hjælper samfundet for åben kildekode betydeligt hvis du gør dette.</para>
</important>
</sect3>

<sect3 id="gettingstarted-new-files-source">
<title
>Oprindelige kildekodefiler</title>

<para
>Programguiden placerede kildekodefiler i undermappen <filename class="directory"
>src</filename
> i projektets mappe. Du finder filerne <filename
>main.cpp</filename
>, <filename
>hello.h</filename
> og <filename
>hello.cpp</filename
> der, som du måske forventede dig.</para>

<para
>Der er yderligere nogle filer som du ofte finder i et typisk &kde;-program, nærmere bestemt:</para>

<itemizedlist>
<listitem>
<para
><filename
>hello.desktop</filename
> indeholder en del metadata som &kdevelop; bruger til at håndtere og starte programmet.</para>
</listitem>

<listitem>
<para
><filename
>hi16-app-hello.png</filename
> og <filename
>hi32-app-hello.png</filename
> indeholder nogle oprindelige standardikoner, som &kdevelop; bruger til at vise programmet.</para>
</listitem>

<listitem>
<para
>Tilsidst, indeholder <filename
>helloui.rc</filename
> en beskrivelse af programmets brugergrænseflade, for øjeblikket menuerne som programmet sørger for.</para>
</listitem>
</itemizedlist>
</sect3>

<sect3 id="gettingstarted-new-files-doc">
<title
>Oprindelig programdokumentation</title>

<para
>I projektets undermappe <filename class="directory"
>doc/en</filename
> finder du filen <filename
>index.docbook</filename
>. Det er en standardskabelon som kan være et udgangspunkt for at begynde skrive passende brugerdokumentation.</para>
</sect3>

<sect3 id="gettingstarted-new-files-project">
<title
>Projektfiler og andre filer</title>

<para
>Du har sikkert bemærket at filerne vi hidtil har introduceret angives med fed type i værktøjsvisningen <guilabel
>Filtræ</guilabel
>, mens de fleste andre filer ikke gør det. Det illustrerer den væsentligt anderledes brug disse filer har. Indholdet i filer som angives med fed type påvirker programmet direkte. Kildekodefiler laver koden som skal køres, andre filer sørger for nødvendig data eller dokumentation. Filerne skal håndteres og behandles af projektet under byggeetaperne, og kaldes derfor <emphasis
>projektfiler</emphasis
>.</para>

<para
>Hvis du tager et kig på det nederste vindue i <guilabel
>Håndtering af automake</guilabel
> til højre på arbejdsfladen ser du også alle projektfiler listede. Værktøjet Håndtering af automake bruger denne viden til at sørge for byggehåndtering, som vi vil se inden længe.</para>

<para
>De andre filer uden fed type er mere af støttenatur. De tilhører flere særpræglede klasser, som følger:</para>

<itemizedlist>
<listitem>
<formalpara>
<title
>Byggehåndtering af projekt</title>
<para
>Disse filer styrer processer for kompilering, installation, oprettelse af dokumentation, osv. Hvis projektet bruger &GNU; <application
>autotools</application
>, som vort eksempel, finder du filen <filename
>Makefile.am</filename
> i hver projektmappe. De er en slags grundlæggende kernefiler for at bygge projektet, som indeholder styrekommandoer, og som behandles sammen med diverse <filename
>configure</filename
>-filer under byggeetaperne. En sådan byggeproces laver endelig <filename
>Makefile</filename
> i hver mappe. Ud fra disse bygger værktøjet <application
>make</application
> endelig programmets binære filer.</para>
</formalpara>

<para
><filename
>Makefile.am</filename
>-filerne skal vedligeholdes under hele udviklingsprocessen. Heldigvis befrier &kdevelop; dig fra det meste af denne byrde med værkøjet Håndtering af automake, som basalt set er et grafisk grænseflade til at underholde indeholdet i <filename
>Makefile.am</filename
>-filerne.</para>

<para
>Andre filer som styrer projektets byggeproces som for øjeblikket listes er <filename
>configure.in.in</filename
> og <filename
>subdirs</filename
> i projektets rodmappe. De behandles af nogle af filerne i den &kde;-specifikke administrationsmappe <filename class="directory"
>admin</filename
> for at oprette flere filer af typen <filename
>configure</filename
> og <filename
>Makefile</filename
>, og endelig programmets binære filer.</para>
</listitem>

<listitem>
<formalpara>
<title
>Administrationsfiler for &kdevelop;</title>
<para
>&kdevelop; behøver nogle egne håndterings- og administrationsdata. Disse er placeret i projektets rodmappe, i vort eksempel <filename
>hello.kdevelop</filename
>, <filename
>hello.kdevelop.pcs</filename
>, og <filename
>hello.kdevses</filename
>.</para>
</formalpara>

<para
>Filen <filename
>xxx.kdevelop</filename
> (hvor <quote
>xxx</quote
> angiver projektnavnet) er særligt vigtig. Den er hoved-<emphasis
>projektfilen</emphasis
> i KDevelop 3, og behøves hvis du senere vil indlæse projektet i det integrerede udviklingsmiljø.</para>

<warning>
<para
>Forsøg aldrig at ændre, omdøbe eller fjerne nogle af administrationsfilerne i &kdevelop; selv. Det integrerede udviklingsmiljø fungerer sandsynligvis ikke rigtigt for dit projekt bagefter.</para>
</warning>
</listitem>

<listitem>
<formalpara>
<title
>Filer for projektbeskrivelse ifølge GNU</title>
<para
>Nogle filer i projektets rodmappe kræves for alle programmer som opfylder kravene ifølge &GNU;. De er <filename
>AUTHORS</filename
>, <filename
>ChangeLog</filename
>, <filename
>INSTALL</filename
>, <filename
>COPYING</filename
> (som indeholder GNU GENERAL PUBLIC LICENSE), <filename
>INSTALL</filename
>, <filename
>NEWS</filename
>, <filename
>README</filename
> og <filename
>TODO</filename
>.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Andre filer</title>
<para
>Nogle andre filer som endnu ikke nævnt er:</para>
</formalpara>

<itemizedlist>
<listitem>
<para
><filename
>Doxyfile</filename
> styrer hvordan den projektspecifikke dokumentation af den interne programmeringsgrænseflade skabes.</para>
</listitem>

<listitem>
<para
>Kataloget <filename class="directory"
>templates</filename
> indeholder filskabeloner som det integrerede udviklingsmiljø bruger som grundlag når nye kildekodefiler skabes. Du kan redigere skabelonerne når som helst. Det nye indehold ses i næste kildekodefil af tilsvarende type som du laver.</para>

<para
>Du vil måske justere asteriskerne til højre på linjerne med ophavsret som programguiden indsatte i skabelonfilerne for <filename
>cpp</filename
> og <filename
>h</filename
>, sådan at kildekodefilerne som skabes med dem ser mindre mærkværdige ud.</para>
</listitem>

<listitem>
<para
>Kataloget <filename class="directory"
>po</filename
> bruges i oversættelsesformål. Det er i det væsentlige en del af projektfilerne (indeholder <filename
>Makefile.am</filename
>), men kommer i hovedsagen til at blive brugt ved behandling af oversættelser. Det er imidlertid ikke så interessant for programudvikleren.</para>
</listitem>

<listitem>
<para
>Tilsidst kræves mappen <filename class="directory"
>admin</filename
> særligt for &kde;-baserede programmer. Den sørger for en mængde filer som er nødvendige for at vedligeholde programmets kildekode og binære filer så de kan integreres på en rigtig måde i &kde;-miljøet.</para>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>
</sect3>
</sect2>

<sect2 id="gettingstarted-new-toolviews">
<title
>Yderligere værktøjsvisninger</title>

<para
>Som du vil have bemærket vistes flere yderligere værktøjsvisninger så snart programguiden var klar med det nye projekt. Disse giver kun mening under udvikling af projektet, og tilbyder i korthed følgende funktioner:</para>

<note>
<para
>Hvilke værktøjsvisninger som virkelig ses afhænger af de plugin som for øjeblikket er indlæste i &kdevelop;. Der er måder at styre dette. Se kapitlet <link linkend="setup-plugins"
>Plugin-værktøj</link
> for instruktioner.</para>
</note>

<sect3 id="gettingstarted-new-toolviews-left">
<title
>Navigerings- og udvalgsværktøjer (venstre side)</title>

<itemizedlist>
<listitem>
<formalpara>
<title
>Bogmærker</title>
<para
>Du kan markere en hvilken som helst linje i en tekstfil for hurtigt at komme tilbage til denne position fra hvor som helst. &kdevelop; husker alle sådanne <emphasis
>bogmærker</emphasis
>, også selvom du senere lukker redigeringsvinduet. Værktøjsvisningen <guilabel
>Bogmærker</guilabel
> lister alle bogmærker ifølge filnavn og linjenummer. Du behøver kun at klikke på en sådan indgang for at åbne det tilsvarende redigeringsvindue og placere markøren på en angiven linje.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Klasser</title>
<para
>Lister klasser, metoder, osv. kendte i projektet. At klikke på en indgang åbner en passende deklarationsfil eller kildekodefil i et redigeringsvindue og placerer markøren på den respektive deklaration eller definition.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Filgrupper</title>
<para
>Sorterer projektets filer i diverse grupper ifølge brugsområde, f.eks. Sources (kildekode), User Interface (brugergrænseflade), Icons (ikoner), Translations (oversættelser) og Others (øvrige).</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Variabler</title>
<para
>Bruges af fejlsøgningsværktøjet til at vise, evaluere og overvåge variabler når fejlsøgeren køres.</para>
</formalpara>
</listitem>
</itemizedlist>
</sect3>

<sect3 id="gettingstarted-new-toolviews-bottom">
<title
>Meddelelser (længst nede)</title>

<itemizedlist>
<listitem>
<formalpara>
<title
>Valgrind</title>
<para
><application
>Valgrind</application
> er et analyseværktøj for programmer som køres. Værktøjsvisningen lister resultatet af en sådan analysekørsel. Det bruges for eksempel til at finde hukommelseslækker.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Sikkerhedsproblemer</title>
<para
>Der er et plugin-værktøj i &kdevelop; for <guilabel
>sikkerhedskontrol</guilabel
>. Det analyserar kildekodefilen som for øjeblikket redigeres, for at finde flere sædvanlige sikkerhedsproblemer som kan opstå i programmet og underretter brugeren om dem i værktøjsvisningens vindue.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Stoppunkter</title>
<para
>Værktøjsvisningen muliggør eksplicit at sætte, fjerne og håndtere stoppunkter for fejlsøgeren i programmets kildekodefiler. Den bruges i sammenhæng med fejlsøgning.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Ctags</title>
<para
>Gør det muligt at oprette databaser med indeks af identifikatorer med det populære program <application
>Ctags</application
>. Denne database med mærker kan derefter bruges fra værktøjsvisningens vindue til at slå alle identifikator op som behøves i projektets kildekode. Ved at klikke på en linje med et sådant fundet punkt, åbnes et redigeringsvindue og placerer markøren på den tilsvarende identifikator i vinduet.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Problemer</title>
<para
>&kdevelop; holder styr på sædvanlige programmeringsproblemer i kildekodefilen som for øjeblikket redigeres, og underretter brugeren om dem i værktøjsvisningens vindue.</para>
</formalpara>
</listitem>
</itemizedlist>
</sect3>
  
<sect3 id="gettingstarted-new-toolviews-right">
<title
>Kildekodehåndtering (højre side)</title>
      
<itemizedlist>
<listitem>
<formalpara>
<title
>Håndtering af automake</title>
<para
>Værktøjet Håndtering af automake er basalt set en grafisk grænseflade for at håndtere indholdet i <filename
>Makefile.am</filename
>-filer i hver projektmappe. Værktøjsvisningen bruger to vinduer til at styre arbejdet. Det øverste vindue spejler en del af projektets undermapper, nærmere bestemt de som eksplicit indeholder <emphasis
>projektfiler</emphasis
>. Hver undermappe af denne type skal indeholde en <filename
>Makefile.am</filename
>-fil, og kaldes et <emphasis
>delprojekt</emphasis
> i sammenhæng med Håndtering af automake.</para>
</formalpara>

<para
>Ved at klikke på et delprojekt åbnes en passende visning af delprojektets projektfiler i det nederste vindue. Filerne som listes her er grupperede ifølge deres funktion i <filename
>Makefile.am</filename
> for dette delprojekt.</para>

<para
>Håndtering af automake er et meget kraftfuldt værktøj til at håndtere projektet og dets delprojekter, samt de roller projektfiler spiller når programmet bygges. Vi tager et hurtigt kig på nogle vigtigere dele <link linkend="gettingstarted-extend-automake"
>nedenfor</link
>. Se kapitlet <link linkend="project-management"
>Bygge- og projekthåndtering</link
> for en udførligere beskrivelse.</para>
</listitem>
</itemizedlist>
</sect3>
</sect2>
</sect1>


<sect1 id="gettingstarted-edit">
<title
>Nogle vink om hvordan man håndterer dokumenter</title>

<para
>I vort eksempelprojekt efterlod programguiden filen <filename
>hello.cpp</filename
> åben i et redigeringsvindue, så du med det samme kan begynde at arbejde med den. Vi forudsætter at du har god kunskab til hvordan man bruger en editor, så vi siger ikke så meget om dette. Der er imidlertid et antal praktiske funktioner i &kdevelop; for at håndtere redigeringsvinduer med faneblade og dokumenterne du arbejder med. Vi giver en kortfattet beskrivelse af nogle af disse, nærmere bestemt:</para>

<simplelist>
<member
><link linkend="gettingstarted-edit-headers"
>Hvordan man enkelt skifter mellem deklarationsfiler og implementeringsfiler.</link
></member>
<member
><link linkend="gettingstarted-edit-defs"
>Hvordan man hurtigt kommer til deklarationer og definitioner.</link
></member>
<member
><link linkend="gettingstarted-edit-arrange"
>Hvordan man omarrangerer redigeringsvinduer efter nuværende behov.</link
></member>
<member
><link linkend="gettingstarted-edit-problems"
>Hvordan man holder et øje med sædvanlige problemer.</link
></member>
</simplelist>

<sect2 id="gettingstarted-edit-headers">
<title
>Skift mellem deklarationsfiler og implementeringsfiler</title>

<para
>&kdevelop; sørger for en hurtig og enkel måde at skifte fra en given implementeringsfil (<filename
>.cpp</filename
>) til tilsvarende deklarationsfil (<filename
>.h</filename
>) og vice versa. Højreklik blot på redigeringsvinduet du vil skifte. En menu som ligner den følgende dukker op.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="editor-switch-header.png" format="PNG"/>
</imageobject>
<caption
><para
>Hvordan man skifter mellem implementeringsfiler og deklarationsfiler.</para
></caption>
</mediaobject>
</screenshot>

<para
>Find indgangen <guimenuitem
>Skift til deklaration/implementation</guimenuitem
> og vælg den. &kdevelop; slår tilsvarende deklarationsfil eller implementeringsfil op og åbner den i et andet redigeringsvindue. I vort eksempel, hvis du højreklikkede i kildekoden <filename
>hello.cpp</filename
>, vises filen <filename
>hello.h</filename
> og markøren placeres der.</para>

<para
>Der er mere end som så. Hvis du højreklikker inde i en klasseimplementeringsteksten, placerer &kdevelop; markøren på tilsvarende deklarationslinje i deklarationsfilen. Det omvendte tilfælde, et højreklik på en deklarationslinje, tager dig til tilsvarende klasseimplementering.</para>

<para
>Hvis redigeringsvinduet med filen at skifte til allerede findes, aktiverer &kdevelop; naturligvis det og placerer markøren i det hvis det behøves.</para>
</sect2>

<sect2 id="gettingstarted-edit-defs">
<title
>Hvordan man kommer til deklarationer og definitioner</title>

<para
>Men ifald du arbejder med en kildekodefil og vil slå deklarationen eller definitionen af en identifikator op du netop fandt i den? Jo, dette kan opnås lige så let. Det eneste du egentlig skal gøre er at højreklikke på identifikatoren det drejer sig om.</para>

<para
>Der er imidlertid to forskellige tilfælde at tage hensyn til, nemlig:</para>
<simplelist>
<member
><link linkend="gettingstarted-edit-defs-external"
>Få adgang til eksternt definerede identifikatorer</link
>, og</member>
<member
><link linkend="gettingstarted-edit-defs-project"
>håndtere projektinterne tekstpunkter</link
>.</member>
</simplelist>

<sect3 id="gettingstarted-edit-defs-external">
<title
>Eksterne deklarationer og definitioner</title>

<para
>Det sædvanligste tilfælde er at du vil slå en identifikator op som er defineret udenfor projektet. I &kde;-projekter er sådanne identifikatorer formodentlig dokumenterede i forskellige &kde;- eller &Qt;-biblioteker. Hvis &kde; og &kdevelop; er rigtigt installerede, kan &kdevelop; få adgang til sådan såkaldt dokumentation af programmeringsgrænseflade, og kan søge efter identifikatorer af denne type.</para>

<para
>Lad os kigge på et eksempel. Led efter følgende linjer i redigeringsvinduet <filename
>hello.cpp</filename
>.</para>

<programlisting
>Hello::Hello()
    : KMainWindow( 0, "Hello" )
{
</programlisting>

<para
>Højreklik på <classname
>KMainWindow</classname
>. En menu dukker op. Vælg tilvalget <guimenuitem
>Søg i dokumentationen: KMainWindow</guimenuitem
> der og slip museknappen. Nu åbnes værktøjsvisningen <guilabel
>Dokumentation</guilabel
>, med værdien <classname
>KMainWindow</classname
> som søgebegreb på siden <guilabel
>Søg</guilabel
>. Derefter åbnes et andet redigeringsvindue på arbejdsfladen som viser KDE's referenceside i programmeringsgrænsefladen for klassen <classname
>KMainWindow</classname
>.</para>

<para
>Alt dette ser ud som følger. (Vi åbnede med vilje allerede siden <guilabel
>Dokumentation</guilabel
> <guilabel
>Søg</guilabel
> for at anskueliggøre resultatet af menuvalget.)</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="editor-search-doc.png" format="PNG"/>
</imageobject>
<caption
><para
>Hvordan man slår en ekstern dokumenteret identifikator op.</para
></caption>
</mediaobject>
</screenshot>

<para
>Du kan ligesågodt vælge <guimenuitem
>Søg efter dokumentation: KMainWindow</guimenuitem
>. I dette tilfælde vises siden <guilabel
>Søgning</guilabel
> i værktøjsvisningen <guilabel
>Dokumentation</guilabel
>, som oftest sørger for et udvalg af sider som indeholder søgebegrebet. (I vort eksempel er det formodentlig klasserne <classname
>KMainWindow</classname
> og <classname
>KMainWindowInterface</classname
>.) Vælg den du er interesseret i så vises tilsvarende dokumentation i et redigeringsvindue.</para>

<note>
<para
>Hvis dette ikke fungerede, er der formodentlig intet dokumentindeks endnu. Initierede du indekset ifølge <link linkend="gettingstarted-configure-search"
>oven</link
>? Hvis ikke, gør det først, og kom derefter tilbage hertil for et nyt forsøg.</para>
</note>
</sect3>

<sect3 id="gettingstarted-edit-defs-project">
<title
>Projektinterne deklarationer og definitioner</title>

<para
>Sådanne søgefunktioner i ekstern dokumentation har imidlertid deres begrænsninger. Man kan naturligvis ikke slå en ekstern identifikator op hvis den kun defineres og bruges inde i det nuværende projekt. Men der er hjælp med det. &kdevelop; kan bruge indekser oprettede af programmet <application
>Ctags</application
> til at søge i projektets kildekode.</para>

<para
>Inden vi kan bruge det i vort eget eksempelprojekt Hello, skal vi først oprette et passende indeks. Dette gøres i værktøjsvisningen <guilabel
>Ctags</guilabel
> længst nede i arbejdsfladen.</para>

<para
>Når du klikker på fanebladet <guibutton
>Ctags</guibutton
> åbnes en dialog hvor du finder følgende tekst i nederste højre hjørne:</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="editor-ctags-regenerate.png" format="PNG"/>
</imageobject>
<caption
><para
>Byg et Ctags-indeks med knappen <guibutton
>Regenerr</guibutton
>.</para
></caption>
</mediaobject>
</screenshot>

<para
>Klik på knappen <guibutton
>Opret igen</guibutton
> og vent nogle sekunder. Så erstattes <guilabel
>Ingen Ctags-database fundet</guilabel
> med dagens dato. Nu er du parat til at slå en identifikator op i projektets kildekode.</para>

<tip>
<para
>Datoen udfor knappen <guilabel
>Opret igen</guilabel
> findes der for at minde dig om indekser som muligvis kan være for gamle. Så snart du åbenbart ikke kan slå en identifikator i projektet op, så overvej  at generere indekset igen. I store projekter kan det tage en anseelig tid, men du bør få for vane at genoprette indekset regelmæssigt efter større ændringer i kildekodefilerne.</para>
</tip>

<para
>Der er flere muligheder at slå en identifikator op i projektets kildekode.</para>

<itemizedlist>
<listitem>
<formalpara>
<title
>Brug værktøjsvisningen Ctags</title>
<para
>Dette er nemt. Begynde blot med at skrive navnet på identifikatoren som du er interesseret i i indtastningsfeltet <guilabel
>Opslag</guilabel
> længst nede til venstre. &kdevelop; forsøger at komplettere ordet du har skrevet så langt, og vise alle forekomster af identifikatorer som indledes med denne tegnfølge.</para>
</formalpara>

<para
>Hvis du for eksempel vil vide om identifikatoren <quote
>Hello</quote
> bruges i vort eksempelprojekt, skrives "H" i indtastningsfeltet <guilabel
>Opslag</guilabel
>. &kdevelop; begynder med det samme at arbejde og viser et resultat af denne type:</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="editor-ctags-lookup.png" format="PNG"/>
</imageobject>
<caption
><para
>Hvordan en identifikator slås op i værktøjsvisningen <guilabel
>Ctags</guilabel
>.</para
></caption>
</mediaobject>
</screenshot>

<para
>Hvis du klikker på en af de listede indgange, åbner &kdevelop; et redigeringsvindue med filen og placerer markøren på et passende sted.</para>
</listitem>

<listitem>
<formalpara>
<title
>Brug en sammenhængsafhængig menu i en kildekodefil</title>
<para
>Dette er bekvemt hvis du arbejder med en bestemt kildekodefil. Antag at du studerer filen <filename
>main.cpp</filename
> i vort eksempelprojekt Hello. Der finder du følgende linje:</para>
</formalpara>
<programlisting
>Hello *mainWin = 0;
</programlisting>
<para
>Du undrer dig måske over hvad <quote
>Hello</quote
> blev brugt til i programmet. For at finde ud af det, højreklikkes helt enkelt på identifikatoren Hello. En menu dukker op som svar på højreklikket, med følgende linjer nær slutningen.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="editor-ctags-menu.png" format="PNG"/>
</imageobject>
<caption
><para
>Hent <application
>Ctags</application
>-information om en af projektets interne identifikatorer.</para
></caption>
</mediaobject>
</screenshot>

<para
>Klik på det du er interesseret i, lad os sige <guilabel
>Ctags - Gå til definition: Hello</guilabel
>, så viser &kdevelop; med det samme redigeringsvinduet <filename
>hello.cpp</filename
> og placerer markøren præcis ud for klassedefinitionen:</para>
<programlisting
>Hello::Hello()
    : KMainWindow( 0, "Hello" )
{
</programlisting>
</listitem>

<listitem>
<formalpara>
<title
>Lav en global søgning</title>
<para
>Dette er særlig nyttigt hvis du vil slå vilkårlig tekst op i projektets kildekode. Der er to muligheder for at starte en global søgning inde i &kdevelop;.</para>
</formalpara>
<itemizedlist>
<listitem>
<para
>Start en global søgning med menupunktet <menuchoice
><guimenu
>Redigér</guimenu
> <guimenuitem
>Søg i filer...</guimenuitem
></menuchoice
>. Eller</para>
</listitem>
<listitem>
<para
>Brug den sammenhængsafhængige menu direkte med et højreklik af musen i redigeringsvinduet.</para>
</listitem>
</itemizedlist>

<para
>Vi anskueliggør den anden mulighed i eksempelprojektet Hello. Slutresultatet af menukaldet er stort set det samme. Lad os antage at du studerer kildekodefilen <filename
>hello.cpp</filename
> og har placeret markøren på den første forekomsten af Hello i den. Nu undrer du dig over hvor ordet <quote
>Hello</quote
> anvendes i projektets kildekode, og hvor mange forekomster der er. Dette er et typisk tilfælde hvor &kdevelop;s generelle søgefunktion bør bruges.</para>

<para
>Mens du nu stadigvæk holder markøren et sted over <quote
>Hello</quote
> i kildeteksten, klikkes med højre museknap. Den nu velkendte sammenhængsafhængige menu dukker op, hvor du skal vælge linjen <guilabel
>Flerfilsøgning: Hello</guilabel
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="editor-find-menu.png" format="PNG"/>
</imageobject>
<caption
><para
>Initiér en global søgning indefra et redigeringsvindue.</para
></caption>
</mediaobject>
</screenshot>

<para
>Dette gør at følgende dialog <guilabel
>Søg i filer</guilabel
> dukker op (nøjagtigt det samme som hvis du brugte menuen<menuchoice
><guimenu
>Redigér</guimenu
> <guimenuitem
>Søg i filer...</guimenuitem
></menuchoice
>).</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="find-in-files.png" format="PNG"/>
</imageobject>
<caption
><para
>En fleksibel grafisk grænseflade for at udføre generelle søgninger i projektet.</para
></caption>
</mediaobject>
</screenshot>

<para
>Som du bemærker er det et meget fleksibelt værktøj til at starte søgninger med <application
>find</application
> og <application
>grep</application
> i hele projektet. Vi går ikke ind på flere detaljer her, men du kan selv eksperimentere. For øjeblikket, skal <quote
>Hello</quote
> allerede være markeret i feltet <guilabel
>Mønster</guilabel
>. Hvis det ikke er det, så skriv det blot, og klik derefter på knappen <guibutton
>Søg</guibutton
> længst nede til højre.</para>

<para
>Nu åbnes værktøjsvisningen <guilabel
>Søg i filer</guilabel
> længst nede, og viser filnavne og linjer for alle forekomster af <quote
>Hello</quote
> i vort eksempelprojekt. Som sædvanligt, hvis du klikker på en linje, går &kdevelop; til det nøjagtige sted i et redigeringsvindue i arbejdsfladen.</para>

<para
>Der er to særligt interessante linjer i værktøjsvisningens vindue.</para>
<itemizedlist>
<listitem>
<para
>Længst oppe finder du kommandosekvenserne som &kdevelop; rent faktisk brugte til at udføre søgningen. Dette er nyttigt for mere nøjagtigt at styre søgningens resultat.</para>
</listitem>

<listitem>
<para
>Længst nede angives antal forekomster som findes når en søgning udføres. I vort eksempel skal det være <quote
>*** 11 træffere fundet ***</quote
>.</para>
</listitem>
</itemizedlist>

<para
>&kdevelop; husker søgeresultatet under hele sessionen som kører. Hvis du starter en ny global søgning, vises dens resultat med et andet fanebladsvindue i værktøjsvisningen <guilabel
>Søg i filer</guilabel
>.</para>
</listitem>
</itemizedlist>
</sect3>
</sect2>

<sect2 id="gettingstarted-edit-arrange">
<title
>Arrangér redigeringsvinduer</title>

<para
>Når du arbejder med store komplekse projekter kommer du ofte ud for at have en hel mængde faneblade med redigeringsvinduer i fanebladslinjen. Dette gør det nødvendigt at have særlige funktioner til at rydde op, ordne og gruppere alle redigeringsfanebladene. &kdevelop; sørger for flere måder at gøre dette. Vi tager et hurtigt kig på nogen af dem.</para>
<simplelist>
<member
><link linkend="gettingstarted-edit-arrange-clean"
>Hvordan man fjerner faneblade som ikke behøves.</link
></member>
<member
><link linkend="gettingstarted-edit-arrange-tabs"
>Hvordan man omarrangerer fanebladene.</link
></member>
<member
><link linkend="gettingstarted-edit-arrange-split"
>Hvordan man viser flere filer samtidigt på arbejdsfladen.</link
></member>
<member
><link
linkend="gettingstarted-edit-arrange-sourceheader"
>Hvordan man redigerer C++ kildekodefiler og deklarationsfiler samtidigt</link
></member>
<member
><link linkend="gettingstarted-edit-arrange-group"
>Hvordan man grupperer kildekodefiler i udviklingssessioner.</link
></member>
</simplelist>

<sect3 id="gettingstarted-edit-arrange-clean">
<title
>Oprydning i fanebladslinjen</title>

<para
>Hvis et enormt antal faneblade med redigeringsvinduer på en eller anden måde bliver dårligt arrangerede, vil man oftest lukke alle faneblade som ikke længere behøves. &kdevelop; sørger for flere funktioner til at gøre dette, den sædvanlige måde er totalt at lukke alle åbne redigeringsvinduer, og en mere specifik måde er hvor du udtrykkelig kan bestemme hvilke der skal lukkes og hvilke der skal beholdes åbne.</para>

<formalpara>
<title
>Lukke flere faneblade på en gang</title>
<para
>Dette er en slags totalmetode for at lukke unødige åbne faneblade, som du også kan finde i andre &kde;-programmer. Du kan bruge menuen <guimenu
>Vindue</guimenu
> eller højreklikke på et faneblad, for enten at</para>
</formalpara>
<itemizedlist>
<listitem>
<para
>lukke redigeringsvinduet som for øjeblikket er valgt,</para>
</listitem>
<listitem>
<para
>lukke alle andre åbne redigeringsvinduer, eller</para>
</listitem>
<listitem>
<para
>lukke alle redigeringsvinduer på en gang (kun tilgængeligt i menuen <guimenu
>Vindue</guimenu
>).</para>
</listitem>
</itemizedlist>

<formalpara>
<title
>Lukke markerede sæt faneblade</title>
<para
>Måden skridt for skridt at lukke enkelte faneblade med redigeringsvinduer kan blive besværlig hvis der er en stor mængde faneblade og du stadigvæk vil lade flere være åbne. I stedet for at efter de rigtige og lukke et faneblad af gangen, tilbyder &kdevelop; muligheden for at vælge kandidater i en liste og blot  lukke dem, med et enkelt  museklik.</para>
</formalpara>

<para
>Lad os illustrere dette med et enkelt eksempel. Lad os antage at der er flere filer åbne for redigering i vort eksempelprojekt Hello: <filename
>hello.cpp</filename
>, <filename
>hello.h</filename
>, <filename
>helloui.rc</filename
>, <filename
>hello.desktop</filename
> og <filename
>main.cpp</filename
>. Du vil nu lukke alle undtagen <filename
>hello.cpp</filename
> og <filename
>hello.h</filename
>. Den nemmeste måde at gøre det er med værktøjsvisningen <filename
>Filliste</filename
>. Eftersom denne liste med åbne filer er alfabetisk ordnet, er det enklere at finde dem du vil lukke. Fortsæt som følger:</para>

<procedure>
<step>
<para
>Åbn <guilabel
>Filliste</guilabel
>, hold tasten <keycap
>Ctrl</keycap
> nede, og klik på de filer du vil lukke i listen.</para>
</step>
<step>
<para
>Klik derefter med højre museknap, mens du holder musemarkøren på et filnavn i listen.</para>
</step>
<step>
<para
>Vælg <guimenuitem
>Luk markerete</guimenuitem
> fra den sammenhængsafhængige menu i <guimenu
>Fillisten</guimenu
>.</para>
</step>
</procedure>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="file-list-close-selected.png" format="PNG"/>
</imageobject>
<caption
><para
>Hvordan markerede redigeringsvinduer kan lukkes på en gang.</para
></caption>
</mediaobject>
</screenshot>
<para
>Det er det hele. &kdevelop; har lukket alle redigeringsvinduer som du ønskede, og du er klar til at fortsætte igen med en renset fanebladslinje.</para>
</sect3>

<sect3 id="gettingstarted-edit-arrange-tabs">
<title
>Hvordan redigeringsvinduets faneblade kan omarrangeres</title>

<para
>Selvom du kun har de redigeringsvinduer som virkelig behøves åbne, vil du måske alligevel omarrangere fanebladene på en logisk måde. &kdevelop; tilbyder nogle fælles måder at gøre dette. I korthed:</para>

<formalpara>
<title
>Grundlæggende indstilling: Hvor nye faneblade skal placeres</title>

<para
>I standardtilfældet, når et nyt redigeringsvindue åbnes, indsættes fanebladet til højre for fanebladet for redigeringsvinduet som for øjeblikket bruges. Dette kan ændres så det nye faneblad åbnes længst til højre på fanebladslinjen.</para>
</formalpara>
<para
>Du skal ændre en grundlæggende indstilling i &kdevelop;s brugergrænseflade for at aktivere denne opførsel.</para>
<procedure>
<step>
<para
>Vælg <menuchoice
><guimenu
>Opsætning</guimenu
> <guimenuitem
> Indstil KDevelop...</guimenuitem
></menuchoice
></para>
</step>
<step>
<para
>Klik på ikonen <guilabel
>Brugergrænseflade</guilabel
> i ikonlinjen til venstre i dialogen. Dialogsiden <guilabel
>Brugergrænseflade</guilabel
> vises nu.</para>
</step>
<step>
<para
>Find feltet som hedder <guilabel
>Browse med faneblade</guilabel
>. Fjern markeringen af afkrydsningsfeltet på linjen <guilabel
>Åbn nyt faneblad efter nuværende faneblad</guilabel
>.</para>
</step>
<step>
<para
>Luk &kdevelop; og genstart det. Nu åbnes fanebladene for nye redigeringsvinduer længst borte til højre i nuværende fanebladslinje.</para>
</step>
</procedure>

<para
>Desværre kan denne indstilling ikke ændres i farten under en udviklingssession. Du skal bestemme dig for hvilken opførsel du foretrækker i det lange løb, og derefter holde dig til det, i det mindste indtil næste gang &kdevelop; startes.</para>

<formalpara>
<title
>Hvordan fanebladene kan omarrangeres</title>
<para
>Eftersom udviklingsopgaver varierer med tiden, kan behovet for at omarrangere fanebladene for redigeringsvinduer opstå af og til. Dette kan enkelt opnås i &kdevelop;.</para>
</formalpara>
<para
>Klik blot på fanebladet du vil flytte med musens midterste knap og flyt musen en lille smule. Markøren ændres til et mønster med krydsende pile. Nu kan du trække fanebladet, mens du holder den midterste knap nede, indtiltil det hopper på plads der hvor du vil have det.</para>
</sect3>

<sect3 id="gettingstarted-edit-arrange-split">
<title
>Vis flere filer samtidigt</title>

<para
>Ved første syn er der aldrig mere end et enkelt redigeringsvindue åbent for at arbejde med en kildekodefil. Selvom du hurtigt kan skifte mellem faneblade, er der tider hvor du vil have flere filer åbne på en gang, f.eks. for referenceformål eller for at få bedre kontrol af komplekse opgaver. For at opnå dette, sørger &kdevelop; for en måde at dele arbejdsfladen i forskellige dele som ses samtidigt, og hvor og en kan indeholde en egen følge af faneblade.</para>

<para
>Der er to opdelingskommandoer som du enten kan nå via menuen <guimenu
>Vindue</guimenu
>, eller ved at højreklikke i et vindue som hører til et faneblad eller på selve fanebladet. Vi beskriver også opdelingsopførslen udgående fra vort eksempelprojekt Hello.</para>

<para
>Antag at der er to kildekodefiler åbne i fanebladslinjen: <filename
>hello.cpp</filename
> og <filename
>hello.h</filename
>. Mens du arbejder med kildekoden i <filename
>hello.cpp</filename
> behøver du ofte at kigge på deklarationerne i filen <filename
>hello.h</filename
>, så du vil have begge filer åbne samtidigt.</para>

<para
>For at få det gjort, højreklikkes for eksempel på fanebladet for <filename
>hello.h</filename
>. Følgende menu dukker så op:</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="split-workspace.png" format="PNG"/>
</imageobject>
<caption
><para
>Hvordan den nuværende arbejdsflade kan deles op i to dele.</para
></caption>
</mediaobject>
</screenshot>

<para
>Vælg <guimenuitem
>Opdel vandret</guimenuitem
>. Dette deler arbejdsfladen på midten og flytter redigeringsvinduet som indeholder filen <filename
>hello.h</filename
> til den nederste del.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="split-windows.png"/>
</imageobject>
<caption
><para
>Arbejdsfladen er opdelt vandret.</para
></caption>
</mediaobject>
</screenshot>

<para
>Bemærk den stregede skillelinje mellem de to vinduer. Du kan tage tag i den med musen og justere redigeringsvinduernes højde efter dine behov.</para>

<para
>Der er et antal ting at lægge mærke til.</para>
<itemizedlist>
<listitem>
<para
>De delte arbejdsflader fungerer helt og holdent på egen hånd. Det betyder at nye fanebladsvinduer åbnes i arbejdsfladen som indeholder redigeringsvinduet som for øjeblikket er aktivt. Du kan også opdele alle delområder igen som du ønsker, og på den måde have så mange vinduer åbne samtidigt som du behøver.</para>
</listitem>

<listitem>
<para
>Hver deling flytter redigeringsvinduet som for øjeblikket er aktivt til den nye delarbejdsflade, enten nedad eller til højre. Øvrige fanebladsvinduer forbliver alle hvor de var. Du kan ikke direkte flytte fanebladsvinduer mellem delte områder, men i stedet skal du eksplicit lukke vinduet på en arbejdsflade og åbne det igen på en anden, for at gruppere om.</para>
</listitem>

<listitem>
<para
>Der er heller ingen direkte måde at lukke et delt område igen. Det lukkes automatisk, når det sidste vindue med et faneblad i det lukkes.</para>
</listitem>
</itemizedlist>
</sect3>

<sect3 id="gettingstarted-edit-arrange-sourceheader">
<title
>Redigér C++ kildekode og deklarationsfiler samtidigt</title>

<para
>Der er en smart brug af den ovennævnte funktion med delte arbejdsflader indbygget i &kdevelop;. Den lader dig automatisk have en kildekodefil, <filename
>.cpp</filename
>, og dens tilhørende deklarationsfil, <filename
>.h</filename
>, åbne side om side på arbejdsfladen. Desuden tillader den valgfrit at arbejde synkront med filerne, sådan at ved markering af en deklaration i deklarationsfilen går &kdevelop; til tilsvarende definition i kildekodefilen og omvendt.</para>

<para
>Denne funktion er imidlertid ikke aktiveret som standard. Hvis du vil bruge den i projektet skal du aktivere den.</para>

<para
>Vælg <menuchoice
><guibutton
>Projekt</guibutton
> <guimenuitem
>Projektindstillinger</guimenuitem
></menuchoice
>. Dialogen <guilabel
>Projektindstillinger</guilabel
> dukker op. Vælg <guiicon
>C++ støtte</guiicon
> i ikonlinjen til venstre, og derefter fanebladet <guilabel
>Navigering</guilabel
> på dialogsiden som vises til højre.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="split-source-header.png" format="PNG"/>
</imageobject>
<caption
><para
>Lad C++ kildekode og deklarationsfiler vises side om side.</para
></caption>
</mediaobject>
</screenshot>

<para
>Markér nu feltet <guilabel
>Aktivér deling af deklarationsfiler og kildekodefiler</guilabel
>. Dette aktiverer normalt <guilabel
>Automatisk synkronisering</guilabel
> og <guilabel
>Lodret</guilabel
>. Behold indstillingerne indtil videre og klik på <guibutton
>O.k</guibutton
>.</para>

<para
>Luk nu begge redigeringsvinduer <filename
>hello.cpp</filename
> og <filename
>hello.h</filename
> i vort eksempelprojekt Hello, hvis det behøves. Vælg derefter <filename
>hello.cpp</filename
> igen i projektets undermappe <filename class="directory"
>src</filename
>. Redigeringsvinduet åbnes som sædvanligt, men hvis du nu åbner tilhørende <filename
>hello.h</filename
>, deler &kdevelop; automatisk arbejdsfladen og åbner deklarationsfilens redigeringsvindue lige under vinduet <filename
>hello.cpp</filename
>.</para>

<para
>Der er endnu mere, som vi allerede har nævnt. Find for eksempel på definitionslinjen følgende konstruktor i vinduet <filename
>hello.cpp</filename
></para>
<programlisting
>Hello::Hello()
</programlisting>
<para
>og placér markøren der. Kig derefter i vinduet <filename
>hello.h</filename
> nedenfor og observér hvordan &kdevelop; gik til tilsvarende deklarationslinje for konstruktoren.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="split-source-header-navigate.png" format="PNG"/>
</imageobject>
<caption
><para
>&kdevelop; går automatisk til konstruktorens deklaration.</para
></caption>
</mediaobject>
</screenshot>

<para
>Det fungerer også omvendt. Så snart du placerer markøren et sted i en konstruktor i et redigeringsvindue, går &kdevelop; til tilsvarende konstruktor i det andet.</para>
</sect3>

<sect3 id="gettingstarted-edit-arrange-group">
<title
>Gruppér kildekodefiler i udviklingssessioner</title>

<para
>Når projektet vokser sig større, og udviklingsopgaverne bliver mere og mere komplekse, tvinger det dig til ofte at skifte mellem forskellige, til og med distinkte, sæt filer. Nu er det tid til at organisere udviklingsarbejdet i adskilte sessioner. Værktøjsvisningen <guilabel
>Filliste</guilabel
> i &kdevelop; tillader dig at gøre præcis dette.</para>

<para
>Længst oppe i vinduet for værktøjsvisningen <guilabel
>Filliste</guilabel
> findes en værktøjslinje hvor du kan oprette, gemme, vælge og fjerne sådanne sessioner. Brug alternativt undermenuen <menuchoice
><guimenu
>Vis</guimenu
> <guimenuitem
>Sessioner</guimenuitem
></menuchoice
>.</para>

<para
>Vi beskriver også denne funktionen gående ud fra vort eksempelprojekt Hello. Antag at du altid vil åbne filerne <filename
>hello.cpp</filename
>, <filename
>hello.h</filename
> og <filename
>main.cpp</filename
> i et kridt, uafhængig af hvilken udviklingsopgave du neetop  udførte i projektet. Du skal først oprette en ny udviklingssession, som eksempelvis kaldes <quote
>kildekode</quote
>, for at opnå dette.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="file-list-session-create.png" format="PNG"/>
</imageobject>
<caption
><para
>Brug  udviklingssessioner for at huske  filgrupper.</para
></caption>
</mediaobject>
</screenshot>

<para
>Dette er en procedure i flere skridt, som følger:</para>
<procedure>
<step>
<para
>Opret en ny session</para>
<substeps>
<step>
<para
>Klik på ikonen <guiicon
>Ny session</guiicon
> længst oppe til venstre i værktøjsvisningen <guilabel
>Filliste</guilabel
>.</para>
</step>
<step>
<para
>En dialog dukker op. Giv den nye session et navn i indtastningsfeltet <guilabel
>Indtast sessionens navn</guilabel
>, f.eks. <quote
>kildekode</quote
>.</para>
</step>
<step>
<para
>Luk dialogen med <guibutton
>O.k</guibutton
>. Den nye session angives nu i dropned-feltet i værktøjslinjen.</para>
</step>
</substeps>
</step>
<step>
<para
>Den nye session er tom fra begyndelsen. Du skal tilføje filerne du vil skal indgå i den.</para>
<substeps>
<step>
<para
>Åbn alle filer du vil skal grupperes i udviklingssessionen. I vort eksempel bestemte vi os for at beholde <filename
>hello.cpp</filename
>, <filename
>hello.h</filename
> og <filename
>main.cpp</filename
> som planlagt.</para>
</step>
<step>
<para
>Når fillisten er fuldstændig, klikkess på ikonen <guiicon
>Gem session</guiicon
> i værktøjslinjen. Spring ikke over dette stkridt Ellers glemmer &kdevelop; fillisten.</para>
</step>
</substeps>
</step>
</procedure>

<para
>Det er alt. Så snart du vælger sessionen <guilabel
>kildekode</guilabel
> i dropned-felteet <guilabel
>Åbn session</guilabel
>, lukker &kdevelop; alle redigeringsvinduer som for øjeblikket er åbne, og åbner de huskede i stedet for  (<filename
>hello.cpp</filename
>, <filename
>hello.h</filename
> og <filename
>main.cpp</filename
> i vort eksempel).</para>

<para
>Du kan definere så mange sessioner som du vil i sammenhæng med projektet. Hvis du vil ændre sessionernes indhold, opdateres kun den huskede filliste med et klik på <guiicon
>Gem session</guiicon
>. Og hvis du vil slippe f med en session, vælges den i dropned-feltet, og derefter klikkes på ikonen <guiicon
>Fjern session</guiicon
> til højre i værktøjslinjen.</para>

<para
>Du kan gøre endnu mere. Du kan tvinge &kdevelop; til at åbne en given standardsession når projektet indlæses. Vælg blot sessionen i dropned-feltet på indstillingssiden <menuchoice
><guimenu
>Projekt</guimenu
> <guimenuitem
>Projektindstillinger</guimenuitem
><guimenuitem
>Filliste</guimenuitem
></menuchoice
> i projektindstillingerne.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="file-list-session-default.png" format="PNG"/>
</imageobject>
<caption
><para
>Lad &kdevelop; åbne en specifik session når projektet indlæses.</para
></caption>
</mediaobject>
</screenshot>
</sect3>
</sect2>

<sect2 id="gettingstarted-edit-problems">
<title
>Hold øjnene på almindelige problemer</title>

<para
>Når et redigeringsvindue som indeholder en kildekodefil åbnes, tolker &kdevelop; dets indhold. Dette gør det muligt for den indbyggede <emphasis
>problemrapportør</emphasis
> at søge i kildekodeteksten efter sædvanlige fejl som den kender til. Den kan også informere brugeren om forskellige steder som er markeret for specialbehandling.</para>

<para
>Lad os anskueliggøre denne funktion med vort eksempelprojekt Hello.</para>

<itemizedlist>
<listitem>
<para
>Åbn et editorvindue med kildekodefilen <filename
>main.cpp</filename
>.</para>
</listitem>

<listitem>
<para
>Sørg for at det stadigvæk indeholder følgende linje et  sted nær slutningen:</para>
<programlisting
>/// @todo do something with the command line args here
</programlisting>
<para
>Dette blev indsat af programguiden da projektet Hello blev oprettet i kapitlet <link linkend="gettingstarted-new"
>Start et nyt projekt</link
> ovenfor.</para>
</listitem>

<listitem>
<para
>Åbn nu værktøjsvisningen <guilabel
>Problemer</guilabel
> i linjen med faneblade længst nede. Hvis alt har fungeret, rapporterer den for øjeblikket følgende gøremål:</para>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="problem-report-todo.png"/>
</imageobject>
<caption
><para
>&kdevelop; informerer om at en kildekodelinje indeholder markeringen todo.</para
></caption>
</mediaobject>
</screenshot>
</listitem>
</itemizedlist>

<para
>Formatet for kommandoen <computeroutput
>/// @todo</computeroutput
> er til for særlig behandling af værktøjet for kodedokumentation, <application
>Doxygen</application
>, som vi tager et hurtigt kig på i afsnittet <link linkend="gettingstarted-doc"
>Dokumentation</link
> nedenfor. Det kræves ikke at du bruger dette format, de sædvanlige kommentarer <computeroutput
>TODO</computeroutput
> og <computeroutput
>FIXME</computeroutput
> genkendes også.</para>

<para
>Hvis du for eksempel indsætter følgende kommentarlinjer med <computeroutput
>TODO</computeroutput
> og <computeroutput
>FIXME</computeroutput
> i vor eksempelfil <filename
>hello.cpp</filename
>:</para>
<programlisting
>Hello::Hello()
    : KMainWindow( 0, "Hello" )
{
    // set the shell's ui resource file
    // TODO check the user interface
    setXMLFile("helloui.rc");

    // FIXME change to a better suited greeting
    new QLabel( "Hello World", this, "hello label" );
}
</programlisting>
<para
>ser du dem også angivne i værktøjsvisningen <guilabel
>Problemer</guilabel
>:</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="problem-report-marks.png" format="PNG"/>
</imageobject>
<caption
><para
>Problemrapporten som angiver linjer som kræver opmærksomhed i nuværende fil som redigeres.</para
></caption>
</mediaobject>
</screenshot>

<para
>Bemærk de øvrige faneblade i værktøjsvisningen <guilabel
>Problemer</guilabel
>, i særdeleshed <guilabel
>Ordn</guilabel
> og <guilabel
>Gøremål</guilabel
>. Hvis du åbner den ser du alle linjer markerede med <computeroutput
>FIXME</computeroutput
> og <computeroutput
>TODO</computeroutput
> som &kdevelop; hidtil har fundet i sessionen. Informationen om <computeroutput
>TODO</computeroutput
> set for øjeblikket ud på følgende måde:</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="problem-report-all-todos.png" format="PNG"/>
</imageobject>
<caption
><para
>Problemrapporten har samlet information om <computeroutput
>TODO</computeroutput
>.</para
></caption>
</mediaobject>
</screenshot>

<para
>Fanebladet <guilabel
>Fejl</guilabel
> lister imidlertid ikke hver kodningsfejl som du laver. Dette arbejde udføres af andre værktøjer under byggeprocessen. Her finder du information om nogle sædvanlige programmeringsfejl, som formodentlig ellers ville forblive ubemærkede og formodentlig med besvær blive fundet via komplicerede fejlsøgningssessioner.</para>

<para
>Du vil bemærke at problemrapportfunktionen i &kdevelop; er et meget værdifuldt værktøj, så kontrollér værktøjsvisningen <guilabel
>Problemer</guilabel
> regelmæssigt under udviklingsprocessen.</para>
</sect2>
</sect1>

<sect1 id="gettingstarted-compile">
<title
>Hvordan man kompilerer et projekt</title>

<para
>At kompilere et projekt i &kdevelop; kræver flere indstillingsskridt og derefter at programmet bygges. Alt dette er tilgængeligt via menuen <guimenu
>Byg</guimenu
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="build-menu.png" format="PNG"/>
</imageobject>
<caption
><para
>At bygge et projekt kræver flere skridt.</para
></caption>
</mediaobject>
</screenshot>

<para
>For øjeblikket er vi kun interesserede i menuens øvre del. Indgangene der er sorterede efter hvor vigtige de er. Derfor er kommandoen som oftest behøves længst op, indgangen <guimenuitem
>Byg projekt</guimenuitem
> som gør at hele projektet initieres, kompileres og lænkes efter behov. Andre indgange findes for at kompilere valgte dele af projektet, eller kun en enkelt fil, for at udføre flere forskellige initieringssekvenser, eller for at installere det færdige programs binære filer.</para>

<para
>Indtil videre koncentrerer vi os om flere funktioner som &kdevelop; sørger for for at indstille projektet, initiere, bygge og køre programmet. I almindelighed omfatter dette:</para>

<simplelist>
<member
><link linkend="gettingstarted-compile-basic"
>Tag et hurtigt kig på den grundlæggende byggecykel.</link
></member>
<member
><link linkend="gettingstarted-compile-setup"
>Kig på nogle enkelte måder at indstille et projekt.</link
></member>
</simplelist>

<sect2 id="gettingstarted-compile-basic">
<title
>Den grundlæggende byggecykel</title>

<para
>Når man har oprettet et nyt projekt, vil man oftest kontrollere om alt hidtil er gået godt. Dette omfatter at bygge projektet første gang og testkøre programmet, hvilket vi skal gøre nu. For at kompilere et projekt første gang er der flere skridt at udføre, som vi tager et hurtigt kig på:</para>
<simplelist>
<member
><link linkend="gettingstarted-compile-basic-init"
>Hvordan projektet initieres for at bygge det første gang.</link
></member>
<member
><link linkend="gettingstarted-compile-basic-config"
>Hvordan de oprindelige indstillinger gøres.</link
></member>
<member
><link linkend="gettingstarted-compile-basic-build"
>Hvordan man bygger projektet.</link
></member>
<member
><link linkend="gettingstarted-compile-basic-run"
>Hvordan programmet køres indefra &kdevelop;.</link
></member>
</simplelist>

<note>
<para
>Denne beskrivelse forudsætter at projektet er baseret på &GNU; autotools, hvilket aktiverer Håndtering af automake i &kdevelop;, ligesom vort eksempelprojekt Hello. Hvis du laver en anden projekttype, f.eks. for &Qt;-baseret projekthåndtering med <application
>QMake</application
>, findes andre funktioner tilgængelige i menuerne, eller måske ikke nogen af dem. Du skal bruge de respektive leverandørers dokumentation om projekthåndtering og hvordan man bygger projekter i disse tilfælde.</para>
</note>

<sect3 id="gettingstarted-compile-basic-init">
<title
>Initiér projektet så det kan bygges</title>

<para
>Da programguiden oprettede vort eksempelprojekt Hello, efterlod den det i en slags <quote
>uberørt</quote
> udgangstilstand. Værktøjskæden i &GNU; autotools kræver at flere initieringsskridt udføres inden programmet virkelig kan kompileres og linkes. Hvis du forsøger at bygge et projekt når det er i denne udgangstilstand, f.eks. ved at vælge <menuchoice
><guimenu
>Byg</guimenu
> <guimenuitem
>Byg projekt</guimenuitem
></menuchoice
> eller trykke på funktionstasten <keycap
>F8</keycap
>, får du følgende advarsel:</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="raw-project-warning.png" format="PNG"/>
</imageobject>
<caption
><para
>Forsøger at bygge et ubehandlet projekt baseret på automake.</para
></caption>
</mediaobject>
</screenshot>

<para
>Du kan klikke på knappen <guibutton
>Kør dem</guibutton
>, hvilket gør at &kdevelop; automatisk forsøger at køre alle indstillingsskridt som kræves inden programmet kompileres og linkes. Men vi skal kigge på de indledende skridt i rækkefølge, så afbryd dialogen ved at klikke på <guibutton
>Kør ikke</guibutton
>. </para>

<para
>Som allerede nævnt udføres kompilering og linkning af programmet via menuen <guimenu
>Byg</guimenu
>. Vis den og vælg <guimenuitem
>Kør automake og beslægtede programmer</guimenuitem
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="build-menu-automake.png" format="PNG"/>
</imageobject>
<caption
><para
>Start en grundlæggende initieringskørsel.</para
></caption>
</mediaobject>
</screenshot>

<para
>&kdevelop; åbner nu værktøjsvisningen <guilabel
>Meddelelser</guilabel
> længst nede og viser en følge af meddelelser som skabes af flere forskellige byggeværktøjer. Hvis alting gik godt, skal den sidste linjen lyde: <quote
><computeroutput
>*** Lykkedes ***</computeroutput
></quote
>.</para>

<para
>Hvis du ruller tilbage længst oppe, finder du kommandolinjen som &kdevelop; udførte for at kalde værktøjerne i baggrunden:</para>

<programlisting
>cd '/home/devel/projects/hello' &amp;&amp; \
WANT_AUTOCONF_2_5="1" WANT_AUTOMAKE_1_6="1" gmake -f Makefile.cvs
</programlisting>

<para
>Dette siger at &kdevelop; først skiftede til vort eksempelprojekts rodmappe. Derefter oprettedes et særligt miljø, som fortæller for byggesystemet hvilke versioner af <application
>autoconf</application
> og <application
>automake</application
> som bruges til initieringen. Tilsidst instrueredes byggeværktøjet (&GNU; <application
>gmake</application
> i dette tilfælde) til at behandle byggefilen <filename
>Makefile.cvs</filename
>.</para>

<para
>Byggefilen oprettedes automatisk da projektet Hello blev oprettet.Den indeholder alle kommandoer som behøves for at initiere projektet rigtigt, så programmet som skabes kan køres i &kde;. I særdeleshed laver den scriptfilen <filename
>configure</filename
> som er nødvendig for at udføre næste indstillingsskridt.</para>
</sect3>

<sect3 id="gettingstarted-compile-basic-config">
<title
>Indledende konfiguration af Hello</title>

<para
>At konfigurere betyder at indstille byggeprocessen til egenheder hos hardware og programmel i systemet. Dette er et grundkrav i byggeprocesser baserede på &GNU; autotools, som du formodentlig allerede ved.</para>

<para
>Du kan først beordre en konfigureringssekvens når den grundlæggende initiering af automake er afsluttet med godt resultat, eftersom de nødvendige <filename
>configure</filename
>-filer ikke er tilgængelige før end fter den indledende kørsel. Når den er gjort, vælges menupunktet <menuchoice
><guimenu
>Byg</guimenu
> <guimenuitem
>Kør configure</guimenuitem
></menuchoice
> for at påbegynde konfigureringssekvensen.</para>

<para
>&kdevelop; åbnede værktøjsvisningen <guilabel
>Meddelelser</guilabel
> igen hvis det behøvedes, og listede meddelelser fra kørslen af configure i den. Hvis alt gik godt, er de sidste meddelelser <quote
><computeroutput
>Good - your configure finished. Start make now</computeroutput
></quote
> (som udskrevet  af configure) fulgt af meddelelsen <quote
><computeroutput
>*** Lykkedes ***</computeroutput
></quote
> fra &kdevelop;.</para>

<para id="gettingstarted-compile-basic-config-cmd"
>Længst oppe i vinduet <guilabel
>Meddelelser</guilabel
> finder du igen kommandolinjen som &kdevelop; brugte til at starte konfigurationen:</para>

<programlisting
>mkdir '/home/devel/projects/hello/debug' &amp;&amp; \
cd '/home/devel/projects/hello/debug' &amp;&amp; \
CXXFLAGS="-O0 -g3" "/home/devel/projects/hello/configure" --enable-debug=full
</programlisting>

<para
>Du kan se flere interessante detaljer i kommandoerne.</para>

<informaltable frame="none">
<tgroup cols="2"
><tbody
><row>
<entry>
<mediaobject>
<imageobject>
<imagedata fileref="tutorial-debug-tree.png"/>
</imageobject>
</mediaobject>
</entry>
<entry>
<itemizedlist>
<listitem>
<para
>For det første bruger &kdevelop; en særlig undermappe i projektets mappetræ for byggeprocessen. Byggemappen <filename class="directory"
>debug</filename
> (som vises til venstre) spejler den grundlæggende projektstruktur og indeholder en mængde byggerelaterede filer, såsom flere <filename
>configure</filename
>-baserede filer og desuden en <filename
>Makefile</filename
> i hver undermappe.</para>
</listitem>
<listitem>
<para
>I det nærmest følgende afsnit <link linkend="gettingstarted-compile-setup"
>Indstil projektet</link
> giver vi en kortfattet beskrivelse af motiverne til at &kdevelop; bruger separate byggemapper i tilfælde som disse. For øjeblikket er det nok at vide at &kdevelop; oprettede mappen <filename class="directory"
>debug</filename
> (hvis det behøvedes) inden kaldet til configure, og at scriptet <filename
>configure</filename
> oprettede delstrukturen og alle <filename
>Makefile</filename
> i den.</para>
</listitem>
<listitem>
<para
>Derefter, kaldte &kdevelop; scriptet <filename
>configure</filename
> indefra byggemappen <filename class="directory"
>debug</filename
> i vort projekts rodmappe med et særligt miljø, hvor argumenterne <computeroutput
>CXXFLAGS="-O0 -g3"</computeroutput
> senere fortæller for &gcc;-oversætteren at den ikke skal optimere de binære filer som skabes, og at den skal inkludere fuldstændig fejlsøgningsinformation i dem.</para>
</listitem>
<listitem>
<para
>Tilsidst kaldtes scriptet <filename
>configure</filename
> med tilvalget <computeroutput
>--enable-debug=full</computeroutput
> som beder det om at oprette hver <filename
>Makefile</filename
> så efterfølgende kompilering og linkning får al nødvendig fejlsøgningsinformation indbygget og brugbart.</para>
</listitem>
</itemizedlist>
</entry>
</row
></tbody
></tgroup>
</informaltable>

<para
>Alle disse indstillinger kan indstilles for hvert projekt. Du vil lære dig mere om dette i kapitlet <link linkend="project-management"
>Projekthåndtering</link
>.</para>
</sect3>

<sect3 id="gettingstarted-compile-basic-build">
<title
>Byg projektet</title>

<para
>Når du er kommet så langt er du klar til virkelig at bygge, dvs. kompilere og linke programmet. Ved at kigge i menuen <guimenu
>Byg</guimenu
>, ser du at der er tre sådanne kompileringstilvalg at vælge blandt.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="build-commands.png" format="PNG"/>
</imageobject>
<caption
><para
>Kommandoen i &kdevelop; til at bygge binære filer.</para
></caption>
</mediaobject>
</screenshot>

<para
>Nedefra og opad, er der:</para>
<itemizedlist>
<listitem>
<para
><guimenuitem
>Kompilér fil</guimenuitem
>: Det kompilerer kildekodefilen i redigeringsvinduet som for øjeblikket er åbent. Bruges oftest til hurtig kontrol af fejl.</para>
</listitem>
<listitem>
<para
><guimenuitem
>Byg aktivt mål</guimenuitem
>: Dette bruges i hovedsagen i sammenhæng med <link linkend="gettingstarted-extend-automake"
>Håndtering af automake</link
>, som vi tager et hurtigt kig på nedenfor.</para>
</listitem>
<listitem>
<para
><guimenuitem
>Byg projekt</guimenuitem
>: Det er hvad vi nu er interesserede i. Det går gennem hele projektet, kompilerer og linker filer hvor det er nødvendigt.</para>
</listitem>
</itemizedlist>

<para
>Det kan være interessant at se hvad der sker med mappen <filename class="directory"
>debug</filename
> som blev oprettet under foregående kørsel af <filename
>configure</filename
>. Derfor er det bedst at beholde den åben med alle undermapper synlige, som vises ovenfor. Vælg derefter <menuchoice
><guimenu
>Byg</guimenu
> <guimenuitem
>Byg projekt</guimenuitem
></menuchoice
> (eller tryk på tasten <keycap
>F8</keycap
>) for at påbegynde byggesekvensen. Som tidligere åbnes værktøjsvisningen <guilabel
>Meddelelser</guilabel
> længst nede og lister resultatet af byggekørslen. Desuden dukker nogle filer op i undermappetræet <filename class="directory"
>debug</filename
>.</para>

<para id="gettingstarted-compile-basic-build-cmd"
>Der er ikke mange kildekodefiler i vort eksempelprojekt Hello, altså kommer vinduet <guilabel
>Meddelelser</guilabel
> kun til at indeholde nogle få linjer. For oven findes igen kommandolinjen som &kdevelop; sendte til skallen i baggrunden.</para>

<programlisting
>cd '/home/devel/projects/hello/debug' &amp;&amp; \
WANT_AUTOCONF_2_5="1" WANT_AUTOMAKE_1_6="1" gmake -k 
</programlisting>

<para
>&kdevelop; skiftede til <filename class="directory"
>debug</filename
>-deltræets rod, hvilket ikke burde være overraskende, for at køre filen <filename
>Makefile</filename
> som findes der. Et særligt delmiljø oprettedes igen, som tidligere i <link linkend="gettingstarted-compile-basic-init"
>initieringsskridtet</link
>, i hvilken værktøjet <application
>gmake</application
> blev kaldet.</para>

<para
>Bemærk flaget <computeroutput
>-k</computeroutput
> i kaldet af <application
>gmake</application
>. Det tvinger byggeprocessen til at fortsætte til sin slutning, også selvom fejl skulle opstå. Det giver mening eftersom &kdevelop; vil liste alle fejlmeddelelser i vinduet <guilabel
>Meddelelser</guilabel
>. Hvis der er nogen, drage nytte af fordelene med det integrerede udviklingsmiljø: klik blot på fejlmeddelelsen i vinduet <guilabel
>Meddelelser</guilabel
> så går &kdevelop; til det nøjagtige sted hvor fejlen ospstod i kildekodefilen.</para>

<para
>Og hvad skete inde i deltræet <filename class="directory"
>debug</filename
>? Ikke så meget. Nogle få filer dukkede op i grenene <filename class="directory"
>doc/en</filename
> og <filename class="directory"
>src</filename
>, i særdeleshed filen <filename
>hello</filename
> i <filename class="directory"
>/home/devel/projects/hello/debug/src/</filename
>. Den er, til sidst, programmets binære fil som vi søgte. Alt som er tilbage at gøre i vor indledende kontrol af projektet er at køre <filename
>hello</filename
>.</para>
</sect3>

<sect3 id="gettingstarted-compile-basic-run">
<title
>Kør programmet</title>

<para
>Der er ikke nogen ekstra skridt indblandede for at køre det nye program hello. Vælg enten <menuchoice
><guimenu
>Byg</guimenu
> <guimenuitem
>Kør program</guimenuitem
></menuchoice
>, tryk på <keycombo
><keycap
>Shift</keycap
> <keycap
>F9</keycap
></keycombo
> eller brug knappen <guibutton
>Kør program</guibutton
> i <guilabel
>byggeværktøjslinjen</guilabel
> som vises nedenfor.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="run-button.png"/>
</imageobject>
<caption
><para
>Kør et program fra <guilabel
>Byggeværktøjslinjen</guilabel
>.</para>
</caption>
</mediaobject>
</screenshot>

<para
>Det er alt. &kdevelop; starter nu det nye program i et særskilt terminalvindue som værktøjsvisningen <guilabel
>Program</guilabel
> længst nede. Der vises kommandoen som &kdevelop; udførte for at køre programmet på linjen længst oppe:</para>

<programlisting
>./hello
</programlisting>

<para
>som viser at det integrerede udviklingsmiljø  har en mening om hvor programmet som skal køres findes. Denne mening kan indstilles på mange måder. Se mere om dette i kapitlet <link linkend="project-management"
>Projekthåndtering</link
>.</para>

<para
>Linjen <computeroutput
>./hello</computeroutput
> følges formodentlig af en advarselsmeddelelse. Ignorér den indtil videre. Den forhindrer ikke at vort program <application
>hello</application
> kører.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="hello-world-app.png" format="PNG"/>
</imageobject>
<caption>
<para
>Vort oprindelige <application
>Hello</application
>-program.</para>
</caption>
</mediaobject>
</screenshot>

<para
>Luk programvinduet <application
>Hello</application
> som sædvanligt. Hvis ingen fejl opstod rapporterer &kdevelop; det som <quote
><computeroutput
>*** Afsluttede normalt ***</computeroutput
></quote
> i værktøjsvisningen <guilabel
>Program</guilabel
>.</para>
</sect3>
</sect2>

<sect2 id="gettingstarted-compile-setup">
<title
>Indstil projektet</title>

<para
>Der er adskillige måder at håndtere et projekt i &kdevelop;. Denne opførsel  kan indstilles for hvert projekt, og er mest interessant for avancerede udviklere. Der er imidlertid nogle få projektspecifikke indstillinger som du bør kende il helt fra begyndelsen. </para>

<simplelist>
<member
><link linkend="gettingstarted-compile-setup-build"
>Hvorfor er byggeindstillinger nyttige?</link
></member>

<member
><link linkend="gettingstarted-compile-setup-config"
>Hvor skal opførslen af scriptet <filename
>configure</filename
> defineres.</link
></member>

<member
><link linkend="gettingstarted-compile-setup-make"
>Nogle overvejelser om hvordan <application
>make</application
> skal køres.</link
></member>

<member
><link linkend="gettingstarted-compile-setup-run"
>Hvor skal det kørbare programmet findes, og hvad skal det hedde?</link
></member>
</simplelist>

<sect3 id="gettingstarted-compile-setup-build">
<title
>Byggeindstillinger</title>

<para
>Da vi kørte scriptet <filename
>configure</filename
> i afsnittet <link linkend="gettingstarted-compile-basic-config"
>Indledende konfiguration af Hello</link
> ovenfor, noterede vi at &kdevelop; havde oprettet den særlige undermappe <filename class="directory"
>debug</filename
> for dette formål. I dette afsnit behandler vi kortfattet nogle konsekvenser af denne funktion.</para>

<para
>For det første bruger &kdevelop; ikke nødvendigtvis særlige byggemapper adskilte fra kildekoden. Forberedelser for automatisk at bruge særlige byggeindstillinger gøres via de skabeloner som programguiden bruger når et nyt projekt skabes.</para>

<para
>For at få styr på hvilke byggeindstillinger som for øjeblikket er tilgængelige, tag et kig å menuen <menuchoice
><guimenu
>Projekt</guimenu
> <guisubmenu
>Byggeindstilling</guisubmenu
></menuchoice
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="build-configurations.png" format="PNG"/>
</imageobject>
<caption
><para
>Der er forskellige byggeindstillinger tilgængelige i projektet.</para
></caption>
</mediaobject>
</screenshot>

<para
>I dette tilfælde, som i vort eksempelprojekt Hello, er der tre forskellige tilgængelige byggeindstillinger. I andre tilfælde findes måske kun findes en sådan byggeindstilling fra begyndelsen, nemlig <guimenuitem
>default</guimenuitem
>.</para>

<para
>Byggeindstillingen som for øjeblikket bruges har et tjekmærke til venstre. Vælg helt enkelt dets menupunktet for at skifte til en anden byggeindstilling.</para>

<para
>Lad os nu tage et hurtigt kig på hvad byggeindstillingerne sørger for.</para>

<variablelist id="gettingstarted-compile-setup-build-configs">
<varlistentry>
<term
><guimenuitem
>debug</guimenuitem
></term>
<listitem>
<para
>Du bør bruge byggeindstillingen som standard under udviklingsprocessen. Den bygges separat fra kildekodemapperne i den særlige undermappe <filename class="directory"
>debug</filename
>, dvs. alle objektfiler, ekstrafiler og kørbare filer placeres i dens undermapper i stedet for tilsvarende mapper i projektets rod. Scriptet <filename
>configure</filename
> får flaget <computeroutput
>--enable-debug=full</computeroutput
> og argumentet <computeroutput
>CXXFLAGS="-O0 -g3"</computeroutput
> fortæller for &gcc;-oversætteren koden ikke skal optimeres og at der skal indsættes omfattende fejlsøgningsinformation i de binære filer som skabes.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenuitem
>optimeret</guimenuitem
></term>
<listitem>
<para
>Denne bruges til at bygge det endelige C++ programmet. Den bygges separat fra kildekodemapperne i den særlige undermappe <filename class="directory"
>optimized</filename
>. Scriptet <filename class="directory"
>configure</filename
> har ingen særlige forudindstillede flag, men <computeroutput
>CXXFLAGS="-O2 -g0"</computeroutput
> beder &gcc;-oversættern om at optimere koden og ikke indsætte fejlsøgningsinformation i de binære filer som skabes.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenuitem
>default</guimenuitem
></term>
<listitem>
<para
>Betegnelsen <quote
>default</quote
> angiver standardindstillingen når et program bygges i en terminal med f.eks. &GNU; byggeværktøjet <application
>configure</application
> og <application
>make</application
>/<application
>gmake</application
> på kommandolinjen. I modsætning til <guimenuitem
>debug</guimenuitem
> eller <guimenuitem
>optimized</guimenuitem
> bruges ingen særlig byggemappe. Programmet bygges i stedet normalt i kildekodemapperne. Ingen særlige konfigurationsflag er fordefinerede. Når programmet bygges og køres bruges de underliggende værktøjers standardindstillinger (f.eks. &gcc;, osv.).</para>

<warning>
<para
>Tænk efter ordentligt inden du bestemmer dig for at bruge byggeindstillingen <guimenuitem
>default</guimenuitem
>.</para>

<para
>Den kan ikke bruges parallelt med de særlige indstillinger<guimenuitem
>debug</guimenuitem
> og <guimenuitem
>optimized</guimenuitem
>. <emphasis
>Alle byggehandlinger som bruger <guimenuitem
>default</guimenuitem
> gør at begge de andre byggeindstillinger bliver unyttige.</emphasis
> Dette skyldes nogle egenheder hos processen som laver <filename
>Makefile</filename
> med mekanismerne i <application
>automake</application
> og <application
>autoconf</application
>, som det ikke er enkelt at få bugt med.</para>
</warning>
</listitem>
</varlistentry>
</variablelist>

<para
>Hvorfor vil man så bruge forskellige byggeindstillinger øverhovedet, når de til og med ikke synes at fungere sammen? Svaret er at det forenkler cykler med redigering, kompilering og fejlsøgning. De ekstra fejlsøgningsinstruktioner som indsættes i de binære filer samt alle de subtile strukturændringer som gøres af programkoden under optimering påvirker opførslen når det køres for programmet som skabes. Når den logiske strukturen for en bestemt rutine synes at være rigtig, bør du teste om den stadigvæk opfører sig rigtigt under mere realistiske forhold.</para>

<para
>Det er der byggeindstillingerne i &kdevelop; gør nytte. Eftersom byggeobjekter og kørbare filer i hvert særlig byggemappe, og byggekommando, holdes adskilte fra hinanden behøver kun ændringer af kildekode håndteres når du skifter mellem byggeindstillingerne.</para>

<para
>I stedet for at rydde op og kompilere alt om fra begyndelsen med andre indstillinger, behøver du altså kun skifte fra byggeindstillingen <guimenuitem
>debug</guimenuitem
> til <guimenuitem
>optimize</guimenuitem
>, kompilere ændringerne af kildekoden og derefter genstarte programmet under disse forhold. Hvis noget upassende viser sig, skift så helt enkelt tilbage til <guimenuitem
>debug</guimenuitem
>, og fortsæt med det samme arbejde der.</para>

<para
>En sidste bemærkning: Mange byggeindstillinger kan indstilles. Du kan til og med definere dine egne byggeindstillinger hvsi udviklingsprocessen kræver det. Vi tager et hurtigt kig på disse muligheder i næste afsnit.</para>
</sect3>

<sect3 id="gettingstarted-compile-setup-config">
<title
>Konfigurationstilvalg for projektet</title>

<para
>At konfigurere programmet rigtigt er livsvigtigt i byggekæden baseret på &GNU; autotools. Dette styres ofte af flagene for scriptet <filename
>configure</filename
> og/eller særlige argumentindstillinger i miljøet inden <filename
>configure</filename
> køres, som f.eks. <computeroutput
>CXXFLAGS</computeroutput
> i vor tidligere beskrivelse.</para>

<para
>Du kan indstille de fleste konfigurationsvalgmulighederne for et givet projekt fra &kdevelop;s grafiske grænseflade. Vælg <menuchoice
><guimenu
>Projekt</guimenu
> <guimenuitem
>Projektindstillinger</guimenuitem
></menuchoice
> og derefter ikonen <guiicon
>Indstilling af configure</guiicon
> på ikonlinjen til venstre i dialogen. Siden <guilabel
>Indstilling af configure</guilabel
> som indeholder flere fanebladsvinduer vises til højre.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-project-configure.png" format="PNG"/>
</imageobject>
<caption
><para
>De fleste indstillinger af configure kan angives her.</para
></caption>
</mediaobject>
</screenshot>

<para
>Som du bemærker, er der et ganske stort antal tilvalg som kan angives i denne dialog. Indtil videre kigger vi kortfattet på et fåtal af dem med hensyn til vort eksempelprojekt Hello. For detaljerede instruktioner, se kapitlet <link linkend="projects-configure"
>Konfigurere projekt</link
>. Hvis du vil vide mere om betydningen af forskellige argumenter som kan angives, slå <command
>info make</command
> op i en terminal (eller <command
>info:make</command
> inde i &konqueror;) og kigge i afsnittet <menuchoice
><guimenu
>Implicit Rules</guimenu
> <guimenuitem
>Implicit Variables</guimenuitem
></menuchoice
>.</para>

<para
>Der er flere indstillingsvinduee med faneblade i dialogen, hvor det første, <guilabel
>Generelt</guilabel
>, viser ofte brugte indstillinger, mens de øvrige er ganske oversætterspecifikke. Under alle omstændighedder, styres imidlertid det egentlige indhold i dialogerne for den givne byggeindstilling.</para>

<para
>Du vælger byggeindstillingen hvis indstillingstilvalg skal defineres i dropned-feltet <guilabel
>Indstilling</guilabel
> længst oppe i dialogen <guilabel
>Indstilling af configure</guilabel
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-project-buildconfig.png" format="PNG"/>
</imageobject>
<caption
><para
>Vælg byggeindstilling hvis indstillinger skal defineres.</para
></caption>
</mediaobject>
</screenshot>

<para
>Vælg nu en anden byggeindstilling i dette dropned-felt og observér hvordan indholdet i f.eks. tekstfelterne <guilabel
>Configure-argument</guilabel
> og <guilabel
>Byggemappe</guilabel
> ændres ifølge indstillingerne vi nævnte for <link linkend="gettingstarted-compile-setup-build-configs"
>byggeindstillingslisten</link
> ovenfor.</para>

<sect4 id="gettingstarted-compile-setup-config-general">
<title
>Generelle konfigurationsindstillinger</title>

<para
>Følgende indstillingstilvalg kan defineres på siden <guilabel
>Generelt</guilabel
> i dialogen:</para>

<itemizedlist>
<listitem>
<formalpara>
<title
>Configure-argument</title>
<para
>Dette er valgmulighederne som &kdevelop; tildeler til kaldet af scriptet <filename
>configure</filename
> i byggeprocessen. Se <link linkend="gettingstarted-compile-basic-config-cmd"
>exemplet</link
> i afsnittet <quote
>Indledende konfiguration af Hello</quote
> ovenfor.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Byggemappe</title>
<para
>Dette er undermappen i nuværende projektrod, hvor &kdevelop; placerer alle filer som skabes under byggeprocessen. Ideelt set burde det svare til navnet på byggeindstillingen som bruges, men du har mulighed for at bruge et hvilket som helst navn du vil, under forudsættning af at det er anderledes end alle andre byggemapper.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Øverste kildemappe</title>
<para
>Du behøver ikke denne ofte. Dens standardværdi er projektets rodmappe, og den behøver kun defineres om hvis projektets kildekode er placeret et andet sted.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>C/C++ preprocessorargument(CPPFLAGS)</title>
<para
>Indtast særlige instruktioner for præprocessoren her. &kdevelop; bruger dette til at oprette et midlertidigt miljø inden selve byggeværktøjet kaldes. Se igen <link linkend="gettingstarted-compile-basic-config-cmd"
>exemplet</link
> i afsnittet <quote
>Inledande konfiguration af Hello</quote
> ovenfor hvordan det gøres.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Linkargumenter (LDFLAGS)</title>
<para
>Dette er ekstra information for linkværktøjet <application
>ld</application
>, om hvor det skal lede efter yderligere biblioteker. Det bruges også til at oprette det midlertidige byggemiljø.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Miljøvariabler</title>
<para
>Her kan du definere yderligere variabler som skal indstilles i det midlertidige byggemiljø som &kdevelop; laver inden de respektive byggeværktøjer kaldes. Igen, skal du definere miljøvariablerne for hver byggeindstilling hvor de skal bruges.</para>
</formalpara>
</listitem>
</itemizedlist>
</sect4>

<sect4 id="gettingstarted-compile-setup-config-spec">
<title
>Oversætterspecifikke indstillinger</title>

<para
>Øvrige faneblade på dialogsiden <guilabel
>Indstilling af configure</guilabel
> er til for oversætterspecifikke indstillinger. De er strukturerede på en lignende måde, så det er tilstrækkeligt hurtigt at kigge på siden <guilabel
>C++</guilabel
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-project-cpp.png" format="PNG"/>
</imageobject>
<caption
><para
>Vælg oversætter som &kdevelop; skal bruge og dens arbejdsmiljø her.</para
></caption>
</mediaobject>
</screenshot>

<para
>Her kan du indstille følgende:</para>

<itemizedlist>
<listitem>
<formalpara>
<title
>C++ oversætter</title>
<para
>Vælg den C++ oversætter som &kdevelop; normalt skal bruge i dette dropned-felt. Det lister dog kun de oversættere som &kdevelop; allerede kender til.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Oversætterkommando (CXX)</title>
<para
>Kun for eksperter. Dette behøves kun hvis en anden C++ oversætter end standardoversætteren bruges. Indtast navnet som det kaldes med her.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Oversætterargumenter (CXXFLAGS)</title>
<para
>Her kan du indtaste eventuelle ekstra tilvalg  som &kdevelop; skal sende til oversættern (via <filename
>Makefile</filename
>). Visse alternative værdier er forudindstillede ifølge byggeindstilling som blev valgt med dropned-feltet <guilabel
>Indstilling</guilabel
>.</para>
</formalpara>

<para
>Bemærk at mange sædvanlige oversættertilvalg kan vælges i en dialog som dukker op når du klikker på knappen <guibutton
>...</guibutton
> til højre for tekstfeltet.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-project-cppoptions.png" format="PNG"/>
</imageobject>
<caption
><para
>Brug denne dialog til at definere opførslen af &GNU; C++ oversætteren.</para
></caption>
</mediaobject>
</screenshot>

<para
>Vi valgte med vilje fanebladet <guilabel
>Optimering</guilabel
> her. Bemærk at tilvalget <guilabel
>Ingen optimering</guilabel
> er standard (ifølge  det forudindstillede tilvalg <guilabel
>-O0</guilabel
> i byggeindstillingen <computeroutput
>debug</computeroutput
>).</para>

<para
>Desværre kan du for øjeblikket ikke vælge alle tilvalg fra dialogen  Eksempelvis skal tilvalget <computeroutput
>-g3</computeroutput
> som bruges af byggeindstillingen <computeroutput
>debug</computeroutput
> ændres manuelt hvis det nogensinde behøves.</para>
</listitem>
</itemizedlist>
</sect4>
</sect3>

<sect3 id="gettingstarted-compile-setup-make">
<title
>Hvordan programmet skal bygges af make</title>

<para
>Du kan desuden indstille måden som &kdevelop; kalder værktøjet <application
>make</application
> når projektet bygges. Vælg <menuchoice
><guimenu
>Projekt</guimenu
> <guimenuitem
>Projektindstillinger</guimenuitem
></menuchoice
> og derefter ikonen <guiicon
>Byggeindstillinger</guiicon
> til venstre i dialogvinduet. Dialogsiden <guilabel
>Byggeindstillinger</guilabel
> vises så til højre.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-project-make.png" format="PNG"/>
</imageobject>
<caption
><para
>Definér hvordan &kdevelop; kalder værktøjet <application
>make</application
>.</para
></caption>
</mediaobject>
</screenshot>

<para
>Der er ikke så meget at gøre lige her nu. Den eneste interessante indstilling i de fleste tilfælde er tilvalget <guilabel
>Afbryd ved første fejl</guilabel
>. Du vil bemærke at den er deaktiveret i de fleste projekter. Den svarer til flaget <computeroutput
>-k</computeroutput
> i kaldet til <application
>gmake</application
> som vi fandt den første gang da eksempelprojektet Hello <link linkend="gettingstarted-compile-basic-build-cmd"
>blev byggeet</link
>.</para>

<para
>Dette giver mening i et integreret udviklingsmiljø som &kdevelop;, hvor alle fejlmeddelelser under bygningen opbevares. Efter byggeprocessen kan du enkelt gå til en hvilket som helst fejlmeddelelse i værktøjsvinduet <guilabel
>Meddelelser</guilabel
>. Brug <menuchoice
><guimenu
>Vis</guimenu
> <guimenuitem
>Næste fejl</guimenuitem
></menuchoice
> og <menuchoice
><guimenu
>Vis</guimenu
> <guimenuitem
>Foregående fejl</guimenuitem
></menuchoice
> eller tasterne <keycap
>F4</keycap
> og <keycombo
><keycap
>Shift</keycap
> <keycap
>F4</keycap
></keycombo
> for at gøre det. &kdevelop; aktiverer automatisk redigeringsvinduet for kildekodefilen det drejer sig om og placerer markøren på den fejlagtige linje.</para>

<para
>Hvis du på den anden side hellere ønsker at bygningen skal stoppes så snart en fejl opstår, markeres tilvalget <guilabel
>Afbryd ved første fejl</guilabel
> i dialogen. &kdevelop; kalder du <application
>gmake</application
> uden flaget <computeroutput
>-k</computeroutput
>.</para>
</sect3>

<sect3 id="gettingstarted-compile-setup-run">
<title
>Hvordan det kørbare program startes</title>

<para
>Når bygningen er færdig, kan du enkelt køre programmet indefra &kdevelop;. Brug enten <menuchoice
><guimenu
>Byg</guimenu
> <guimenuitem
>Kør program</guimenuitem
></menuchoice
>, genvejstasten <keycombo
><keycap
>Shift</keycap
> <keycap
>F9</keycap
></keycombo
> eller knappen <guibutton
>Kør program</guibutton
> i &kdevelop;s <guilabel
>byggeværktøjslinje</guilabel
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="run-button.png" format="PNG"/>
</imageobject>
<caption
><para
>Kør programmet herfra.</para
></caption>
</mediaobject>
</screenshot>

<para
>Men hvor er det kørbare program som skal køres? Hvordan får man &kdevelop; til at tilføje flag til kaldet? Eller hvordan kan man få programmet til at køres i en egen terminal for at teste interaktiv opførsel i terminalen?</para>

<para
>Alt det kan løses ved at indstille nogle projektorienterede køretilvalg i &kdevelop;. Vælg <menuchoice
><guimenu
>Projekt</guimenu
> <guimenuitem
>Projektindstillinger</guimenuitem
></menuchoice
> og derefter ikonen <guiicon
>Køreindstillinger</guiicon
> i ikonlinjen til venstre i dialogvinduet. Dialogsiden <guilabel
>Køreindstillinger</guilabel
> vises til højre.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-project-run.png" format="PNG"/>
</imageobject>
<caption
><para
>Definér hvor og hvordan programmet skal køres.</para
></caption>
</mediaobject>
</screenshot>

<para
>Der er en hel del som kan indstilles i denne dialog. Der er egentlig fire grupper af indstillingstilvalg.</para>

<itemizedlist>
<listitem>
<formalpara>
<title
>Katalog</title>
<para
>Fortæller &kdevelop; hvad det skal forudsætte at det kørbare program kaldes. Der er tre muligheder at vælge blandt.</para>
</formalpara>

<para
>Bemærk dok at kun rodmapper defineres her. &kdevelop; leder oftest efter det kørbare program i en undermappe som angives i følgende gruppe af indstillinger.</para>

<itemizedlist>
<listitem>
<para
>Kør fra mappen hvor det kørbare program senest blev bygget. Dette er standardværdien. Du kan beholde dette indtil videre.</para>
</listitem>

<listitem>
<para
>Kør fra byggemappen ifølge <link linkend="gettingstarted-compile-setup-build"
>byggeindstilling</link
> som for øjeblikket er valgt. Katalognavnet indstilles på dialogsiden <link linkend="gettingstarted-compile-setup-config-general"
>Generelt</link
>.</para>

<para
>Dette er rodmappen hvor &kdevelop; skal finde det kørbare program. Den ændres automatisk ifølge det valg du gjorde i menuen <menuchoice
><guimenu
>Projekt</guimenu
> <guisubmenu
>Byggeindstillinger</guisubmenu
></menuchoice
>. Prøv det.</para>

<para
>Foruden altid at køre det senest byggede kørbare program ifølge indstillingen ovenfor, lader det dig skifte program at køre ved helt enkelt at vælge en anden byggeindstilling i menuen <guimenu
>Projekt</guimenu
>.</para>
</listitem>

<listitem>
<para
>Kør programmet som findes i en fast egen mappe. Igen er det kun rodmappen hvor selve den kørbare fil findes.</para>

<para
>Brug dette hvis du f.eks. vil køre programmet som virkelig er installeret i stedet for versionen som findes i projektmappen.</para>
</listitem>
</itemizedlist>
</listitem>

<listitem>
<formalpara>
<title
>Program</title>
<para
>Dette fortæller relativt sted og navn på programmet som virkelig skal kaldes for &kdevelop;. Det er relativt i forhold til rodmappen som defineres i indstillingsgruppen ovenfor. Desuden kan du definere alle argumenter som &kdevelop; skal sende til programmet når det virkelig kaldes.</para>
</formalpara>

<note>
<para
>Hvis tekstfeltet <guilabel
>Hovedprogram</guilabel
> efterlades tomt, bruges indstillingen af <emphasis
>aktivt mål</emphasis
> i Håndtering af automake. Selvom dette er en ekspertindstilling, er en sædvanlig grund til problemer at dette indtastningsfelt er efterladt tomt. Kontrollér indstillingen hvis &kdevelop; ikke synes at kalde det kørbare program du ville.</para>
</note>
</listitem>

<listitem>
<formalpara>
<title
>Miljøvariabler</title>
<para
>&kdevelop; laver et særligt skalmiljø at køre programmet i. Definér eventuelle ekstra miljøvariabler i denne gruppe af indstillinger.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Diverse</title>
<para
>Yderligere to afkrydsningsfelter findes længst nede på denne dialogside.</para>
</formalpara>

<itemizedlist>
<listitem>
<para
><guilabel
>Kompilér automatisk inden kørsel</guilabel
> er oftest praktisk. &kdevelop; kontrollerer om projektet er ændret og udfører nødvendige konfigurerings- og byggeskridt for dig så snart du giver kommandoen at køre programmet.</para>

<para
>Afmarkér det hvis du vil køre en programversion tidligere end den seneste ændring.</para>
</listitem>

<listitem>
<para
><guilabel
>Start i ekstern terminal</guilabel
> er interessant hvis du vil prøve ind- og uddatasopførsel for programmer uden grafisk grænseflade i et terminalprogram. Dette er ikke markeret som standard, så &kdevelop; starter programmet i et eget vindue uden ind- og uddatamulighed via en terminal.</para>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</sect3>
</sect2
> 
</sect1>

<sect1 id="gettingstarted-extend">
<title
>Hvordan et projekt kan udvides: Håndtering af automake</title>

<para
>(endnu ikke skrevet ...)</para>

<sect2 id="gettingstarted-extend-automake">
<title
>Et hurtigt kig på maskineriet i automake</title>

<para
>(endnu ikke skrevet ...)</para>
</sect2
> 

<sect2 id="gettingstarted-extend-pics">
<title
>Hvordan man placerer ikoner i en separat mappe</title>

<para
>(endnu ikke skrevet ...)</para>
</sect2
> 

<sect2 id="gettingstarted-extend-class">
<title
>Hvordan man tilføjer nye klasser</title>

<para
>(endnu ikke skrevet ...)</para>

<caution
><para
>Vær forsigtig når du vælger filnavne for klasser. Det er ekstremt svært at ændre dem senere.</para
></caution>
</sect2
> 

<sect2 id="gettingstarted-extend-subproject">
<title
>Hvad findes i et delprojekt?</title>

<para
>(endnu ikke skrevet ...)</para>

<sect3 id="gettingstarted-extend-subproject-active">
<title
>Koncentrér dig om dit arbejde: Det aktive mål</title>

<para
>(endnu ikke skrevet ...)</para>
</sect3
> 
</sect2
> 

<sect2 id="gettingstarted-extend-restructure">
<title
>Nogle skridt for at omstrukturere et projekt</title>

<para
>(endnu ikke skrevet ...)</para>
</sect2
> 
</sect1>


<sect1 id="gettingstarted-debug">
<title
>Hvordan man fejlsøger</title>

<para
>(endnu ikke skrevet ...)</para>
</sect1
> 


<sect1 id="gettingstarted-doc">
<title
>En anmærkning om projektdokumentationen</title>

<para
>&kde;-projektet bruger <ulink url="http://www.docbook.org/tdg5/en/html/docbook.html"
>docbook</ulink
> til at oprette projektets håndbog (dvs. brugermanualen). Håndbogen er tilgængelig via programmets menulinje ved at vælge <menuchoice
><guimenu
>Hjælp</guimenu
> <guimenuitem
>Håndbog <replaceable
>programnavn</replaceable
></guimenuitem
></menuchoice
> når programmets grafiske grænseflade vises i &kde;. Efter at projektet er bygget, vises håndbogen i &kde;'s Hjælpecenter. Den skal forklare for brugeren hvordan programmet fungerer, hvilke hovedfunktioner der er og hvordan det indstilles. Den skal også forklare avancerede funktioner, hvis sådanne findes. </para>
<para
>Alle &kde;-baserede skabeloner i &kdevelop; har undermappen doc, som indeholder skabelonen <filename
>index.docbook</filename
> i mappen en, for at komme i gang med at skrive brugerhåndbogen. Du redigerer <filename
>index.docbook</filename
> i &kdevelop;, og begynder med at ændre personlig information såsom navn, e-mail, osv. Kig på kommentarerne i filen og forsøg at følge anvisningerne for at påbegynde programdokumentationen. Byg  projektet om for at se ændringerne i Hjælpecenteret.</para>
<note
><para
>Du skal installere projektet med <menuchoice
><guimenu
>Byg</guimenu
> <guimenuitem
>Installér</guimenuitem
></menuchoice
> eller <guimenuitem
>Installér (som systemadministrator)</guimenuitem
> i &kdevelop; for at kunne se håndbogen i hjælpecenteret.</para
></note>
<para
>Du finder mere information om syntaksen for docbook på <ulink url="http://l10n.kde.org/docs/markup/index.html"
>&kde;'s hjemmeside for dokumentation</ulink
>.</para>
</sect1>

<sect1 id="gettingstarted-keys">
<title
>Sidst men ikke mindst, genvejstaster</title>

<para
>(endnu ikke skrevet ...)</para>
</sect1>

<sect1 id="gettingstarted-whereto">
<title
>Hvordan går man videre</title>

<para
>(endnu ikke skrevet ...)</para>

<sect2 id="gettingstarted-whereto-faq">
<title
>Problemer som man ofte støder på</title>

<simplelist>
<member
>Kapitlet I korthed</member>
<member
>Sider med ofte stillede spørgsmål</member>
<member
>Forum</member>
<member
>E-mail-lister</member>
</simplelist>
</sect2>

<sect2 id="gettingstarted-whereto-projects">
<title
>Arbejd med projekter</title>

<para
>(endnu ikke skrevet ...)</para>

<sect3 id="gettingstarted-whereto-projects-open">
<title
>Brug eksisterende &kdevelop;-projekter</title>

<para
>(endnu ikke skrevet ...)</para>
</sect3>

<sect3 id="gettingstarted-whereto-projects-import">
<title
>Importér eksterne projekter</title>

<para
>(endnu ikke skrevet ...)</para>
</sect3>
</sect2>
</sect1>

</chapter>
