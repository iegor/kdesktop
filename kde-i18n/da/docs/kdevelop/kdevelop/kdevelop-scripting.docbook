<chapter id="kdevelop-scripting">

<chapterinfo>
  <authorgroup>
    <author
><firstname
>Ian</firstname
><surname
>Geiser</surname
></author>
    <!-- ROLES_OF_TRANSLATORS -->
  </authorgroup>
</chapterinfo>

<title
>Brug af scripter i KDevelop</title>

<sect1 id="running-scripts">
<title
>At køre scripter</title>
<para
>For at tilgå et script der er til rådighed for &kdevelop;, skal du bruge menuen <menuchoice
><guimenu
>Værktøjer</guimenu
><guimenuitem
>Scripter</guimenuitem
></menuchoice
>. Hvis ikke der findes en sådan menu, er der ingen scripter installeret som KDevelop kan bruge. </para>
</sect1>

<sect1 id="adding-scripts">
<title
>Tilføjelse af scripter</title>
<para
>Så snart du har tilføjet KScript-understøttelse til dit værtsprogram, er det let at tilføje scripter. Scriptene består af to dele, en desktop-fil der indeholder meta-dat om scriptet og så scriptet selv. Denne fremgangsmåde blev valgt pga. sikkerhed og simplicitet. Desktop-filen sørger for meta-information til menuer og script-typen. Det betyder at værtsprogrammet ikke behøver at tolke hvert script ved indlæsning. Herunder ses et eksempel: </para>
<para
>Ovenstående eksempel demonstrerer de primære elementer KScript vil søge efter. Det første element, "Name" er det navn der vil optræde for brugeren i værtsprogrammet og "Comment" bruges normalt som et værktøjsvink. "Type" er det vigtigste. Det bruges til at vælge den rigtige scriptfortolker der skal køre scriptet. Aktuelt er de tilrådighed værende for KDE, "ShellScript/bash" og "JavaScript/kjs". Næste trin er at oprette det faktiske script. Til eksemplet herover er Type "ShellScript/bash". Scriptets scriptfortolker tilbyder udvikleren forskellige ting. For det første er det værtsprogrammets DCOP ID. Dette videregives til scriptet som det første argument. Det betyder at fra et hvilket som helst sted i scriptet, vil værdien af "$1" returnere værtsprogrammets DCOP ID. Et script-eksempel er vist herunder: </para>

<para
>Dette script er ret simpelt og kører blot en kommando og sætter teksten i det første dokument til uddata fra "ls- s"</para>

<para
>Et af de mest brugbare værktøjer til at udvikle scripter for programmer er KDCOP-programmet.</para>
<figure id="screenshot-kdcop" float="1">
  <title
>KDCOP søger i DCOP grænseflader i&kdevelop;</title>
  <mediaobject>
    <imageobject
><imagedata fileref="kdcop_browsing.png"/></imageobject>
  </mediaobject>
</figure>

<para
>KDCOP værktøjet gør det muligt for script-udviklere at søge efter og fejlrette aktuelle grænseflader i værtsprogrammet. KDCOP sørger og for en smart funktion der tillader brugere at vælge en metode og trække den aktuelle kode til en teksteditor. Dette simplificerer brugen for dem der ikke er fortrolige med DCOP-metoder i værtssproget. For tiden understøtter KDCOP KJSEmbed, Python og UNIX shell-metoder til at tilgå DCOP.</para>

<para
>Så snart scriptet er fuldført er det klar til at blive installeret. Program-udviklere bør dokumentere stedet der skannes for scripter. I det ovenstående eksempel for Kate, er scriptene placeret i "$KDEDIRS/share/apps/kate/scripts".</para>

<figure id="screenshot-scripts" float="1">
  <title
>&kdevelop; Scripter på filsystemet</title>
  <mediaobject>
    <imageobject
><imagedata fileref="script_location.png"/></imageobject>
  </mediaobject>
</figure>

<para
>Scriptets desktop-fil og dets tilhørende script, bør placeres i samme katalog. For scriptudviklere anbefales det desuden at alle andre script-ressourcer, som f.eks. UI-filer eller data-filer bør være i script-kataloget. I ovenstående eksempel vil scriptet kunne findes i menuen Værktøjer->KDE scripter. En vigtig ting at huske for script-udviklere er at undgå at bruge funktioner der kan blokere i længere tid eller befinde sig i en event-løkke. Det skyldes at den aktuelle udgave af script-grænsefladen er beregnet til automatiserede opgaver der kører indtil de er udført. Dette ændres i KDE 4. </para>

</sect1>


</chapter>
