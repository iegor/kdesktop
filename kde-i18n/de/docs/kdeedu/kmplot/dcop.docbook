<chapter id="dcop">
	<title
>Skripte für &kmplot;</title>
	
	<para
>In &kde; 3.4 können Sie jetzt auch Skripte für &kmplot; mit &DCOP; schreiben. Wenn Sie zum Beispiel eine neue Funktion <userinput
>f(x)=2sin x+3cos x</userinput
> definieren, die Linienbreite auf 20 Einheiten einstellen und den Graphen dieser Funktion zeichnen wollen, geben Sie in einer Konsole folgendes ein:</para>
	<para
><command
>dcop kmplot-PID Parser addFunction "f(x)=2sin x+3cos x"</command
> Als Ergebnis wird die ID-Nummer der neuen Funkion zurückgegeben, oder -1, wenn die Funktion nicht definiert werden konnte.</para>
	<para
><command
>dcop kmplot-PID Parser setFunctionFLineWidth 20 ID</command
> Dieser Befehl stellt die Linienbreite der Funktion mit der Nummer ID auf 20 Einheiten ein.</para>
	<para
><command
>dcop kmplot-PID View drawPlot</command
> Dieser Befehl zeichnet das Fenster neu, dadurch wird die Funktion angezeigt.</para>
<para
>Die Liste aller vorhandenen Funktionen: <variablelist>
		<varlistentry>
			<term
>KmPlotShell fileOpen &amp;url </term>
			<listitem>
				<para
>Lädt die Datei <parameter
>url</parameter
>.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg isModified </term>
			<listitem>
				<para
>Gibt Wahr zurück, wenn Änderungen vorgenommen wurden.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg editColors </term>
			<listitem>
				<para
>Öffnet den Dialog zur Farbwahl.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg editAxes </term>
			<listitem>
				<para
>Öffnet den Dialog zur Bearbeitung des Koordinatensystems.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg editScaling </term>
			<listitem>
				<para
>Öffnet die Dialogbox zur Bearbeitung der Skalierung.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg editFonts </term>
			<listitem>
				<para
>Öffnet die Dialogbox zur Einstellung der Schriftarten.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg editConstants </term>
			<listitem>
				<para
>Öffnet den Dialog zur Bearbeitung der Konstanten.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg newFunction </term>
			<listitem>
				<para
>Öffnet den Dialog für eine neue Funktionszeichnung. </para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg newParametric </term>
			<listitem>
				<para
>Öffnet den Dialog für eine neue parametrische Zeichnung.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg newPolar </term>
			<listitem>
				<para
>Öffnet den Dialog für eine neue polare Zeichnung.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg toggleShowSlider0 </term>
			<listitem>
				<para
>Schaltet die Anzeige des Schiebereglers 1 für Parameter ein und aus.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg toggleShowSlider1 </term>
			<listitem>
				<para
>Schaltet die Anzeige des Schiebereglers 2 für Parameter ein und aus.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg toggleShowSlider2 </term>
			<listitem>
				<para
>Schaltet die Anzeige des Schiebereglers 3 für Parameter ein und aus.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
		  <term
>MainDlg toggleShowSlider3 </term>
		  <listitem>
		    <para
>Schaltet die Anzeige des Schiebereglers 4 für Parameter ein und aus.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg slotSave </term>
			<listitem>
				<para
>Speichert die Funktionen (und öffnet dazu den Dateidialog bei einer neuen Datei).</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg slotSaveas </term>
			<listitem>
				<para
>Wie im Menü <menuchoice
><guimenu
>Datei</guimenu
><guimenuitem
>Speichern unter ...</guimenuitem
></menuchoice
>.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg slotEditPlots </term>
			<listitem>
				<para
>Öffnet den Dialog zur Bearbeitung einer Zeichnung.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg slotPrint </term>
			<listitem>
				<para
>Öffnet den Druckdialog.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg slotExport </term>
			<listitem>
				<para
>Öffnet den Exportdialog.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg slotSettings </term>
			<listitem>
				<para
>Öffnet den Einrichtungsdialog.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg slotNames </term>
			<listitem>
				<para
>Zeigt eine Liste der vordefinierten mathematischen Funktionen an.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg slotCoord1 </term>
			<listitem>
				<para
>Koordinatensystem I.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg slotCoord2 </term>
			<listitem>
				<para
>Koordinatensystem II.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg slotCoord3 </term>
			<listitem>
				<para
>Koordinatensystem III.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg getYValue </term>
			<listitem>
				<para
>Wie im Menü <menuchoice
><guimenu
>Extras</guimenu
><guimenuitem
>y-Wert auslesen ...</guimenuitem
></menuchoice
>.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg findMinimumValue </term>
			<listitem>
				<para
>Wie im Menü <menuchoice
><guimenu
>Extras</guimenu
><guimenuitem
>Nach Minimumwert suchen ...</guimenuitem
></menuchoice
>.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg findMaximumValue </term>
			<listitem>
				<para
>Wie im Menü <menuchoice
><guimenu
>Extras</guimenu
><guimenuitem
>Nach Maximumwert suchen ...</guimenuitem
></menuchoice
>.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>MainDlg graphArea </term>
			<listitem>
				<para
>Wie im Menü <menuchoice
><guimenu
>Extras</guimenu
><guimenuitem
>Integral berechnen</guimenuitem
></menuchoice
>.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>Parser addFunction f_str </term>
			<listitem>
				<para
>Fügt eine neue Funktion mit dem Ausdruck <parameter
>f_str</parameter
> hinzu. Wenn der Ausdruck keinen Funktionsnamen enthält, wird er automatisch erzeugt. Die ID-Nummer der neuen Funktion wird zurückgegeben, oder -1, wenn die Funktion nicht definiert werden konnte.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>Parser delfkt id </term>
			<listitem>
				<para
>Entfernt die Funktion mit der Nummer <parameter
>id</parameter
>. Wenn die Funktion nicht gelöscht werden konnte, wird Falsch zurückgegeben, sonst Wahr.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>Parser setFunctionExpression f_str id </term>
			<listitem>
				<para
>Setzt den Ausdruck für die Funktion mit der Nummer <parameter
>id</parameter
> auf <parameter
>f_str</parameter
>. Gibt Wahr zurück, wenn dies erfolgreich war, sonst Falsch.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>Parser countFunctions </term>
			<listitem>
				<para
>Gibt die Anzahl der Funktionen zurück (Parametrische Funktionen werden doppelt gezählt).</para>
			</listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser listFunctionNames </term>
		  <listitem>
		    <para
>Gibt eine Liste mit allen Funktionen zurück.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser fnameToId f_str </term>
		  <listitem>
		    <para
>Gibt die ID-Nummer von <parameter
>f_str</parameter
> oder -1 zurück, wenn der Funktionsname <parameter
>f_str</parameter
> nicht gefunden wurde.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser id x </term>
		  <listitem>
		    <para
>Berechnet den Wert <parameter
>x</parameter
> der Funktion mit der Nummer <parameter
>id</parameter
> oder gibt 0,0 zurück, wenn die Funktion nicht existiert.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionFVisible id </term>
		  <listitem>
		    <para
>Gibt Wahr zurück, wenn die Funktion mit der Nummer <parameter
>id</parameter
> sichtbar ist, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionF1Visible id </term>
		  <listitem>
		    <para
>Gibt Wahr zurück, wenn die erste Ableitung der Funktion mit der Nummer <parameter
>id</parameter
> sichtbar ist, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionF2Visible id </term>
		  <listitem>
		    <para
>Gibt Wahr zurück, wenn die zweite Ableitung der Funktion mit der Nummer <parameter
>id</parameter
> sichtbar ist, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionIntVisible id </term>
		  <listitem>
		    <para
>Gibt Wahr zurück, wenn das Integral der Funktion mit der Nummer <parameter
>id</parameter
> sichtbar ist, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionFVisible visible id </term>
		  <listitem>
		    <para
>Zeigt die Funktion mit der Nummer <parameter
>id</parameter
> an, wenn <parameter
>visible</parameter
> Wahr ist. Ist <parameter
>visible</parameter
> Falsch, dann wird die Funktion ausgeblendet. Gibt Wahr zurück, wenn die Funktion existiert, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionF1Visible visible id </term>
		  <listitem>
		    <para
>Zeigt die erste Ableitung der Funktion mit der Nummer <parameter
>id</parameter
> an, wenn <parameter
>visible</parameter
> Wahr ist. Ist <parameter
>visible</parameter
> Falsch, dann wird die Funktion ausgeblendet. Gibt Wahr zurück, wenn die Funktion existiert, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionF2Visible visible id </term>
		  <listitem>
		    <para
>Zeigt die zweite Ableitung der Funktion mit der Nummer <parameter
>id</parameter
> an, wenn <parameter
>visible</parameter
> Wahr ist. Ist <parameter
>visible</parameter
> Falsch, dann wird die Funktion ausgeblendet. Gibt Wahr zurück, wenn die Funktion existiert, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionIntVisible visible id </term>
		  <listitem>
		    <para
>Zeigt das Integral der Funktion mit der Nummer <parameter
>id</parameter
> an, wenn <parameter
>visible</parameter
> Wahr ist. Ist <parameter
>visible</parameter
> Falsch, dann wird die Funktion ausgeblendet. Gibt Wahr zurück, wenn die Funktion existiert, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionStr id </term>
		  <listitem>
		    <para
>Gibt den Funktionsausdruck der Funktion mit der Nummer <parameter
>id</parameter
> zurück. Wenn die Funktion nicht existiert, wird eine leere Zeichenkette zurückgegeben.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionFColor id </term>
		  <listitem>
		    <para
>Gibt die Farbe der Funktion mit der Nummer <parameter
>id</parameter
> zurück.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionF1Color id </term>
		  <listitem>
		    <para
>Gibt die Farbe der ersten Ableitung der Funktion mit der Nummer <parameter
>id</parameter
> zurück.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionF2Color id </term>
		  <listitem>
		    <para
>Gibt die Farbe der zweiten Ableitung der Funktion mit der Nummer <parameter
>id</parameter
> zurück.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionIntColor id </term>
		  <listitem>
		    <para
>Gibt die Farbe des Integrals der Funktion mit der Nummer <parameter
>id</parameter
> zurück.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionFColor color id </term>
		  <listitem>
		    <para
>Setzt die Farbe der Funktion mit der Nummer <parameter
>id</parameter
> auf <parameter
>color</parameter
>. Wenn die Funktion existiert, wird Wahr zurückgegeben, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionF1Color color id </term>
		  <listitem>
		    <para
>Setzt die Farbe der ersten Ableitung der Funktion mit der Nummer <parameter
>id</parameter
> auf <parameter
>color</parameter
>. Wenn die Funktion existiert, wird Wahr zurückgegeben, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionF2Color color id </term>
		  <listitem>
		    <para
>Setzt die Farbe der zweiten Ableitung der Funktion mit der Nummer <parameter
>id</parameter
> auf <parameter
>color</parameter
>. Wenn die Funktion existiert, wird Wahr zurückgegeben, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionIntColor color id </term>
		  <listitem>
		    <para
>Setzt die Farbe des Integralsder Funktion mit der Nummer <parameter
>id</parameter
> auf <parameter
>color</parameter
>. Wenn die Funktion existiert, wird Wahr zurückgegeben, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionFLineWidth id </term>
		  <listitem>
		    <para
>Gibt die Linienbreite der Funktion mit der Nummer <parameter
>id</parameter
> zurück. Wenn die Funktion nicht existiert, wird 0 zurückgegeben.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionF1LineWidth id </term>
		  <listitem>
		    <para
>Gibt die Linienbreite der ersten Ableitung der Funktion mit der Nummer <parameter
>id</parameter
> zurück. Wenn die Funktion nicht existiert, wird 0 zurückgegeben.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionF2LineWidth id </term>
		  <listitem>
		    <para
>Gibt die Linienbreite der ersten Ableitung der Funktion mit der Nummer <parameter
>id</parameter
> zurück. Wenn die Funktion nicht existiert, wird 0 zurückgegeben.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionIntLineWidth id </term>
		  <listitem>
		    <para
>Gibt die Linienbreite des Integrals der Funktion mit der Nummer <parameter
>id</parameter
> zurück. Wenn die Funktion nicht existiert, wird 0 zurückgegeben.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionFLineWidth linewidth id </term>
		  <listitem>
		    <para
>Stellt die Linienbreite der Funktion mit der Nummer <parameter
>id</parameter
> auf <parameter
>linewidth</parameter
> Einheiten. Wenn die Funktion existiert, wird Wahr zurückgegeben, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionF1LineWidth linewidth id </term>
		  <listitem>
		    <para
>Stellt die Linienbreite der ersten Ableitung der Funktion mit der Nummer <parameter
>id</parameter
> auf <parameter
>linewidth</parameter
> Einheiten. Wenn die Funktion existiert, wird Wahr zurückgegeben, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionF2LineWidth linewidth id </term>
		  <listitem>
		    <para
>Stellt die Linienbreite der zweiten Ableitung der Funktion mit der Nummer <parameter
>id</parameter
> auf <parameter
>linewidth</parameter
> Einheiten. Wenn die Funktion existiert, wird Wahr zurückgegeben, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionIntLineWidth linewidth id </term>
		  <listitem>
		    <para
>Stellt die Linienbreite des Integrals der Funktion mit der Nummer <parameter
>id</parameter
> auf <parameter
>linewidth</parameter
> Einheiten. Wenn die Funktion existiert, wird Wahr zurückgegeben, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionParameterList id </term>
		  <listitem>
		    <para
>Gibt eine Liste mit allen Parameterwerten der Funktion mit der Nummer <parameter
>id</parameter
> zurück.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionAddParameter new_parameter id </term>
		  <listitem>
		    <para
>Fügt den Parameterwert <parameter
>new_parameter</parameter
> zu der Funktion mit der Nummer <parameter
>id</parameter
> hinzu. Gibt Wahr zurück, wenn diese Operation erfolgreich war, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionRemoveParameter remove_parameter id </term>
		  <listitem>
		    <para
>Entfernt den Parameterwert <parameter
>remove_parameter</parameter
> aus der Funktion mit der Nummer <parameter
>id</parameter
> hinzu. Gibt Wahr zurück, wenn diese Operation erfolgreich war, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionMinValue id </term>
		  <listitem>
		    <para
>Gibt den minimalen Wert des des Zeichenbereichs der Funktion mit der Nummer <parameter
>id</parameter
> zurück. Wenn die Funktion nicht existiert oder das Minimum nicht definiert ist, wird eine leere Zeichenkette zurückgegeben.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionMaxValue id </term>
		  <listitem>
		    <para
>Gibt den maximalen Wert des Zeichenbereichs der Funktion mit der Nummer <parameter
>id</parameter
> zurück. Wenn die Funktion nicht existiert oder das Maximum nicht definiert ist, wird eine leere Zeichenkette zurückgegeben.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionMinValue min id </term>
		  <listitem>
		    <para
>Setzt den minimalen Wert des Zeichenbereichs der Funktion mit der Nummer <parameter
>id</parameter
> auf <parameter
>min</parameter
>. Wenn die Funktion existiert und der Ausdruck gültig ist, wird Wahr zurückgegeben, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionMaxValue max id </term>
		  <listitem>
		    <para
>Setzt den maximalen Wert des Zeichenbereichs der Funktion mit der Nummer <parameter
>id</parameter
> auf <parameter
>max</parameter
>. Wenn die Funktion existiert und der Ausdruck gültig ist, wird Wahr zurückgegeben, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		
		<varlistentry>
		  <term
>Parser functionStartXValue id </term>
		  <listitem>
		    <para
>Gibt den Anfangs-x-Punkt für das Integral der Funktion mit der Nummer <parameter
>id</parameter
> zurück. Wenn die Funktion nicht existiert oder der Ausdruck für den x-Punkt nicht definiert ist, wird ein leere Zeichenkette zurückgegeben.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser functionStartYValue id </term>
		  <listitem>
		    <para
>Gibt den Anfangs-y-Punkt für das Integral der Funktion mit der Nummer <parameter
>id</parameter
> zurück. Wenn die Funktion nicht existiert oder der Ausdruck für den y-Punkt nicht definiert ist, wird ein leere Zeichenkette zurückgegeben.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionStartXValue min id </term>
		  <listitem>
		    <para
>Setzt den Anfangs-x-Punkt für das Integral der Funktion mit der Nummer <parameter
>id</parameter
> auf <parameter
>x</parameter
>. Wenn die Funktion existiert und der Ausdruck gültig ist, wird Wahr zurückgegeben, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
		  <term
>Parser setFunctionStartYValue max id </term>
		  <listitem>
		    <para
>Setzt den Anfangs-y-Punkt für das Integral der Funktion mit der Nummer <parameter
>id</parameter
> auf <parameter
>y</parameter
>. Wenn die Funktion existiert und der Ausdruck gültig ist, wird Wahr zurückgegeben, sonst Falsch.</para>
		  </listitem>
		</varlistentry>
		<varlistentry>
			<term
>View stopDrawing </term>
			<listitem>
				<para
>Wenn &kmplot; gerade eine Funktion zeichnet, wird dieser Vorgang angehalten.</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term
>View drawPlot </term>
			<listitem>
				<para
>Zeichnet alle Funktionen neu.</para>
			</listitem>
		</varlistentry>
	</variablelist>
</para>
</chapter>

<!--
    Local Variables:
    mode: sgml
    sgml-minimize-attributes:nil
    sgml-general-insert-case:lower
    sgml-indent-step:0
    sgml-indent-data:nil
    sgml-parent-document:("index.docbook" "BOOK" "CHAPTER")
    End:
    -->