<!--Dear translator: please NEVER translate the id or anything inside the tags as they are needed in english by the application
     Thanks a lot in advance.-->
<chapter id="reference">
<title
>Programmreferenz für &kturtle;s Logo-Sprache</title>
<para
>Dies ist die Referenz für &kturtle;'s &logo;. In diesem Kapitel werden zuerst alle <link linkend="different-instructions"
>unterschiedlichen Anweisungstypen</link
> kurz erläutert. Dann werden die <link linkend="commands"
>Befehle</link
> nacheinander besprochen. Darauf folgen Erklärungen zu <link linkend="containers"
>Containern</link
>, <link linkend="math"
>mathematischen Operatoren</link
>, <link linkend="questions"
>Vergleichsoperatoren</link
>, und <link linkend="controlling-execution"
>Ausführungskontrolle</link
>. Zuletzt wird gezeigt, wie Sie mit <link linkend="learn"
>lerne</link
> Ihre eigenen Befehle erstellen können.</para>

<sect1 id="different-instructions">
<title
>Die unterschiedlichen Anweisungstypen</title>
<para
>Wie jede Sprache hat auch LOGO verschiedene Typen von Worten und Symbolen. Hier werden diese Unterschiede zwischen den Typen kurz erklärt.</para>

<sect2 id="command">
<title
>Befehle</title>
<para
>Mit Befehlen sagen Sie der Schildkröte oder &kturtle;, was sie tun soll. Einige Befehle brauchen Eingabewerte, andere geben Werte zurück. <screen
># vorwärts ist ein Befehl, der einen Eingabewert braucht, 
# in diesem Fall die Zahl 100:
vorwärts 100
</screen>
</para>
<para
>Eine ausführliche Übersicht aller von &kturtle; unterstützten Befehle finden Sie <link linkend="commands"
>hier</link
>.</para>
</sect2>

<sect2 id="number">
<title
>Zahlen</title>
<para
>Wahrscheinlich wissen Sie schon ziemlich viel über Zahlen. In &kturtle; werden Zahlen etwa so wie in der Sprache oder in der Mathematik verwendet. </para>
<para
>Es gibt die so genannten natürlichen Zahlen: <userinput
>0</userinput
>, <userinput
>1</userinput
>, <userinput
>2</userinput
>, <userinput
>3</userinput
>, <userinput
>4</userinput
>, <userinput
>5</userinput
> &etc; Die negativen Zahlen: <userinput
>-1</userinput
>, <userinput
>-2</userinput
>, <userinput
>-3</userinput
> &etc; Und die Zahlen mit Dezimalstellen oder reelle Zahlen, zum Beispiel: <userinput
>0.1</userinput
>, <userinput
>3.14</userinput
>, <userinput
>33.3333</userinput
>, <userinput
>-5.05</userinput
>, <userinput
>-1.0</userinput
>. </para>
<para
>Zahlen können in <link linkend="math"
>mathematischen Berechnungen</link
> und <link linkend="questions"
>Vergleichen</link
> benutzt werden. Sie können auch in <link linkend="containers"
>Container</link
> gepackt werden.</para>
<para
>Zahlen werden im <link linkend="the-code-editor"
>Quelltexteditor</link
> blau <glossterm
>hervorgehoben</glossterm
>.</para>
</sect2>

<sect2 id="string">
<title
>Zeichenketten</title>
<para
>Zuerst ein Beispiel:<screen>
drucke "Hallo, ich bin eine Zeichenkette."
</screen
> In diesem Beispiel ist <userinput
>drucke</userinput
> ein Befehl und <userinput
>"Hallo, ich bin eine Zeichenkette."
</userinput
> eine Zeichenkette. Zeichenketten haben am Anfang und am Ende das Zeichen <userinput
>"</userinput
>, daran erkennt sie &kturtle;.</para>
<para
>Zeichenketten können auch in <link linkend="containers"
>Container</link
> gepackt werden, aber nicht in <link linkend="math"
>mathematischen Berechnungen</link
> und <link linkend="questions"
>Vergleichen</link
> benutzt werden.</para>
<para
>Zeichenketten werden im <link linkend="the-code-editor"
>Quelltexteditor</link
> dunkelrot <glossterm
>hervorgehoben</glossterm
>.</para>
</sect2>


<sect2 id="name">
<title
>Namen</title>
<para
>In der &logo; Programmiersprache erzeugen Sie neue Objekte. Wenn Sie ein Programm schreiben, werden Sie oft <link linkend="containers"
>Container</link
> und manchmal auch <link linkend="learn"
>lerne</link
> für neue Befehle verwenden. Diesen <link linkend="containers"
>Containern</link
> und neuen Befehlen mit <link linkend="learn"
>lerne</link
> müssen Sie einen Namen geben.</para>
<para
>Sie können jeden beliebigen Namen wählen, solange dieser Name noch keine Bedeutung hat. Sie können zum Beispiel einen Container nicht <link linkend="forward"
>vorwärts</link
> nennen, da dieser Name bereits für einen Befehl benutzt wird.<screen>
# hier wird vorwärts als Name für einen Container benutzt, aber er 
# hat schon eine Bedeutung, so dass dies einen Fehler gibt:
vorwärts = 20

# dies funktioniert:
vorwärts 20
</screen
> Namen dürfen nur Buchstaben, Zahlen und Unterstriche (_) enthalten. Außerdem müssen sie mit einem Buchstaben anfangen. </para>
<para
>In der Dokumentation finden Sie unter <link linkend="containers"
>Container</link
> und dem Befehl <link linkend="learn"
>lerne</link
> genauere Erklärungen und Beispiele. </para>
</sect2>

<sect2 id="assignment">
<title
>Zuweisungen</title>
<para
>Zuweisungen werden mit dem Symbol <userinput
>=</userinput
> ausgeführt. In Programmsprachen sollten Sie ein einzelnes <userinput
>=</userinput
> nicht als 'ist gleich', sondern als 'weist zu' lesen. Der Ausdruck 'ist gleich' trifft eher auf den <link linkend="questions"
>Vergleichsoperator</link
> <userinput
>==</userinput
> zu.</para>
<para
>Zuweisungen brauchen sie im Allgemeinen aus zwei Gründen, (1) um etwas in einen <link linkend="containers"
>Container</link
> zu packen und (2) um den Inhalt eines Containers zu bearbeiten. Zum Beispiel: <screen
>x = 10
# Der Container x enthält jetzt die Zahl 10
W = "Mein Alter ist: "
# Der Container W enthält jetzt die Zeichenkette "Mein Alter ist: "
# Dies druckt den Inhalt der Container 'W' und 'x' auf die Zeichenfläche
drucke W + x
</screen>
</para>
<para
>Weitere Beispiele finden Sie im Abschnitt <link linkend="containers"
>Container</link
>.</para>
</sect2>

<sect2 id="math-symbols">
<title
>Mathematische Symbole</title>
<para
>&kturtle; unterstützt alle einfachen mathematischen Symbole: addieren (<userinput
>+</userinput
>), subtrahieren (<userinput
>-</userinput
>), multiplizieren (<userinput
>*</userinput
>), dividieren (<userinput
>/</userinput
>) und die Klammern <userinput
>(</userinput
> und <userinput
>)</userinput
>.</para>
<para
>Eine ausführliche Erklärung und weitere Beispiele finden Sie im Abschnitt <link linkend="math"
>Mathematik</link
>.</para>
</sect2>

<sect2 id="question">
<title
>Vergleichsoperatoren</title>
<para
>Wir können einfache Vergleiche anstellen, der Ergebnis 'wahr' oder 'falsch' sein kann.</para>
<para
>Vergleichsoperatoren werden ausführlich im Abschnitt <link linkend="questions"
>Vergleichsoperatoren</link
> erklärt.</para>
</sect2>

<sect2 id="questions-glue">
<title
>Verknüpfungsoperatoren</title>
<para
>Vergleiche können mit so genannten 'Verknüpfungsoperatoren' verbunden werden, dies sind <userinput
>und</userinput
>, <userinput
>oder</userinput
>, und als Sonderfall <userinput
>nicht</userinput
>.</para>
<para
>Eine Erklärung dieser Begriffe finden Sie im Abschnitt <link linkend="question-glue"
>Verknüpfungsoperatoren</link
>.</para>
</sect2>


<sect2 id="comment">
<title
>Kommentare</title>
<para
>Kommentare sind Zeilen mit einem <userinput
>#</userinput
> am Anfang. Zum Beispiel: <screen>
# dies ist ein Kommentar!
drucke "dies ist kein Kommentar"
# diese Zeile ist kein Kommentar, aber dafür die nächste:
# drucke "dies ist kein Kommentar"
</screen
>Mit Kommentaren können Sie Anmerkungen in den Quelltext einfügen, für Sie oder für andere Leser. Kommentare werden benutzt, um (1) eine kurze Beschreibung des Programms zu geben, um (2) einen etwas unverständlichen Quelltext zu erläutern, und um (3) zeitweise Zeilen des Quelltextes von der Ausführung auszuschließen (wie in der letzten Zeile des Beispiels).</para>
<para
>Kommentarzeilen werden im <link linkend="the-code-editor"
>Quelltexteditor</link
> dunkelgelb <glossterm
>hervorgehoben</glossterm
>.</para>
</sect2>

</sect1>


<sect1 id="commands">
<title
>Befehle</title>
<para
>Mit Befehlen sagen Sie der Schildkröte, was sie tun soll. Einige Befehle brauchen Eingabewerte, andere geben Werte zurück. In diesem Abschnitt werden alle Befehle für &kturtle; erklärt. Beachten Sie, dass alle eingebauten Befehle im <link linkend="the-code-editor"
>Quelltexteditor</link
> dunkelgrün <glossterm
>hervorgehoben</glossterm
> werden, dies erleichtert es Ihnen, sie zu erkennen.</para>

<sect2 id="moving-the-turtle">
<title
>Die Schildkröte in Bewegung setzen</title>
<para
>Es gibt verschiedene Befehle, um die Schildkröte auf dem Bildschirm zu bewegen.</para>
  
<sect3 id="forward">
  <title
>vorwärts (vw)</title>
  <variablelist>
    <varlistentry
> 
      <term
>vorwärts</term>
      <listitem
><para
><screen
>vorwärts X</screen>
<userinput
>vorwärts</userinput
> bewegt die Schildkröte um einen Betrag von X Pixeln vorwärts. Wenn der Stift unten ist, zeichnet die Schildkröte eine Linie. <userinput
>vorwärts</userinput
> kann als <userinput
>vw</userinput
> abgekürzt werden.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="backward">
  <title
>rückwärts (rw)</title>
  <variablelist>
    <varlistentry
>  
      <term
>rückwärts</term>
      <listitem
><para
><screen
>rückwärts X</screen>
<userinput
>rückwärts</userinput
> bewegt die Schildkröte um einen Betrag von X Pixeln zurück. Wenn der Stift unten ist, zeichnet die Schildkröte eine Linie. <userinput
>rückwärts</userinput
> kann als <userinput
>rw</userinput
> abgekürzt werden.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="turnleft">
  <title
>nachlinks (nl)</title>
  <variablelist>
    <varlistentry
> 
      <term
>nachlinks</term>
      <listitem
><para
><screen
>nachlinks X</screen>
<userinput
>nachlinks</userinput
> dreht die Schildkröte um einen Betrag von X Grad nach links. <userinput
>nachlinks</userinput
> kann als <userinput
>nl</userinput
> abgekürzt werden.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="turnright">
  <title
>nachrechts (nr)</title>
  <variablelist>
    <varlistentry
> 
      <term
>nachrechts</term>
      <listitem
><para
><screen
>nachrechts X</screen>
<userinput
>nachrechts</userinput
> dreht die Schildkröte um einen Betrag von X Grad nach rechts. <userinput
>nachrechts</userinput
> kann als <userinput
>nr</userinput
> abgekürzt werden.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="direction">
  <title
>richtung (rtg)</title>
  <variablelist>
    <varlistentry
> 
      <term
>richtung</term>
      <listitem
><para
><screen
>richtung X</screen>
<userinput
>richtung</userinput
> setzt die Bewegungsrichtung der Schildkröte auf X Grad gerechnet von Null, unabhängig von der vorherigen Bewegungsrichtung der Schildkröte. <userinput
>richtung</userinput
> kann als <userinput
>rtg</userinput
> abgekürzt werden.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="center">
  <title
>indiemitte</title>
  <variablelist>
    <varlistentry
> 
      <term
>indiemitte</term>
      <listitem
><para
><screen
>indiemitte</screen>
<userinput
>indiemitte</userinput
> bewegt die Schildkröte in die Mitte der Zeichenfläche.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="go">
  <title
>gehe</title>
  <variablelist>
    <varlistentry
> 
      <term
>gehe</term>
      <listitem
><para
><screen
>gehe X,Y</screen>
<userinput
>gehe</userinput
> bewegt die Schildkröte an eine bestimmten Stelle auf der Zeichenfläche. Dieser Ort ist X <glossterm linkend="pixels"
>Pixel</glossterm
> vom linken Rand und Y <glossterm linkend="pixels"
>Pixel</glossterm
> vom oberen Rand der Zeichenfläche entfernt. Mit dem Befehl <userinput
>gehe</userinput
> zeichnet die Schildkröte keine Linie. </para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="gox">
  <title
>gehex</title>
  <variablelist>
    <varlistentry
> 
      <term
>gehex</term>
      <listitem
><para
><screen
>gehex X</screen>
Mit dem Befehl <userinput
>gehex</userinput
> bewegt sich die Schildkröte auf X <glossterm linkend="pixels"
>Pixel</glossterm
> vom linken Rand der Zeichenfläche, bleibt dabei aber auf gleicher Höhe.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="goy">
  <title
>gehey</title>
  <variablelist>
    <varlistentry
> 
      <term
>gehey</term>
      <listitem
><para
><screen
>gehey Y</screen>
Mit dem Befehl <userinput
>gehey</userinput
> bewegt sich die Schildkröte auf Y <glossterm linkend="pixels"
>Pixel</glossterm
> vom oberen Rand der Zeichenfläche, bleibt dabei aber auf gleicher Entfernung vom linken Rand der Zeichenfläche.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="pen">
<title
>Die Schildkröte kann zeichnen</title>
<para
>Die Schildkröte kann mit einem Stift Linien zeichnen, wenn sie sich bewegt. Um diesen Stift zu kontrollieren, gibt es einige Befehle, die diesem Abschnitt beschrieben werden.</para>
<sect3 id="penup">
  <title
>stifthoch (sth)</title>
  <variablelist>
    <varlistentry
> 
      <term
>stifthoch</term>
      <listitem
><para
><screen
>stifthoch</screen>
<userinput
>stifthoch</userinput
> hebt den Stift von der Zeichenfläche. Wenn der Zeichenstift <quote
>hoch</quote
> ist, zeichnet die Schildkröte bei ihrer Bewegung keine Linie. Siehe auch <userinput
>stiftrunter</userinput
>. <userinput
>stifthoch</userinput
> kann als <userinput
>sth</userinput
> abgekürzt werden.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="pendown">
  <title
>stiftrunter (str)</title>
  <variablelist>
    <varlistentry
> 
      <term
>stiftrunter</term>
      <listitem
><para
><screen
>stiftrunter</screen>
<userinput
>stiftrunter</userinput
> drückt den Stift auf die Zeichenfläche. Wenn der Zeichenstift nach <quote
>unten</quote
> gesetzt ist, zeichnet die Schildkröte eine Linie bei ihrer Bewegung. Siehe auch <userinput
>stifthoch</userinput
>. <userinput
>stiftrunter</userinput
> kann als <userinput
>str</userinput
> abgekürzt werden.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="setpenwidth">
  <title
>stiftbreite (stbr)</title>
  <variablelist>
    <varlistentry
> 
      <term
>stiftbreite</term>
      <listitem
><para
><screen
>stiftbreite X</screen>
<userinput
>stiftbreite</userinput
> setzt die Stiftbreite (die Linienbreite) auf X <glossterm linkend="pixels"
>Pixel</glossterm
>. <userinput
>stiftbreite</userinput
> kann als <userinput
>stbr</userinput
> abgekürzt werden.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="setfgcolor">
  <title
>stiftfarbe (stf)</title>
  <variablelist>
    <varlistentry
> 
      <term
>stiftfarbe</term>
      <listitem
><para
><screen
>stiftfarbe R,G,B</screen>
<userinput
>stiftfarbe</userinput
> setzt die Farbe für den Zeichenstift. <userinput
>stiftfarbe</userinput
> braucht eine <glossterm linkend="rgb"
>RGB-Kombination</glossterm
> als Parameter. <userinput
>stiftfarbe</userinput
> kann als <userinput
>stf</userinput
> abgekürzt werden.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="canvas">
<title
>Befehle für die Zeichenfläche</title>
<para
>Es gibt mehrere Befehle für die Zeichenfläche.</para>
<sect3 id="resizecanvas">
  <title
>papiergröße (pg)</title>
  <variablelist>
    <varlistentry>
      <term
>papiergröße</term>
      <listitem
><para
><screen
>papiergröße X,Y</screen>
Mit dem Befehl <userinput
>papiergröße</userinput
> stellen Sie die Größe der Zeichenfläche ein. Als Parameter sind X und Y erforderlich, dabei ist X die neue Breite in <glossterm linkend="pixels"
>Pixeln</glossterm
> und Y die neue Höhe der Zeichenfläche in <glossterm linkend="pixels"
>Pixeln</glossterm
>. <userinput
>papiergröße</userinput
> kann als <userinput
>pg</userinput
> abgekürzt werden.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="setbgcolor">
  <title
>papierfarbe (pf)</title>
  <variablelist>
    <varlistentry
> 
      <term
>papierfarbe</term>
      <listitem
><para
><screen
>papierfarbe R,G,B</screen>
<userinput
>papierfarbe</userinput
> setzt die Farbe der Zeichenfläche. <userinput
>papierfarbe</userinput
> braucht eine <glossterm linkend="rgb"
> RGB-Kombination</glossterm
> als Parameter. <userinput
>papierfarbe</userinput
> kann als <userinput
>pf</userinput
> abgekürzt werden.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="wrapon">
  <title
>umbruchan</title>
  <variablelist>
    <varlistentry
> 
      <term
>umbruchan</term>
      <listitem
><para
><screen
>umbruchan</screen>
Mit dem Befehl <userinput
>umbruchan</userinput
> schalten Sie für die Zeichenfläche den <glossterm linkend="wrapping"
>Umbruch</glossterm
> <quote
>an</quote
>. Im Glossar finden Sie mehr über die Bedeutung von <glossterm linkend="wrapping"
>Umbruch</glossterm
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="wrapoff">
  <title
>umbruchaus</title>
  <variablelist>
    <varlistentry
> 
      <term
>umbruchaus</term>
      <listitem
><para
><screen
>umbruchaus</screen>
Mit dem Befehl <userinput
>umbruchaus</userinput
> schalten Sie für die Zeichenfläche den <glossterm linkend="wrapping"
>Umbruch</glossterm
> <quote
>aus</quote
>. Das kann dazu führen, dass sich die Schildkröte über den Rand der Zeichenfläche hinausbewegt und <quote
>verloren</quote
> geht.Im Glossar finden Sie mehr über die Bedeutung von <glossterm linkend="wrapping"
>Umbruch</glossterm
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="clean">
<title
>Befehle um aufzuräumen</title>
<para
>Es gibt zwei Befehle, um die Zeichenfläche nach einem Fehler wieder aufzuräumen.</para>
<sect3 id="clear">
  <title
>lösche (ls)</title>
  <variablelist>
    <varlistentry
> 
      <term
>lösche</term>
      <listitem
><para
><screen
>lösche</screen>
Mit <userinput
>lösche</userinput
> entfernen Sie alle Zeichnungen von der Zeichenfläche. Alle anderen Einstellungen bleiben erhalten: Die Position und die Bewegungsrichtung der Schildkröte, ob die Schildkröte sichtbar ist und Farbe und Größe der Zeichenfläche. <userinput
>lösche</userinput
> kann als <userinput
>ls</userinput
> abgekürzt werden.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="reset">
  <title
>zurücksetzen</title>
  <variablelist>
    <varlistentry
> 
      <term
>zurücksetzen</term>
      <listitem
><para
><screen
>zurücksetzen</screen>
<userinput
>zurücksetzen</userinput
> räumt gründlicher auf als der Befehl <userinput
>lösche</userinput
>. Nach der Ausführung des Befehls <userinput
>zurücksetzen</userinput
> sind alle Einstellungen wie beim Start von &kturtle;. Die Schildkröte steht mitten auf einer weißen Zeichenfläche und zeichnet die Linien mit schwarzer Farbe.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="sprites">
<title
>Die Schildkröte ist ein Grafiksymbol</title>
<para
>Viele Leute wissen nicht was Grafiksymbole sind, hier eine kurze Erklärung: Grafiksymbole sind kleine Bilder, die auf dem Bildschirm bewegt werden können. (Weitere Informationen finden Sie im Glossar unter <glossterm linkend="sprites"
>Grafiksymbol</glossterm
>). Die Schildkröte ist so ein Grafiksymbol. </para>
<para
>Als nächstes finden Sie eine vollständige Übersicht aller Befehle für das Grafiksymbol.</para>
<para
>[Diese Version von &kturtle; erlaubt noch nicht die Verwendung anderer Grafiksymbole als die Schildkröte. In späteren Versionen können Sie die Schildkröte durch selbst entworfene Symbole ersetzen]</para>
<sect3 id="spriteshow">
  <title
>zeige</title>
  <variablelist>
    <varlistentry
> 
      <term
>zeige (zg)</term>
      <listitem
><para
><screen
>zeige</screen>
<userinput
>zeige</userinput
> zeigt das Symbol der Schildkröte wieder an, wenn es verborgen war. <userinput
>zeige</userinput
> kann als <userinput
>zg</userinput
> abgekürzt werden.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="spritehide">
  <title
>verberge (vg)</title>
  <variablelist>
    <varlistentry
> 
      <term
>verberge</term>
      <listitem
><para
><screen
>verberge</screen>
<userinput
>verberge</userinput
> schaltet das Symbol der Schildkröte aus, wenn sie nicht in Ihre Zeichnung passt. <userinput
>verberge</userinput
> kann als <userinput
>vg</userinput
> abgekürzt werden.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="writing">
<title
>Kann die Schildkröte schreiben?</title>
<para
>Die Antwort lautet <quote
>ja</quote
>. Die Schildkröte kann jeden gewünschten Text schreiben.</para>
<sect3 id="print">
  <title
>drucke</title>
  <variablelist>
    <varlistentry
> 
      <term
>drucke</term>
      <listitem
><para
><screen
>drucke X</screen>
Mit dem Befehl <userinput
>drucke</userinput
> schreibt die Schildkröte Text auf die Zeichenfläche. <userinput
>drucke</userinput
> braucht Zahlen und Zeichenketten als Parameter. Sie können auch mehrere Zahlen und Zeichenketten mit dem Symbol <userinput
>+</userinput
> verbinden, wie das folgende kleine Beispiel zeigt: <screen
>jahr = 2003
autor = "Cies"
drucke autor + " startete das KTurtle Projekt " + jahr + " und arbeitet immer noch gerne daran!"
</screen>
      </para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="fontsize">
  <title
>schriftgröße</title>
  <variablelist>
    <varlistentry
> 
      <term
>schriftgröße</term>
      <listitem
><para
><screen
>schriftgröße X</screen>
<userinput
>schriftgröße</userinput
> setzt die Größe der Schrift, die mit dem Befehl <userinput
>drucke</userinput
> benutzt wird. <userinput
>schriftgröße</userinput
> braucht nur eine Zahl als Parameter. Die Größe der Schrift wird in <glossterm linkend="pixels"
>Pixeln</glossterm
> angegeben.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="random">
<title
>Ein Befehl, um zu würfeln</title>
<para
>Es gibt einen Befehl, mit dem Sie würfeln können, er nennt sich <userinput
>zufall</userinput
> und ist sehr nützlich für einige unerwartete Ergebnisse.</para>
  <variablelist>
    <varlistentry
> 
      <term
>zufall</term>
      <listitem
><para
><screen
>zufall X,Y</screen>
<userinput
>zufall</userinput
> ist ein Befehl, der als Parameter Eingabewerte braucht und einen Wert zurückgibt. Als Eingabe sind zwei Zahlen nötig, die erste (X) bestimmt die Untergrenze, die zweite (Y) die Obergrenze der Ausgabe. Der Rückgabewert ist eine zufällige Zahl größer oder gleich der unteren Grenze und kleiner oder gleich der oberen Grenze. Hier ein kurzes Beispiel: <screen>
wiederhole 400 [
  x = zufall 1,20
  vorwärts x
  nachlinks 10 - x
]
</screen
> Mit dem Befehl <userinput
>zufall</userinput
> können Sie ein wenig Chaos in Ihr Programm einfügen. </para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="dialogs">
<title
>Eingaben und Nachrichten mit Dialogen</title>
<para
>Ein Dialog ist ein kleines Fenster, das Meldungen anzeigt oder Eingaben ermöglicht. &kturtle; hat zwei Befehle für Dialoge: <userinput
>nachricht</userinput
> und <userinput
>eingabefenster</userinput
></para>
<sect3 id="message">
  <title
>nachricht</title>
  <variablelist>
    <varlistentry
> 
      <term
>nachricht</term>
      <listitem
><para
><screen
>nachricht X</screen>
Der Befehl <userinput
>nachricht</userinput
> braucht eine <link linkend="string" 
>Zeichenkette</link
> als Eingabewert. Es öffnet sich ein Dialog und der Text der <userinput
>Zeichenkette</userinput
> wird angezeigt. <screen
>nachricht "Cies startete das KTurtle Projekt 2003 und arbeitet immer noch gerne daran!"
</screen>
      </para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="inputwindow">
  <title
>eingabefenster</title>
  <variablelist>
    <varlistentry
> 
      <term
>eingabefenster</term>
      <listitem
><para
><screen
>eingabefenster X</screen>
<userinput
>eingabefenster</userinput
> braucht eine <link linkend="string"
>Zeichenkette</link
> als Eingabewert. Es öffnet sich ein Dialog und der Text der <userinput
>Zeichenkette</userinput
> wird angezeigt, genau wie bei <link linkend="message"
>nachricht</link
>, aber zusätzlich erscheint noch ein Eingabefeld. In dieses Feld können Sie eine <link linkend="number"
>Zahl</link
> oder eine <link linkend="string"
>Zeichenkette</link
> eingeben, die in einem <link linkend="containers"
>Container</link
> gespeichert werden  können. Zum Beispiel <screen>
ein = eingabefenster "Wie alt sind Sie?"
aus = 2003-ein
drucke "Im Jahr 2003 waren Sie " + aus + " Jahre alt."
</screen
> Wenn Sie den Eingabedialog abbrechen oder keine Zeichen eingeben, hat der <link linkend="containers"
>Container</link
> keinen Inhalt.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

</sect1>



<sect1 id="containers">
<title
>Container</title>
<para
>Container sind Zeichen oder Worte, die vom Programmierer benutzt werden können, um Zahlen oder Text zu speichern. Container für Zahlen werden <link linkend="variables"
>Variablen</link
> und Container für Text werden <link linkend="strings"
>Zeichenketten</link
> genannt.</para>

<para
>Container haben als Standard keinen Wert. Ein Beispiel: <screen>
drucke N
</screen
> Dieser Befehl schreibt nichts. Verwenden Sie in <link linkend="math"
>mathematischen Berechnungen</link
> leere Container, dann erhalten Sie Fehler. </para>

<sect2 id="variables">
<title
>Variablen: Container für Zahlen</title>
<para
>Beginnen wir mit einem Beispiel: <screen>
x = 3
drucke x
</screen
> In der ersten Zeile wird der Buchstabe <userinput
>x</userinput
> als Variable (Container für Zahlen) eingeführt. Der Wert wird auf 3 gesetzt. In der zweiten Zeile wird dieser Wert ausgegeben.</para>
<para
>Wenn Sie ein <quote
>x</quote
> ausgeben wollen, müssen Sie das auch so schreiben <screen
>drucke "x"
</screen>
</para>
<para
>Das war einfach, jetzt ein schwierigeres Beispiel:<screen>
A = 2004
B = 25
C = A + B

# der nächste Befehl druckt "2029"
drucke C
rückwärts 30
# der nächste Befehl druckt "2004 plus 25"
drucke A + " plus " + B
rückwärts 30
# der nächste Befehl druckt "1979"
drucke A - B
</screen
> In den ersten zwei Zeilen wird der Wert der Variablen <userinput
>A</userinput
> und <userinput
>B</userinput
> auf 2004 und 5 gesetzt. In der dritten Zeile erhält die Variable <userinput
>C</userinput
> den Wert <userinput
>A + B</userinput
>, nämlich 2029. Der Rest des Beispiels besteht aus 3 <userinput
>drucke</userinput
> Befehlen mit dem Befehl <userinput
>rückwärts 30</userinput
> dazwischen. <userinput
>rückwärts 30</userinput
> ist erforderlich, um jede Ausgabe auf einer neuen Zeile zu schreiben. Dieses Beispiele zeigt auch, dass Variablen in <link linkend="math"
> Berechnungen</link
> benutzt werden können.</para>
</sect2>

<sect2 id="strings">
<title
>Container für Text (Zeichenketten)</title>
<para
>In Programm-Quelltext wird normaler Text üblicherweise von Anführungsstrichen eingeschlossen. Wie Sie schon gesehen haben:<screen>
drucke "Hallo Programmierer!"
</screen
> Der normale Text wird mit Anführungsstrichen abgetrennt. Dieser normale Text nennt sich <link linkend="strings"
>Zeichenkette</link
>.</para>
<para
>Zeichenketten können ebenso wie Zahlen in <link linkend="containers"
> Container </link
>gepackt werden, sie sind den Variablen sehr ähnlich. Der größte Unterschied liegt darin, das Zeichenketten Text anstatt Zahlen enthalten. Deshalb können sie nicht in <link linkend="math"
>mathematischen Berechnungen</link
> und <link linkend="questions"
>Vergleichen</link
> benutzt  werden. Ein Beispiel für Zeichenketten: <screen>
x = "Hallo "
Name = eingabefenster "Bitte geben Sie Ihren Namen ein ..."
drucke x + Name + ", wie gehts?"
</screen
> In der ersten Zeile erhält <userinput
>x</userinput
> den Wert <quote
>Hallo</quote
>. In der zweiten Zeile erhält die Zeichenkette <userinput
>Name</userinput
> den Rückgabewert des Befehls <userinput
>eingabefenster</userinput
>. In der dritten Zeile druckt das Programm drei Zeichenketten zusammen auf der Zeichenfläche.</para>
<para
>Dieses Programm fragt nach Ihrem Namen. Wenn Sie zum Beispiel den Namen <quote
>Paul</quote
> eingeben, schreibt das Programm <quote
>Hallo Paul, wie gehts</quote
>. Das Pluszeichen (+) ist das einzige mathematische Symbol, dass auch auf Zeichenketten angewendet werden kann.</para>
</sect2>
</sect1>

<sect1 id="math">
<title
>Kann die Schildkröte rechnen?</title>
<para
>Klar, &kturtle; kann für Sie rechnen. Sie können addieren (+), subtrahieren (-), multiplizieren (*) und dividieren (/). Im folgenden Beispiel werden alle Funktionen benutzt :<screen>
a = 20 - 5
b = 15 * 2
c = 30 / 30
d = 1 + 1
drucke "a: "+a+", b: "+b+", c: "+c+", d: "+d 
</screen
> Wissen Sie, welchen Wert a, b, c und d haben? Beachten Sie den Gebrauch des <link linkend="assignment"
>Zuweisungszeichens </link
><userinput
>=</userinput
>.</para>
<para
>Für eine einfache Berechnung geben Sie zum Beispiel folgendes ein: <screen
>drucke 2004-12
</screen
></para>
<para
>Nun ein Beispiel mit Klammern: <screen>
drucke ( ( 20 - 5 ) * 2 / 30 ) + 1
</screen
> Der Ausdruck in Klammern wird zuerst berechnet. In diesen Beispiel wird also 20-5 berechnet, dann mit 2 multipliziert, durch 30 dividiert und dann 1 addiert (das ergibt 2).</para>
</sect1>

<sect1 id="questions">
<title
>Fragen und Antworten ...</title>
<para
>Im nächsten Abschnitt wird die <link linkend="controlling-execution"
>bedingte Ausführung </link
> mit den Befehlen <link linkend="if"
> <userinput
>wenn</userinput
></link
> und <link linkend="while"
><userinput
>solange</userinput
></link
> erklärt. In diesem Abschnitt werden die Vergleichsoperatoren am Beispiel von <userinput
>wenn</userinput
> erklärt.</para>
<sect2 id="q">
<title
>Vergleichsoperatoren</title>
<para
>Ein einfaches Beispiel für einen Vergleich: <screen>
x = 6
wenn x &gt; 5 [
  drucke "Hallo"
]
</screen
> In diesem Beispiel lautet der Vergleich: ist <userinput
>x &gt; 5</userinput
>. Wenn das Ergebnis diese Vergleichs <quote
>wahr</quote
> ist, wird der Quelltext zwischen den Klammern ausgeführt. Vergleiche sind ein wichtiger Bestandteil der Programmierung und werden oft zusammen mit <link linkend="controlling-execution"
>Befehlen zur bedingten Ausführung</link
> wie <link linkend="if"
><userinput
>wenn</userinput
></link
> benutzt. Alle Zahlen und <link linkend="variables"
>Variablen</link
> (Zahlencontainer) können in Vergleichen benutzt werden.</para>
<para
>Hier sind alle Vergleichsoperatoren, die Sie anwenden können: <table>
<title
>Vergleichsoperatoren</title>
<tgroup cols="3">
<tbody>
<row>
<entry
><userinput
>a == b</userinput
></entry>
<entry
>ist gleich</entry>
<entry
>Das Ergebnis ist <quote
>wahr</quote
>, wenn <userinput
>a</userinput
> gleich <userinput
>b</userinput
> ist</entry>
</row>
<row>
<entry
><userinput
>a != b</userinput
></entry>
<entry
>nicht gleich</entry>
<entry
>Das Ergebnis ist <quote
>wahr</quote
>, wenn <userinput
>a</userinput
> nicht gleich <userinput
>b</userinput
> ist</entry>
</row>
<row>
<entry
><userinput
>a &gt; b</userinput
></entry>
<entry
>größer als</entry>
<entry
>Das Ergebnis ist <quote
>wahr</quote
>, wenn <userinput
>a</userinput
> größer als <userinput
>b</userinput
> ist</entry>
</row>
<row>
<entry
><userinput
>a &lt; b</userinput
></entry>
<entry
>kleiner als</entry>
<entry
>Das Ergebnis ist <quote
>wahr</quote
>, wenn <userinput
>a</userinput
> kleiner als <userinput
>b</userinput
> ist</entry>
</row>
<row>
<entry
><userinput
>a &gt;= b</userinput
></entry>
<entry
>gleich oder größer als</entry>
<entry
>Das Ergebnis ist <quote
>wahr</quote
>, wenn <userinput
>a</userinput
> größer oder gleich <userinput
>b</userinput
> ist</entry>
</row>
<row>
<entry
><userinput
>a &lt;= b</userinput
></entry>
<entry
>kleiner oder gleich</entry>
<entry
>Das Ergebnis ist <quote
>wahr</quote
>, wenn <userinput
>a</userinput
> kleiner oder gleich <userinput
>b</userinput
> ist</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
<para
>Vergleichsoperatoren werden im <link linkend="the-code-editor"
>Quelltexteditor</link
> hellblau <glossterm
>hervorgehoben</glossterm
>.</para
> 
</sect2>

<sect2 id="question-glue">
<title
>Verknüpfungsoperatoren</title>
<para
>Vergleiche können auch miteinander verbunden werden durch Verknüpfungsoperatoren, damit entsteht ein zusammengesetzter Vergleich. <screen>
a = 1
b = 5
wenn (a &lt; 5) und (b == 5) [
  drucke "Hallo"
]
</screen
> In diesem Beispiel wird der Verknüpfungsoperator <userinput
>und</userinput
> benutzt, um zwei Vergleiche (<userinput
>a &lt; 5</userinput
>, <userinput
>b == 5</userinput
>) zu verbinden. Wenn eine Seite des <userinput
>und</userinput
> <quote
>falsch</quote
> ist, ist das Ergebnis des gesamten Vergleichs auch <quote
>falsch</quote
>, da mit der Verknüpfung <userinput
>und</userinput
> beide Seiten <quote
>wahr </quote
> sein müssen, um als Ergebnis <quote
>wahr</quote
> zu ergeben. Vergessen Sie nicht die Klammern um die Vergleiche.</para>

<para
>Dies ist ein sehr schematischer Überblick, ein genauere Erklärung folgt weiter unten: <table>
<title
>Verknüpfungsoperatoren</title>
<tgroup cols="2">
<tbody>
<row>
<entry
><userinput
>und</userinput
></entry>
<entry
>beide Seiten müssen 'wahr' sein, um als Ergebnis 'wahr' zurückzugeben</entry>
</row>
<row>
<entry
><userinput
>oder</userinput
></entry>
<entry
>wenn eine Seite 'wahr' ist, dann ist auch das Ergebnis 'wahr'</entry>
</row>
<row>
<entry
><userinput
>nicht</userinput
></entry>
<entry
>Sonderfall: arbeitet nur mit einem Wert! Ändert 'wahr' in 'falsch' und 'falsch' in 'wahr'.</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
<para
>Verknüpfungsoperatoren werden im <link linkend="the-code-editor"
>Quelltexteditor</link
> violett <glossterm
>hervorgehoben</glossterm
>.</para>

<sect3 id="and">
<title
>und</title>
<para
>Wenn zwei Vergleiche mit <userinput
>und</userinput
> verknüpft werden, müssen beide Seiten des <userinput
>und</userinput
> 'wahr' sein, damit das Ergebnis auch 'wahr' ist. Ein Beispiel: <screen>
a = 1
b = 5
wenn ((a &lt; 10) und (b == 5)) und (a &lt; b) [
  drucke "Hallo"
]
</screen
> In diesem Beispiel sehen Sie eine verknüpften Vergleich, der wieder mit einem anderen Vergleich verknüpft wird.</para>
</sect3>

<sect3 id="or">
<title
>oder</title>
<para
>Wenn einer von zwei Vergleiche mit <userinput
>oder</userinput
> verknüpft werden, muss eine Seite des <userinput
>oder</userinput
> 'wahr' sein, damit das Ergebnis auch 'wahr' ist. Ein Beispiel: <screen>
a = 1
b = 5
wenn ((a &lt; 10) oder (b == 10)) oder (a ==0) [
  drucke "Hallo"
]
</screen
> In diesem Beispiel sehen Sie eine verknüpften Vergleich, der wieder mit einem anderen Vergleich verknüpft wird.</para>
</sect3>

<sect3 id="not">
<title
>nicht</title>
<para
><userinput
>nicht</userinput
> ist ein besonderer Verknüpfungsoperator, weil er nur mit einem Wert benutzt werden kann. <userinput
>nicht</userinput
> ändert 'wahr' in 'falsch' und 'falsch' in 'wahr'. Ein Beispiel:<screen>
a = 1
b = 5
wenn nicht ((a &lt; 10) und (b == 5)) [
  drucke "Hallo"
]
sonst
[
  drucke "nicht Hallo ;)"
]
</screen
> In diesem Beispiel ist der verknüpfte Vergleich 'wahr', aber das <userinput
>nicht</userinput
> ändert das zu 'falsch'. So wird dann <userinput
>"nicht Hallo ;-)"</userinput
> auf die <link linkend="the-canvas"
>Zeichenfläche</link
> geschrieben.</para>
</sect3>

</sect2>

</sect1>

<sect1 id="controlling-execution">
<title
>Kontrolle der Programmausführung</title>
<para
>Mit den Befehlen zur Ausführungskontrolle können Sie &mdash; wie der Name schon sagt &mdash; den Ablauf der Ausführung zu kontrollieren.</para>
<para
>Befehle zur Ausführungskontrolle werden <glossterm
>hervorgehoben</glossterm
> durch eine dunkelgrüne, fettgedruckte Schrift. Die meistens zusammen mit der Ausführungskontrolle verwendeten eckigen Klammern werden durch hellgrüne Farbe <glossterm
>hervorgehoben</glossterm
>.</para>

<sect2 id="wait">
<title
>Lass die Schildkröte warten</title>
<para
>Wenn Sie schon in &kturtle; programmiert haben, ist Ihnen bestimmt aufgefallen,  dass sich die Schildkröte beim Zeichnen sehr schnell bewegt. Dieser Befehl lässt die Schildkröte eine bestimmte Zeit warten.</para>
  <variablelist>
    <varlistentry>
      <term
>warte</term>
      <listitem
><para
><screen
>warte X</screen>
Mit <userinput
> warte</userinput
> wartet die Schildkröte X Sekunden. <screen>
wiederhole 36 [
  vorwärts 5
  nachrechts 10
  warte 0.5
]
</screen
> Dieser Quelltext zeichnet einen Kreis, aber die Schildkröte wartet eine halbe Sekunde nach jedem Schritt. Dies vermittelt den Eindruck einer Schildkröte, die sich langsam bewegt.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="if">
<title
>Ausführungskontrolle mit "wenn"</title>
  <variablelist>
    <varlistentry>
      <term
>wenn</term>
      <listitem
><para
><screen
>wenn <link linkend="questions"
>Vergleich</link
> [...]</screen>
Der Quelltext zwischen den Klammern wird nur dann ausgeführt, <userinput
>wenn</userinput
> das Ergebnis des <link linkend="questions"
>Vergleichs</link
> <quote
>wahr</quote
> ist. Weitere Informationen finden Sie unter <link linkend="questions"
>Vergleichsoperatoren</link
> in diesem <link linkend="questions"
>Abschnitt</link
>. <screen>
x = 6
wenn x &gt; 5 [
  drucke "x ist größer als fünf!"
]
</screen
> In der ersten Zeilen weisen Sie <userinput
>x</userinput
> den Wert 6 zu. In der zweiten Zeile wird der <link linkend="questions"
>Vergleich</link
> <userinput
>x &gt; 5</userinput
> ausgeführt. Da das Ergebnis <quote
>wahr</quote
> ist, lässt die Ausführungskontrolle <userinput
>wenn</userinput
> den Quelltext zwischen den Klammern ausführen.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="while">
<title
>Die "solange"-Schleife</title>
  <variablelist>
    <varlistentry>
      <term
>solange</term>
      <listitem
><para
><screen
>solange <link linkend="questions"
>Vergleich</link
> [...]</screen>
Die Ausführungskontrolle mit <userinput
>solange</userinput
> ist dem <link linkend="if"
><userinput
>wenn</userinput
></link
> sehr ähnlich. Der Unterschied liegt darin, dass <userinput
>solange</userinput
> die Ausführung des Quelltext zwischen den Klammern (in einer Schleife) solange wiederholt, bis das Ergebnis des <link linkend="questions"
>Vergleichs</link
> <quote
>falsch</quote
> ist: <screen>
x = 1
solange x &lt; 5 [
  vorwärts 10
  warte 1
  x = x + 1
]
</screen
> In der ersten Zeile wird <userinput
>x</userinput
> der Wert 1 zugewiesen. In der zweiten Zeile wird der <link linkend="questions"
>Vergleich</link
> <userinput
>x &lt; 5</userinput
> durchgeführt. Da die Antwort darauf <quote
>wahr</quote
> ist, lässt die Ausführungskontrolle mit <userinput
>solange</userinput
> den Quelltext zwischen den Klammern ausführen, bis der <link linkend="questions"
>Vergleich</link
> <quote
>falsch</quote
> ist. In diesem Beispiel wird der Quelltext viermal ausgeführt, da bei jeder Ausführung der fünften Zeile <userinput
>x</userinput
> um 1 vergrößert wird.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="else">
<title
>Ausführungskontrolle mit "sonst"</title>
  <variablelist>
    <varlistentry>
      <term
>sonst</term>
      <listitem
><para
><screen
>wenn Vergleich [...] sonst [...]</screen>
<userinput
>sonst</userinput
> kann zusammen mit der Ausführungskontrolle <link linkend="if"
><userinput
>wenn</userinput
></link
> benutzt werden. Der Quelltext zwischen den Klammern nach <userinput
>sonst</userinput
> wird nur dann ausgeführt, wenn der <link linkend="questions"
>Vergleich</link
> <quote
>falsch</quote
> ergibt: <screen>
zurücksetzen
x = 4
wenn x &gt; 5 [
  drucke "x ist größer als fünf!"
]
sonst
[
  drucke "x ist kleiner als sechs!"
]
</screen
> Der <link linkend="questions"
>Vergleich</link
> überprüft, ob <userinput
>x</userinput
> größer als 5 ist. Da in der ersten Zeile <userinput
>x</userinput
> der Wert 4 zugewiesen wird, ist das Ergebnis <quote
>falsch</quote
>. Das führt dazu, dass der Quelltext zwischen den Klammern nach <userinput
>sonst</userinput
> ausgeführt wird.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="for">
<title
>Die "von"-Schleife, eine zählende Schleife</title>
  <variablelist>
    <varlistentry>
      <term
>von</term>
      <listitem
><para
><screen
>von <userinput
>Anfang</userinput
> bis <userinput
>Ende</userinput
> [ ... ]</screen>
Die <userinput
>von</userinput
>-Schleife ist eine <quote
>zählende Schleife</quote
>, d. h. zählt sie für Sie: <screen>
von x = 1 bis 10 [
  drucke x * 7
  vorwärts 15
]
</screen
> Jedes Mal, wenn der Quelltext zwischen den Klammern ausgeführt wird, vergrößert sich der Wert von <userinput
>x</userinput
> um eins, bis <userinput
>x</userinput
> den Wert 10 erreicht. Der Quelltext zwischen den Klammern druckt den Wert von <userinput
>x</userinput
> multipliziert mit 7. Nach dem Ende dieses Programms sehen Sie das 1x7 auf der Zeichenfläche.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

</sect1>


<sect1 id="learn">
<title
>Schreiben Sie Ihre eigenen Befehle mit <quote
>lerne</quote
></title>
<para
><userinput
>lerne</userinput
> ist ein besonderer Befehl, weil Sie damit Ihre eigenen Befehle erzeugen können. Ihre eigenen Befehle können einen <glossterm linkend="input-output"
>Eingabewert</glossterm
> erfordern und einen <glossterm linkend="input-output"
>Wert</glossterm
> zurückgeben. Dieses Beipiel zeigt, wie Sie einen neuen Befehl schreiben: <screen>
lerne kreis x [
  wiederhole 36 [
    vorwärts x
    nachlinks 10
  ]
]
</screen
> Der neue Befehl hat den Namen <userinput
>kreis</userinput
>. <userinput
>kreis</userinput
> braucht einen <glossterm linkend="input-output"
>Eingabewert</glossterm
>, eine Zahl, um die Größe des Kreises festzulegen. <userinput
>kreis</userinput
> gibt keinen <glossterm linkend="input-output"
>Wert</glossterm
> zurück. <userinput
>kreis</userinput
> kann jetzt wie ein normaler Befehl benutzt werden, wie das folgende Beispiel zeigt: <screen
>lerne kreis X [
  wiederhole 36 [
    vorwärts X
    nachlinks 10
  ]
]

gehe 30,30
kreis 20

gehe 40,40
kreis 50  
</screen>
</para>
<para
>Im nächsten Beispiel wird ein Befehl mit Rückgabewert gezeigt. <screen>
lerne quadriere n [
  r = n * 1
  r = n * n
  zurück r
]
i = eingabefenster "Geben Sie eine Zahl ein und drücken Sie dann OK"
drucke i + " zum Quadrat ist: " + quadriere i
</screen
> In diesem Beispiel wird ein neuer Befehl mit dem Namen <userinput
>quadriere</userinput
> erstellt. Der Eingabewert des Befehls wird mit sich selbst multipliziert und mit dem Befehl <anchor id="return"/><userinput
>zurück</userinput
> zurückgegeben. Der Befehl <userinput
>zurück</userinput
> ermöglicht die Rückgabe des Wertes einer selbst erzeugten Funktion. </para>
</sect1>

</chapter>
