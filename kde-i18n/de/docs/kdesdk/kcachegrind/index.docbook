<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.2-Based Variant V1.1//EN" "dtd/kdex.dtd" [
  <!ENTITY kcachegrind '<application
>KCachegrind</application
>'>
  <!ENTITY cachegrind "<application
>Cachegrind</application
>">
  <!ENTITY valgrind "<application
>Valgrind</application
>">
  <!ENTITY kappname "&kcachegrind;">
  <!ENTITY package "kdesdk">
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % German "INCLUDE">
]>

<!-- ................................................................ -->

<book lang="&language;">

<bookinfo>
<title
>Das &kcachegrind; Handbuch</title>

<authorgroup>
<author
><firstname
>Josef</firstname
> <surname
>Weidendorfer</surname
> <affiliation
> <address
><email
>Josef.Weidendorfer@gmx.de</email
></address>
</affiliation>
</author>
</authorgroup>

<copyright>
<year
>2002</year>
<holder
>Josef Weidendorfer</holder>
</copyright>
<legalnotice
>&FDLNotice;</legalnotice>

<date
>2003-09-18</date>
<releaseinfo
>0.4.3</releaseinfo>

<abstract>
<para
>&kcachegrind; ist eine &kde; Oberfläche für &cachegrind;, ein Teil von&valgrind;. </para>
</abstract>

<keywordset>
<keyword
>KDE</keyword>
<keyword
>kdesdk</keyword>
<keyword
>Cachegrind</keyword>
<keyword
>Valgrind</keyword>
<keyword
>Profiling</keyword>
</keywordset>

</bookinfo>


<chapter id="introduction">
<title
>Einleitung</title>

<para
>Wenn man ein Programm entwickelt, dann ist einer der letzten Schritte es so schnell wie möglich (aber immer noch korrekt!) zu machen. Man will keine Zeit mit der Optimierung selten genutzter Funktionen verschwenden. Deshalb muss man wissen, in welchen Programmteilen dies meiste Zeit verbracht wird. </para>

<para
>Diesen Vorgang nennt man Profiling. Das Programm wird dabei unter Kontrolle eines Profiling Werkzeuges ausgeführt, das ein Ablaufprotokoll erstellt. Nach der Auswertung des Ablaufprotokolls sollte man wissen, wo man optimieren muss. Man prüft den Optimierungserfolg mit einem weiteren Profiling Durchgang. </para>

<para
>Sehr bekannt ist das GCC Profiling Werkzeug <application
>gprof</application
>: Dazu muss man das Programm mit der Option <option
>-pg</option
> kompilieren. Während der Ausführung erstellt das Programm eine Datei <filename
>gmon.out</filename
>, die mittels <command
>gprof</command
> in ein von Menschen lesbares Format umgewandelt werden kann. Der Nachteil dieser Methode ist, dass eine extra Kompilierung zur Erzeugung der vorbereiteten und statisch gelinkten ausführbaren Datei nötig ist. </para>

<para
>Ein weiteres Profiling Werkzeug ist &cachegrind;, ein Teil von &valgrind;. Es benutzt die Prozessor Emulation von &valgrind; um die Datei auszuführen und protokolliert alle Speicherzugriffe im Ablaufprotokoll. Das Programm muss nicht neukompiliert werden. Man kann Shared Libraries und Plugins nutzen. Weiterhin hat der Profiling Vorgang keinen Einfluß auf das als Ergebnis des Profiling Vorgang entstehende Ablaufprotokoll. Das Ablaufprotokoll enthält die Anzahl von Instruktionen sowie Speicherzugriffe und die First/Second Level Cache Misses. Es findet eine Zuordnung auf die entsprechenden Quelltextzeilen und Funktionen des ausgeführten Programmes statt. Ein Nachteil ist die Verlangsamung um den Faktor 50 durch die Prozessor Emulation. </para>

<para
>Ein Patch für die &valgrind; 1.0.x Quellen fügt die Protokollierung der Aufruffolge hinzu, z.B. welche Funktion welche aufgerufen hat und wieviel Ereignisse während der Abarbeitung einer Funktion auftreten. </para>

<para
>&kcachegrind; ist ein Darstellungswerkzeug für das mit &cachegrind; erzeugte Ablaufprotokoll. Man sollte unbedingt die Unterstützung für die Aufruffolge in &cachegrind; hinzufügen, denn &kcachegrind; ist so wesentlich nützlicher. </para>
</chapter>

<chapter id="using-kcachegrind">
<title
>Nutzung von &kcachegrind;</title>

<note>
<para
>Jedes Bildschirmelement in &kcachegrind; verfügt über eine <quote
>Was ist das?</quote
> Hilfe. Möchte man nicht in dieser Dokumentation nachlesen, sollte man diese benutzen! </para>
</note>

<sect1>
<title
>Beispiel zum Schnelleinstieg</title>


<para
>Einfach ausführen!</para>
</sect1>

<sect1 id="features">
<title
>Funktionen von &kcachegrind;</title>

<para
>Unterstützung von: beliebige Ereignisse, Gruppierung von Funktionen</para>
</sect1>

<sect1 id="guidelines">
<title
>Allgemeine Richtlinien</title>

<para
>Effektives Profiling...</para>

</sect1>
<sect1 id="tutorial">
<title
>Tutorial</title>

<para
>Eine Profiling Sitzung mit &kcachegrind;</para>

</sect1>
</chapter>

<chapter id="commands">
<title
>Kommando Referenz</title>

<sect1 id="kcachegrind-mainwindow">
<title
>Hauptfenster &kcachegrind;</title>
<para
></para>

<sect2>
<title
>Das <guimenu
>Datei</guimenu
> Menu</title>
<para>
<variablelist>
<varlistentry>
<term
><menuchoice
><shortcut
> <keycombo
>&Ctrl;<keycap
>N</keycap
></keycombo
> </shortcut
> <guimenu
>Datei</guimenu
> <guimenuitem
>Neu</guimenuitem
> </menuchoice
></term>
<listitem
><para
><action
>Erstellt ein neues Dokument</action
></para
></listitem>
</varlistentry>
<varlistentry>
<term
><menuchoice
><shortcut
> <keycombo
>&Ctrl;<keycap
>S</keycap
></keycombo
> </shortcut
> <guimenu
>Datei</guimenu
> <guimenuitem
>Speichern</guimenuitem
> </menuchoice
></term>
<listitem
><para
><action
>Speichert das Dokument</action
></para
></listitem>
</varlistentry>
<varlistentry>
<term
><menuchoice
><shortcut
> <keycombo
>&Ctrl;<keycap
>Q</keycap
></keycombo
> </shortcut
> <guimenu
>Datei</guimenu
> <guimenuitem
>Beenden</guimenuitem
> </menuchoice
></term>
<listitem
><para
><action
>Beendet</action
> &kcachegrind;</para
></listitem>
</varlistentry>
</variablelist>
</para>

</sect2>

</sect1>
</chapter>

<chapter id="faq">
<title
>Fragen und Antworten</title>
&reporting.bugs; &updating.documentation; <qandaset id="faqlist">
<qandaentry>
<question>
<para
>&kcachegrind; sieht toll aus. Aber ich verstehe es nicht. Wozu ist es nützlich?</para>
</question>
<answer>
<para
>&kcachegrind; ist nützlich für die späte Software Entwicklungs Etappe Profiling. Wenn man keine Anwendungen entwickelt, dann braucht man &kcachegrind; nicht. </para>
</answer>
</qandaentry>
<qandaentry>
<question>
<para
>Ich bekomme Fehler beim Kompilieren. Was ist das Problem?</para>
</question>
<answer>
<para
>Oftmals hat die &Qt; Installation keine &kde; Unterstützung. </para>
</answer>
</qandaentry>
</qandaset>
</chapter>

<chapter id="credits">


<title
>Credits und Lizenz</title>

<para
>&kcachegrind; </para>
<para
>Dank an Julian Seward für seine einzigartige Anwendung &valgrind; und Nicholas Nethercote für den &cachegrind; Zusatz. Ohne diese Programme würde weder der Patch zur Aufruffolge (call tree) für &valgrind; noch <application
>&kcachegrind;</application
> existieren. Viele Ideen für die Benutzeroberfläche stammen ebenfalls von ihnen. </para>
<para
>Dank für die vielen Fehlerberichte/Vorschläge von verschiedenen Nutzern. Zum Schluß noch Dank an <itemizedlist>
<listitem
><para
>&kde;, das wundervolle Framework,</para>
</listitem>
<listitem
><para
>&Qt;, der perfekten Benutzerschnittstellen Werkzeugkasten</para>
</listitem>
<listitem
><para
>&Linux;, das definitive Betriebssystem</para>
</listitem>
</itemizedlist>
</para>
&underFDL; </chapter>

<appendix id="installation">
<title
>Installation</title>

<sect1 id="getting-kcachegrind">
<title
>Bezugsquellen von &kcachegrind;</title>

<para
>Die Homepage von &kcachegrind; findet man unter <ulink url="http://www.weidendorfers.de/kcachegrind"
>http://www.weidendorfers.de/kcachegrind</ulink
>. Dort gibt es weitere Installations- und Kompilierungshinweise. </para>
</sect1>

<sect1 id="requirements">
<title
>Anforderungen</title>

<para
>Um &kcachegrind; erfolgreich einsetzen zu können, benötigt man &kde; 3.x. Um die Ablaufprotokolle zu erzeugen, braucht man &cachegrind;. Um die sehr interessanten Visualisierungsmöglichkeiten von &kcachegrind; ausschöpfen zu können, sollte man den Aufruffolge Patch von der &kcachegrind; Homepage auf die Quellen von &valgrind; anwenden. </para>
</sect1>

<sect1 id="compilation">
<title
>Kompilierung und Installation</title>
&install.compile.documentation; </sect1>

<sect1 id="configuration">
<title
>Einstellung</title>

<para
>Alle Einstellungsmöglichkeiten sind entweder im Einstellungsfenster oder in den Kontextfenster der Graphen zu finden. </para>

</sect1>

</appendix>

&documentation.index;
</book>
<!--
Local Variables:
mode: sgml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:
-->













