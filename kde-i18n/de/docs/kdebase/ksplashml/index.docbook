<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.2-Based Variant V1.1//EN"
"dtd/kdex.dtd" [
  <!ENTITY kappname "&ksplash;">
  <!ENTITY package "kdebase">
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % German "INCLUDE">
]>

<book lang="&language;">

<bookinfo>
<title
>Das Handbuch zu &ksplash;</title>

<authorgroup>
<author
>&Teemu.Rytilahti; &Teemu.Rytilahti.mail; </author>

<othercredit role="developer"
>&Brian.C.Ledbetter; &Brian.C.Ledbetter.mail; </othercredit>

<othercredit role="developer"
>&Ravikiran.Rajagopal; &Ravikiran.Rajagopal.mail; </othercredit>

<othercredit role="translator"
><firstname
>Stephan</firstname
><surname
>Johach</surname
><affiliation
><address
><email
>hunsum@gmx.de</email
></address
></affiliation
><contrib
>Übersetzung</contrib
></othercredit
><othercredit role="translator"
><firstname
>Thomas</firstname
><surname
>Reitelbach</surname
><affiliation
><address
><email
>tr@erdfunkstelle.de</email
></address
></affiliation
><contrib
>Übersetzung</contrib
></othercredit
> 

</authorgroup>

<copyright>
<year
>2003</year>
<holder
>Teemu Rytilahti</holder>
</copyright>
<copyright>
<year
>2003-04</year>
<holder
>Ravikiran Rajagopal</holder>
</copyright>
<legalnotice
>&FDLNotice;</legalnotice>

<date
>2003-01-10</date>
<releaseinfo
>1.01.00</releaseinfo>

<abstract>
<para
>&ksplash; ist ein Begrüßungsbildschirm, der den Fortschritt beim Start einer Anwendung anzeigt.</para>
</abstract>

<keywordset>
<keyword
>KDE</keyword>
<keyword
>kdebase</keyword>
<keyword
>ksplash</keyword>
<keyword
>ksplashml</keyword>
<keyword
>splashscreen</keyword>
<keyword
>eye candy</keyword>
</keywordset>

</bookinfo>

<chapter id="introduction">
<title
>Einleitung</title>

<para
>&ksplash; ist ein netter Begrüßungsbildschirm, der während dem Startvorgang eines Programms angezeigt wird. Falls Sie Fehler finden oder neue Funktionen benötigen, melden Sie diese bitte an die &kde;-Mailinglisten. &ksplash; enthält die folgenden Funktionen: </para>
<simplelist>
<member
>Verschiedene Designs</member>
<member
>Kann mittels Modulen erweitert und angepasst werden</member>
<member
>Kann von jedem DCOP-fähigen Programm genutzt werden</member>
</simplelist>

<para
>Dieses Handbuch zeigt Ihnen, wie Sie ein Design entwerfen können und es mit den derzeit verfügbaren Modulen verwenden. Falls keines der Module Ihren Ansprüchen genügt, können Sie auch lernen, wie &ksplash; angepasst wird. Dazu schreiben Sie ein kleines Programm in C++. </para>
</chapter>

<chapter id="using-themes">
<title
>Designs verwenden</title>

<para
>Um fertige Designs von <ulink url="http://www.kde-look.org"
>KDE-Look</ulink
> zu verwenden, entpacken Sie diese bitte nach <filename
>~/.kde/share/apps/ksplash/Themes/</filename
> oder für die systemweite Verwendung nach <filename
>$<envar
>KDEDIR</envar
>/share/apps/ksplash/Themes/</filename
>.</para>

<para
>Diesen Schritt können Sie natürlich auch einfach über das Kontrollzentrum-Modul <guilabel
>Startbildschirm</guilabel
> unter <guilabel
>Erscheindungsbild</guilabel
> erledigen.</para>

<sect1 id="using-kcontrol-module">
<title
>Verwendung des &kcontrol;-Moduls</title>

<para
>Mit dem &kcontrol;-Modul können Sie &ksplash;-Designs installieren, testen und auch wieder entfernen.</para>

<para
>An der linken Seite des Moduls sehen Sie eine Liste der verfügbaren &ksplash;-Designs. Wenn Sie eines auswählen, wird auf der rechten Seite ein Vorschaubild angezeigt. Wenn Sie sich ein Design ausgesucht haben, das Sie gerne benutzen möchten, dann drücken Sie <guibutton
>Ok</guibutton
> oder <guibutton
>Anwenden</guibutton
>. Wenn Sie <guibutton
>Abbrechen</guibutton
> drücken, wird das Modul geschlossen ohne irgendwelche Änderungen vorzunehmen. Zuguterletzt bewirkt der Knopf <guibutton
>Voreinstellungen</guibutton
>, dass der voreingstellte Startbildschirm aktiviert wird.</para>

<para
>Um ein neues Design zu installieren, drücken Sie bitte auf <guibutton
>Hinzufügen ...</guibutton
> und suchen Sie das heruntergeladene Design heraus. Sie müssen die Design-Datei nicht erst entpacken. Nur das reine Installieren eines Designs aktiviert es noch nicht. Wenn Sie das neu installierte Design auch benutzen möchten, dann wählen Sie es bitte in der linken Liste aus und drücken <guibutton
>Ok</guibutton
> oder <guibutton
>Anwenden</guibutton
>.</para>

<para
>Zwar sehen Sie das Vorschaubild auf der rechten Seite, aber wahrscheinlich möchten Sie auch sehen, wie der Startbildschirm in Aktion aussieht. Sie können den Startbildschirm testen, indem Sie auf den Knopf <guibutton
>Test</guibutton
> drücken.</para>

<para
>Natürlich können Sie nicht benutzte Designs auch wieder entfernen. Wählen Sie das entsprechende Design aus und drücken dann <guibutton
>Entfernen</guibutton
>. Unter Umständen hat allerdings Ihr Benutzerkonto keine ausreichenden Berechtigungen, um ein systemweites Design zu entfernen. Außerdem kann das Design "Standard" nicht entfernt werden.</para>

</sect1>

</chapter>

<chapter id="themes">
<title
>Wie man Designs für &ksplash; erstellt</title>
<sect1 id="themes-general">
<title
>Allgemeines</title>
<para
>Es ist nicht schwer, ein Design für &ksplash; zu erstellen. Wenn Sie ein Design fertiggestellt haben, können Sie es auf <ulink url="http://www.kde-look.org"
>KDE-Look</ulink
> hochladen und somit anderen zur Verfügung stellen.</para>

<sect2 id="theme-syntax">
<title
>Einen Namen für das Design festlegen</title>

<para
>Lassen Sie uns ein Design mit dem Namen <literal
>MeinDesign</literal
> erstellen. Damit &ksplash; Ihr Design finden kann, muss es in einem Ordner mit dem Namen <filename class="directory"
>MeinDesign</filename
> unter <filename class="directory"
>~/.kde/apps/ksplash/Themes/</filename
> gespeichert werden. Der Ordner muss die Datei <filename
>Theme.rc</filename
> enthalten; sie enthält die Einstellungen für Ihre Design. Sie können viele Einstellungen festlegen, &zb; welche Erweiterung Ihr Design verwenden soll. Sie müssen natürlich nicht alle Einstellungen selbst machen, die Voreinstellungen funktionieren meist recht gut. Die grundlegende Syntax für Ihre Einstellungen lautet <literal
>[option] = [wert]</literal
>. Die Definitionen für die möglichen Optionen finden Sie in den folgenden Abschnitten.</para>

<example>
<title
>Eine einfache <filename
>Theme.rc</filename
>-Datei</title>
<programlisting
>[KSplash Theme: MeinDesign]
Name = MeinDesign
Description = Ein Design, das die Erweiterung XpLike benutzt
Version = 1.0
Author = Mein Name &lt;meinname@mail.com&gt;
## Das Darstellungsmodul XpLike verwenden.
Engine = XpLike
Show Icon = false
Welcome Text = KDE wird gestartet
</programlisting>
</example>

<para
>Nachdem Sie den Namen, die Beschreibung und den Autor des Designs festgelegt haben, sollten Sie als nächstes ein Darstellungsmodul wählen. Dann können Sie die verschiedenen Einstellungen für das Modul einrichten.</para>

<important>
<para
>Stellen Sie bitte sicher, dass der Ordnername für das Design (<filename class="directory"
>~/.kde/apps/ksplash/Themes/MeinDesign</filename
>) und der Bezeichner des Designs (<literal
>[KSplash Theme: MyCoolTheme]</literal
>) in <filename
>Theme.rc</filename
> identisch sind. Ansonsten wird &ksplash; Ihr Design nicht anzeigen.</para>
</important>

</sect2>

<sect2 id="theme-files">
<title
>Hintergrundbilder</title>

<para
>Beim Start versucht &ksplash;, ein Hintergrundbild für die aktuelle Bildschirmauflösung zu finden (wenn das Darstellungsmodul eines verwendet). Das Hintergrundbild muss mit diesem Namensschema gespeichert werden: <filename
>Background-<replaceable
>BBBxHHH</replaceable
>.png</filename
>.</para>

<para
>Sie könnten &zb; eine Datei mit dem Namen <filename
>Background-1024x768.png</filename
> verwenden. Wenn kein Hintergrundbild für Ihre Auflösung auffindbar ist, dann wird das Originalbild <filename
>Background.png</filename
> bzw. die in <filename
>Theme.rc</filename
> angegebene Datei in der Größe angepasst. Das Anpassen der Dateigröße nimmt natürlich ein paar Sekunden Zeit in Anspruch, daher sollten Sie zumindest Hintergrundbilder in den Auflösungen 1280x1024, 1024x768 und 800x600 zur Verfügung stellen.</para>
</sect2>
</sect1>

<sect1 id="theme-engines">
<title
>Optionen für die Darstellungsmodule</title>

<sect2 id="default-themes">
<title
>Standard-Design</title>
<table>
<title
>Optionen für das Standard-Design</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Erklärung</entry>
</row>
<!-- Statusbar -->
<row>
<entry
>Always Show Progress</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob der Fortschritt des Startvorgangs angezeigt werden soll. Voreinstellung ist true.</entry>
</row>
<row>
<entry
>Label Foreground</entry>
<entry
>[farbe]</entry>
<entry
>Legt fest, welche Farbe für den Text in der Statusleiste benutzt werden soll. Voreinstellung ist #FFFFFF (weiß).</entry>
</row>
<!-- Misc. things -->
<row>
<entry
>Icons Flashing</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob Symbole <quote
>blinken</quote
> sollen oder nicht. Voreinstellung ist true.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="standard-themes">
<title
>Standard-Design</title>
<table>
<title
>Optionen für das Standard-Design</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Erklärung</entry>
</row>
<!-- Statusbar -->
<row>
<entry
>Statusbar Position</entry>
<entry
>[top/bottom]</entry>
<entry
>Legt die Position der Statusleiste fest. Voreinstellung ist bottom.</entry>
</row>
<row>
<entry
>Statusbar Visible</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob eine Statusleiste angezeigt werden soll. Voreinstellung ist true.</entry>
</row>
<row>
<entry
>Progress Visible</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob der Fortschritt des Startvorgangs angezeigt werden soll. Voreinstellung ist true.</entry>
</row>
<!-- Fonts -->
<row>
<entry
>Statusbar Font</entry>
<entry
>[schriftname]</entry>
<entry
>Die in der Statusleiste benutzte Schriftart. Voreinstellung ist Helvetica.</entry>
</row>
<row>
<entry
>Statusbar Font Size</entry>
<entry
>[größe]</entry>
<entry
>Die Schriftgröße in der Statusleiste. Voreinstellung ist 16.</entry>
</row>
<row>
<entry
>Statusbar Font Bold</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob die Schrift in der Statusleiste fett sein soll. Voreinstellung ist true.</entry>
</row>
<row>
<entry
>Statusbar Font Italic</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob die Schrift in der Statusleiste kursiv sein soll. Voreinstellung ist false.</entry>
</row>
<!-- Misc. things -->
<row>
<entry
>Statusbar Foreground</entry>
<entry
>[farbe]</entry>
<entry
>Die Vordergrundfarbe der Statusleiste. Voreinstellung ist weiß.</entry>
</row>
<row>
<entry
>Statusbar Background</entry>
<entry
>[farbe]</entry>
<entry
>Die Hintergrundfarbe der Statusleiste. Voreinstellung ist schwarz.</entry>
</row>
<row>
<entry
>Statusbar Icon</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob die Statusleiste ein Symbol anzeigen soll.</entry>
</row>
<row>
<entry
>Icons Visible</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob Symbole angezeigt werden sollen. Voreinstellung ist true.</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob die Symbole hüpfen sollen. Voreinstellung ist true.</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[0-3,10-13]</entry>
<entry
>Die Position, an der die Symbole angezeigt werden. Voreinstellung ist unten-links.</entry>
</row>
<row>
<entry
>Splash Screen</entry>
<entry
>[name]</entry>
<entry
>Legt das angezeigte Startbild fest.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="redmond-themes">
<title
>Redmond-Design</title>
<table>
<title
>Optionen für das Redmond-Design</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Erklärung</entry>
</row>
<!-- Main elements -->
<row>
<entry
>Background Image</entry>
<entry
>[dateiname]</entry>
<entry
>Legt das zu verwendende benutzerdefiniertes Hintergrundbild fest.</entry>
</row>
<row>
<entry
>User Icon</entry>
<entry
>[symbolname]</entry>
<entry
>Legt den Namen des Standard-Symbols für Benutzer fest. Voreinstellung ist <constant
>go</constant
>.</entry>
</row>
<row>
<entry
>Welcome Text</entry>
<entry
>[text]</entry>
<entry
>Der im Startbildschirm angezeigte Willkommenstext. Voreinstellung ist "Willkommen".</entry>
</row>
<row>
<entry
>Username Text</entry>
<entry
>[text]</entry>
<entry
>Dieser Text wird anstelle des Benutzernamens angezeigt.</entry>
</row>
<!-- Positioning elements -->
<row>
<entry
>Welcome Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Die Bildschirmposition, an der der Willkommenstext angezeigt wird.</entry>
</row>
<row>
<entry
>Username Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Die Bildschirmposition, an der der Benutzername angezeigt wird.</entry>
</row>
<row>
<entry
>Action Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Die Bildschirmposition des Textes, der die derzeit laufende Aktivität anzeigt.</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[x,y]</entry>
<entry
>Die Bildschirmposition, an der das Benutzersymbol angezeigt wird.</entry>
</row>
<!-- Show to show.. -->
<row>
<entry
>Show Welcome Text</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob der Willkommenstext angezeigt wird oder nicht. Voreinstellung ist true.</entry>
</row>
<row>
<entry
>Show Welcome Shadow</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob der Willkommenstext einen Schatten werfen soll. Voreinstellung ist true.</entry>
</row>
<row>
<entry
>Show Username</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob der Benutzername angezeigt werden soll. Voreinstellung ist true.</entry>
</row>
<row>
<entry
>Show Action</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob die derzeit laufende Aktivität angezeigt werden soll. Voreinstellung ist true.</entry>
</row>
<row>
<entry
>Show Icon</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob das Symbol angezeigt werden soll. Voreinstellung ist true.</entry>
</row>
<row>
<entry
>Use KDM User Icon</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob das Anmeldebild von KDM benutzt werden soll. Voreinstellung ist true.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="macx-themes">
<title
>MacX-Design</title>
<table>
<title
>Optionen für das MacX-Design</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Erklärung</entry>
</row>
<row>
<entry
>Icon Size Minimum</entry>
<entry
>[größe]</entry>
<entry
>Legt die Minimalgröße für Symbole fest. Voreinstellung ist 16 Pixel.</entry>
</row>
<row>
<entry
>Icon Size Maximum</entry>
<entry
>[größe]</entry>
<entry
>Legt die Maximalgröße für Symbole fest. Voreinstellung ist 64 Pixel.</entry>
</row>
<row>
<entry
>Optimized Icon Rendering</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob die Darstellung von Symbolen optimiert werden soll. Voreinstellung ist true.</entry>
</row>
<row>
<entry
>Progress Bar Visible</entry>
<entry
>[true/false]</entry>
<entry
>Voreinstellung ist true.</entry>
</row>
<row>
<entry
>Progress Bar Position</entry>
<entry
>[top/bottom]</entry>
<entry
>Legt fest, ob die Fortschrittsanzeige oben oder unten angezeigt werden soll. Voreinstellung ist unten.</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob die Symbole hüpfen sollen. Voreinstellung ist nein.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="mac-classic-themes">
<title
>MacClassic-Design</title>
<table>
<title
>Optionen für das MacClassic-Design</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Erklärung</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[0-3,10-13]</entry>
<entry
>Die Bildschirmposition der Symbole. Voreinstellung ist links-unten.</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob die Symbole hüpfen sollen. Voreinstellung ist nein.</entry>
</row>
<row>
<entry
>Icons Visible</entry>
<entry
>[true/false]</entry>
<entry
>Legt fest, ob Symbole angezeigt werden sollen. Voreinstellung ist true.</entry>
</row>
<row>
<entry
>Splash Screen</entry>
<entry
>[name]</entry>
<entry
>Legt das angezeigte Startbild fest.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="themes-2k">
<title
>2k-Design</title>
<table>
<title
>Optionen für das 2k-Design</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Erklärung</entry>
</row>
<row>
<entry
>Title Background Color</entry>
<entry
>[farbe]</entry>
<entry
>Die Hintergrundfarbe für den Titel. Voreinstellung ist dunkelblau.</entry>
</row>
<row>
<entry
>Title Foreground Color</entry>
<entry
>[farbe]</entry>
<entry
>Die Vordergrundfarbe für den Titel. Voreinstellung ist weiß.</entry>
</row>
<row>
<entry
>Status Text Color</entry>
<entry
>[farbe]</entry>
<entry
>Die Farbe des Status-Textes. Die Voreinstellung ist dasselbe wie die Titel-Hintergrundfarbe.</entry>
</row>
<row>
<entry
>Rotator Color 1</entry>
<entry
>[farbe]</entry>
<entry
>Legt die Farbe für Rotator 1 fest. Voreinstellung ist dunkelblau.</entry>
</row>
<row>
<entry
>Rotator Color 2</entry>
<entry
>[farbe]</entry>
<entry
>Legt die Farbe für Rotator 2 fest. Voreinstellung ist cyan.</entry>
</row>
<row>
<entry
>Rotator Speed</entry>
<entry
>[wert]</entry>
<entry
>Legt die Geschwindigkeit des Rotators fest. Voreinstellung ist 30.</entry>
</row>
<row>
<entry
>Window Title</entry>
<entry
>[text]</entry>
<entry
>Legt den Text des Fenstertitels fest.</entry>
</row>
<row>
<entry
>Logo File</entry>
<entry
>[dateiname]</entry>
<entry
>Legt das benutzte Logo fest.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>
</sect1>
</chapter>

<chapter id="from-other-applications">
<title
>&ksplash; in eigenen Programmen</title>

<para
>In diesem Kapitel wird beschrieben, wie Sie &ksplash; als Startbild für Ihr &kde;-Programm benutzen können. Wenn Sie keine Programme für &kde; entwickeln, können Sie diesen Abschnitt überspringen.</para>

<sect1 id="basic-other-reqs">
<title
>Grundvoraussetzungen</title>

<para
>Ihr Programm muss mit &DCOP; umgehen können. &DCOP; ist die &kde;-Technologie, die Programme zur Kommunikation untereinander verwenden. Wenn Sie das übliche <ulink url="http://developer.kde.org"
>&kde; Entwickler-Grundgerüst</ulink
> verwenden, brauchen Sie sich darum nicht weiter kümmern. Informationen über &DCOP; und verwandte &kde;-Technologien finden Sie in der <ulink url="http://developer.kde.org"
>&kde; Entwicklerecke</ulink
>.</para>
</sect1>

<sect1 id="other-using">
<title
>Der Aufruf von &ksplash;</title>

<para
>Bevor Ihr Programm seine eigentliche Arbeit beginnt oder bevor &zb; Module und Erweiterungen geladen werden, starten Sie &ksplash;:</para>

<programlisting
>DCOPClient *c = kapp-&gt;dcopClient();
QString error;
QCString KSplashName;
int pid = 0;
QStringList args;
args &lt;&lt; "--theme=MeinDesign" &lt;&lt; "--managed";
if (kapp-&gt;startServiceByDesktopName("ksplash", args, &amp;error,
&amp;KSplashName, &amp;pid))
{
  KMessageBox::sorry(0, error, "Unable to invoke KSplash");
  // Some error processing here.
}
</programlisting>

<para
>Wir gehen in diesem Fall davon aus, dass nur eine Instanz von &ksplash; gleichzeitig läuft. Andere Fälle sind etwas komplizierter. Lesen Sie dazu bitte die &DCOP;-Dokumentation.</para>
</sect1>

<sect1 id="show-messages">
<title
>Anzeigen von Meldungen</title>

<para
>Bevor Sie irgendwelche Meldungen anzeigen können, müssen Sie die Anzahl der anzuzeigenden Schritte festlegen. Der &kde;-Start &zb; benutzt sieben Schritte.</para>

<programlisting
>QByteArray data;
    QDataStream arg(data,IO_WriteOnly);
    arg &lt;&lt; eineZahl;
    if (!(c-&gt;send(KSplashName, "KSplashIface", "setStartupItemCount(int)",
data))
      // Some error processing here.
</programlisting>

<para
>Immer wenn Sie eine Meldung mit oder ohne Symbol anzeigen möchten, verwenden Sie </para>

<programlisting
>arg &lt;&lt; QString("symbolName") &lt;&lt; QString("programmName") &lt;&lt;
QString("Eine Beschreibung");
    if (!(c-&gt;send(KSplashName, "KSplashIface",
"programStarted(QString,QString,QString)", data))
    {
      // Some error processing here.
    }
</programlisting>

<para
>Jedesmal wenn Sie <constant
>programStarted</constant
> aufrufen, wird ein Schritt als abgeschlossen markiert und inkrementiert. Wenn Ihr Programm mit dem Start fertig ist, können Sie den Startbildschirm auf diese Weise wieder ausblenden:</para>

<programlisting
>if (!(c-&gt;send(KSplashName, "KSplashIface", "startupComplete()", data))
    {
      // Some error processing here.
    }
</programlisting>

<para
>Das ist alles! Mehr ist nicht nötig, um von &ksplash;s Möglichkeiten zu profitieren :)</para>

</sect1>
</chapter>

<!-- FIXME: Better to leave this out until it's written, or the translators -->
<!-- will have to still translate it ... -->

<chapter id="wrplugins">
<title
>Erstellen eines Moduls für &ksplash;</title>

<para
>Es ist nicht schwer, ein Darstellungsmodul für &ksplash; zu schreiben. In diesem Abschnitt beschäftigen wir uns mit diesem Thema und schreiben ein Modul, das den Startbildschirm eines sehr bekannten Betriebssystems emuliert. In diesem Abschnitt wird vorausgesetzt, dass Sie mit den Grundlagen von C++ sowie KDE/Qt-Programmierung vertraut sind.</para>

<sect1 id="basic-requirements">
<title
>Grundvoraussetzungen</title>
<para
>Wir erzeugen ein Darstellungsmodul mit dem Namen <literal
>2k</literal
>. Der Modulname wird an vielen Stellen verwendet und es ist wichtig, dass Sie den Namen durchgängig korrekt verwenden, damit &ksplash; Ihr Modul finden und benutzen kann. &ksplash;s Darstellungsmodule sind dynamisch ladbare Bibliotheken und folgen dieser Namenskonvention: </para>
<simplelist>
<member
>Die Bibliothek sollte den Namen <filename
>ksplash+designname</filename
> tragen. Verwenden Sie keine Großbuchstaben! In unserem Beispiel lautet der Name <filename
>ksplash2k</filename
>.</member>
<member
>Außerdem benötigt Ihr Modul eine Desktop-Datei mit dem Namen <filename
>ksplash+designname.desktop</filename
>. Hier dürfen ebenfalls keine Großbuchstaben verwendet werden. In unserem Beispiel heißt die Datei <filename
>ksplash2k.desktop</filename
>. </member>
<member
>Schlussendlich muss das von der Bibliothek zurückgegebene Objekt eine Klasse mit dem Namen <literal
>Theme+designname</literal
> sein. In unserem Beispiel als <literal
>Theme2k</literal
>.</member>
</simplelist>
<para
>Ein weiterer wichtiger Punkt ist, dass Ihre Modulklasse von <literal
>ThemeEngine</literal
> abgeleitet sein muss. Falls Ihnen von den obigen Dingen noch etwas unklar sein sollte, brauchen Sie sich erstmal keine Gedanken zu machen. Wir werden später noch auf jeden Punkt im einzelnen eingehen. </para>
</sect1>
<sect1 id="skeleton">
<title
>Erstellen des Grundgerüstes</title>
<para
>Wir benutzen das &kde; application framework, welches sich um den Bau des Moduls und um Plattformunabhängigkeit kümmert, ohne das wir selber etwas dazu tun müssen. Dafür müssen Sie das Paket <filename
>kdesdk</filename
> installiert haben. Führen Sie den Befehl <literal
>kapptemplate</literal
> aus und erzeugen Sie ein Programm mit dem Namen "2k". Für Sie wird ein Basisordner erzeugt, der allgemeine Dateien wie &zb; AUTHORS etc. enthält. Unser Interesse gilt nun aber erstmal nur dem Unterordner <filename class="directory"
>2k</filename
>. Wechseln Sie in diesen Ordner und löschen Sie dort alle Dateien. Nun haben wir das benötigte Grundgerüst. </para>
<para
>Als nächsten Schritt erzeugen wir eine <filename
>.desktop</filename
>-Datei. Wenn diese installiert wird, weiß &ksplash;, dass Ihr Darstellungsmodul verfügbar ist. Nach den beschriebenen Namenskonventionen aus dem <link linkend="basic-requirements"
>vorigen Kapitel</link
> erzeugen Sie nun eine Datei mit dem Namen <filename
>ksplash2k.desktop</filename
>. Sie sollte folgenden Inhalt haben: </para>
<programlisting
><literal>
[Desktop Entry]
Encoding=UTF-8
Type=Service
Comment=KSplash Plugin
Name=KSplash2k
ServiceTypes=KSplash/Plugin
X-KDE-Library=ksplash2k
X-KSplash-Default=true
X-KSplash-PluginName=2k
X-KSplash-ObjectName=Theme2k
</literal
>
</programlisting>
<para
>Die Einträge <literal
>Encoding</literal
>, <literal
>Type</literal
>, <literal
>Comment</literal
> und <literal
>ServiceTypes</literal
> sind für alle Darstellungsmodule gleich. Der Modul- und Bibliotheksname folgen den vorher genannten Namenskonventionen. Der Eintrag <literal
>X-KSplash-Default</literal
> kann einen Wahrheitswert enthalten und legt fest, ob das Modul im Kontrollzentrum angezeigt wird. Normalerweise ist der Wert hier <constant
>true</constant
>; es gibt nur ganz wenige Ausnahmen. </para>
</sect1>
<sect1 id="headerfile">
<title
>Deklaration der Modul-Klasse</title>
<para
>Nun haben wir die Vorbereitungen abgeschlossen und können mit dem schönen Teil beginnen - dem Erzeugen einer Klasse die das gewünschte Verhalten festlegt. Die Klasse kann im Grunde alles tun, was wir möchten, mit ein paar wenigen Einschränkungen:</para>
<orderedlist>
<listitem
><para
>Modul-Klassen müssen von der Klasse <constant
>ThemeEngine</constant
> abgeleitet sein.</para
></listitem>
<listitem
><para
>Modul-Klassen müssen die Namenskonvention <classname
>Theme+DesignName</classname
> einhalten. (Das "+" muss ausgelassen werden.)</para
></listitem>
<listitem
><para
>Modul-Klassen müssen eine <literal
>static</literal
>-Funktion namens <function
>names</function
> enthalten, die eine Liste der Namen zurückgibt, mit denen sie aufgerufen werden kann.</para
></listitem>
<listitem
><para
>Falls das Modul im Kontrollzentrum eingerichtet werden kann, muss es eine von <literal
>ThemeEngineConfig</literal
> abgeleitete Klasse zur Einrichtung enthalten.</para
></listitem>
<listitem
><para
>Modul-Klassen müssen mindestens eine der virtuellen Funktionen <function
>slotSetText</function
>, <function
>slotSetPixmap</function
>, <function
>slotUpdateProgress</function
> und <function
>slotUpdatSteps</function
> überschreiben.</para
></listitem>
<listitem
><para
>Der Konstruktor sollte die Form <literal
>ThemeEngine( QWidget *parent, const char *name, const QStringList &amp;args)</literal
> haben, damit es mit <classname
>KGenericFactory</classname
> genutzt werden kann.</para
></listitem>
</orderedlist>
<para
>Die letzte Anforderung scheint kompliziert zu sein, aber Sie werden später feststellen, dass dies durch nur eine einzige Zeile im Quelltext erledigt werden kann.</para>
</sect1>
<sect1 id="headercode">
<title
>Der Quelltext der Headerdatei</title>
<para
>Nachdem wir nun diese Bedingungen kennen, lassen Sie uns schauen, wie die Headerdatei <filename
>theme2k.h</filename
> aussieht:</para>
<example>
<title
>Quelltext für <filename
>theme2k.h</filename
></title>
<programlisting
>#ifndef __THEME2K_H__
#define __THEME2K_H__

#include &lt;qlabel.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kdialogbase.h&gt;
#include &lt;kpixmap.h&gt;
#include &lt;ksplash/themeengine.h&gt;

class RotWidget;

class Cfg2k: public ThemeEngineConfig
{
  Q_OBJECT
public:
  Cfg2k( KConfig * );
};

class ObjKsTheme;
class Theme2k: public ThemeEngine
{
  Q_OBJECT
public:
  Theme2k( QWidget *, const char *, const QStringList&amp; );

  inline const QString name()
  {
    return( QString("KSplash2k") );
  }
  inline const KDialogBase *config( KConfig *kc )
  {
    return new Cfg2k( kc );
  }
  static QStringList names()
  {
    QStringList Names;
    Names &lt;&lt; "KSplash2k";
    Names &lt;&lt; "ks2k";
    Names &lt;&lt; "2k";
    Names &lt;&lt; "2000";
    return( Names );
  };

public slots:
  inline void slotSetText( const QString&amp; s )
  {
    if( mText &amp;&amp; mText-&gt;text() != s ) mText-&gt;setText( s );
  };

private:
  void initUi();
  void readSettings();

  QLabel *mText;
  RotWidget *mRotator;
  QColor mTBgColor, mTFgColor, mRotColor1, mRotColor2, mStatusColor;
  int mRotSpeed;
  QString mWndTitle, mLogoFile;
};

#endif
</programlisting>
</example>
<para
>Nun gut, gehen wir die obige Auflistung durch: Die Klasse <classname
>Theme2k</classname
> ist von <classname
>ThemeEngine</classname
> abgeleitet und erfüllt die Namenskonvention. Sie enthält die Funktion <methodname
>Theme2k::names()</methodname
> und hat einen Konstruktor mit den benötigten Parametern: <function
>Theme2k( QWidget *, const char *, const QStringList&amp; );</function
> und enthält eine einfache Methode <methodname
>Theme2k::slotSetText()</methodname
>. Kümmern Sie sich erstmal nicht um die Klasse <classname
>RotWidget</classname
>; sie erzeugt nur ein hübsches Bildschirmelement. Unser Modul ist sehr einfach gehalten und zeigt keine Symbole oder eine Fortschrittsanzeige an. Wenn Sie das möchten, überschreiben Sie die Funktion <function
>slotSetPixmap</function
>. Ähnliche Funktionen gibt es auch für die Schritte der Fortschrittsanzeige (<function
>slotUpdateSteps</function
>) und zum Inkrementieren (<function
>slotUpdateProgress</function
>) des aktuellen Schrittes. </para>
</sect1>
<sect1 id="Implementation">
<title
>Die Implementierung des Moduls</title>
<para
>Wir schauen uns nun die wichtigsten Teile der Implementation an. Eine Auflistung des gesamten Codes finden Sie im Anhang. Als erstes schauen wir uns die Voraussetzungen für die Bibliothek an:</para>
<example>
<title
>Voraussetzung für die Bibliothek</title>
<programlisting
>K_EXPORT_COMPONENT_FACTORY( ksplash2k, KGenericFactory&lt;Theme2k&gt; );
</programlisting>
</example>
<para
>Das Makro <constant
>K_EXPORT_COMPONENT_FACTORY</constant
> ist in <filename
>kgenericfactory.h</filename
> deklariert. Gut, nun weiter zum Konstruktor! Weil es sich hier um ein sehr einfaches Modul handelt, ist der Konstruktor ebenso einfach.</para>
<example>
<title
>Der Konstruktor des Moduls</title>
<programlisting
>Theme2k::Theme2k( QWidget *parent, const char *name, const QStringList &amp;args
 )
    :ThemeEngine( parent, name, args )
{
  readSettings();
  initUi();
}
</programlisting>
</example>
<para
>Die Methode <function
>readSettings()</function
> zeigt, wie Sie die Design-Einstellungen einlesen. (Sie wollen ja schließlich, dass Ihr Modul auch von Designs verwendet wird, richtig?)</para>
<example>
<title
>Das Einlesen der Design-Einstellungen</title>
<programlisting
>void Theme2k::readSettings()
{
  if( !mTheme )
    return;

  KConfig *cfg = mTheme-&gt;themeConfig();
  if( !cfg )
    return;

  cfg-&gt;setGroup( QString("KSplash Theme: %1").arg(mTheme-&gt;theme()) );

  QColor DefaultTBgColor( Qt::darkBlue );
  QColor DefaultTFgColor( Qt::white );

  mTBgColor = cfg-&gt;readColorEntry( "Title Background Color",
&amp;DefaultTBgColor );
  mTFgColor = cfg-&gt;readColorEntry( "Title Foreground Color",
&amp;DefaultTFgColor );
  mStatusColor = cfg-&gt;readColorEntry("Status Text Color", &amp;mTBgColor );

  QColor DefaultRot1( Qt::darkBlue );
  QColor DefaultRot2( Qt::cyan );
  mRotColor1 = cfg-&gt;readColorEntry( "Rotator Color 1", &amp;DefaultRot1 );
  mRotColor2 = cfg-&gt;readColorEntry( "Rotator Color 2", &amp;DefaultRot2 );

  mRotSpeed = cfg-&gt;readNumEntry( "Rotator Speed", 30 );
  mWndTitle = cfg-&gt;readEntry( "Window Title", i18n("Please wait...") );
  mLogoFile = cfg-&gt;readEntry( "Logo File", QString::null );
}
</programlisting>
</example>
<para
>Weil wir unseren Benutzern wohlgesonnen sind, legen wir sinnvolle Voreinstellungen fest. Wir stellen unsere Gruppe immer auf "KSplash Theme: designname" ein, um mit zukünftigen Design-Spezifikationen kompatibel zu sein. Die Methode <function
>initUI()</function
> ist nicht sonderlich interessant, denn Sie erzeugt nur die Bildschirmelemente. Details finden Sie im Anhang. </para>
</sect1>
<sect1 id="compilingfile">
<title
>Das Kompilieren des Moduls</title>
<para
>Weil wir uns für das &kde; application framework entschieden haben, müssen wir die Datei <filename
>Makefile.am</filename
> erstellen. Sie sollte so aussehen:</para>
<example>
<title
>Quelltext von <filename
>Makefile.am</filename
></title>
<programlisting
>INCLUDES = $(all_includes)

kde_module_LTLIBRARIES = ksplash2k.la

ksplash2k_la_SOURCES = theme2k.cpp rotwidget.cpp
ksplash2k_la_LDFLAGS = $(all_libraries) $(KDE_RPATH)
ksplash2k_la_LIBADD = $(LIB_KDEUI) -lksplashthemes

METASOURCES = AUTO

noinst_HEADERS        = theme2k.h rotwidget.h

servicesdir = $(kde_servicesdir)
services_DATA = ksplash2k.desktop

themedir = $(kde_datadir)/ksplash/Themes/2k
theme_DATA = Theme.rc Preview.png
</programlisting>
</example>
<para
>Informationen, wie man <filename
>Makefile.am</filename
>-Dateien für &kde; schreibt, finden Sie auf der &kde; <ulink url="http://developer.kde.org/documentation/other/makefile_am_howto.html"
>Webseite</ulink
>. Das einzig zu beachtende hier ist, dass wir ein Standard-Design bereitstellen, das unser Modul benutzt, sowie ein Vorschaubild dafür. Um den Benutzern einen Gefallen zu tun, sollten Sie eine Beispieldatei <filename
>Theme.rc</filename
> bereitstellen, die die verschiedenen Optionen aufzeigt.</para>
</sect1>
</chapter>

<chapter id="faq">
<title
>Fragen und Antworten</title>
&reporting.bugs; &updating.documentation; <qandaset id="faqlist">
<qandaentry>
<question>
<para
>Ich kann keine Designs finden, die mit &ksplash; funktionieren. Warum?</para>
</question>
<answer>
<para
>Wahrscheinlich haben Sie nicht die korrekten Darstellungsmodule installiert. Die Module befinden sich im Paket <literal
>kdeartwork</literal
>. Laden Sie es herunter und installieren Sie es. Danach versuchen Sie es erneut.</para>
</answer>
</qandaentry>
<qandaentry>
<question>
<para
>Was ist die Datei <filename
>Theme.rc</filename
> und wie kann ich eine erstellen?</para>
</question>
<answer>
<para
><filename
>Theme.rc</filename
> ist die Datei, in der Sie die Einstellungen eines Designs festlegen. Weitere Informationen finden Sie im Kapitel <link linkend="themes"
>Erstellen von Designs für &ksplash;</link
>. </para>
</answer>
</qandaentry>
</qandaset>
</chapter>

<chapter id="credits">
<title
>Mitwirkende und Lizenz</title>

<para
>&ksplash;</para>

<para
>Copyright des Programms &copy; 2003 &Ravikiran.Rajagopal; &Ravikiran.Rajagopal.mail;</para>

<itemizedlist>
<title
>Beiträge</title>
<listitem
><para
>&Brian.C.Ledbetter; &Brian.C.Ledbetter.mail;</para>
</listitem>
</itemizedlist>

<para
>Copyright der Dokumentation &copy; 2003 &Teemu.Rytilahti; &Teemu.Rytilahti.mail;</para>
&underFDL; &underGPL; </chapter>

<appendix id="installation">
<title
>Installation</title>

<sect1 id="requirements">
<title
>Voraussetzungen</title>

<para
>&ksplash; benötigt &kde; in der Version 3.2 oder höher. Einige Designs können spezielle Module benötigen. Funktioniert ein Design nicht, setzen Sie sich mit dem Autor des Designs in Verbindung, um herauszufinden wo Sie das benötigte Modul erhalten können.</para>

</sect1>

<sect1 id="compilation">
<title
>Kompilierung und Installation</title>
&install.compile.documentation; </sect1>
</appendix>
<appendix id="srccode">
<title
>Quelltext</title>
<sect1 id="theme2kcpp">
<title
>Quelltext von <filename
>theme2k.cpp</filename
></title>
<programlisting
>#include &lt;qlabel.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kapplication.h&gt;
#include &lt;kconfig.h&gt;
#include &lt;kdebug.h&gt;
#include &lt;kdialogbase.h&gt;
#include &lt;kgenericfactory.h&gt;
#include &lt;kglobalsettings.h&gt;
#include &lt;klocale.h&gt;
#include &lt;ksplash/objkstheme.h&gt;
#include &lt;kstandarddirs.h&gt;

#include "rotwidget.h"
#include "theme2k.h"
#include "theme2k.moc"

K_EXPORT_COMPONENT_FACTORY( ksplash2k, KGenericFactory&lt;Theme2k&gt; );

Cfg2k::Cfg2k( KConfig * )
{}

Theme2k::Theme2k( QWidget *parent, const char *name, const QStringList &amp;args
 )
    :ThemeEngine( parent, name, args )
{
  readSettings();
  initUi();
}

void Theme2k::initUi()
{
  QVBox *vbox = new QVBox( this );
  vbox-&gt;setFrameShape( QFrame::WinPanel );
  vbox-&gt;setFrameShadow( QFrame::Raised );

  QHBox *labelBox = new QHBox( vbox );
  labelBox-&gt;setPalette( mTBgColor );
  labelBox-&gt;setMargin( 1 );
  QLabel *lbl = new QLabel( mWndTitle, labelBox );
  lbl-&gt;setFont( QFont( "Arial", 12, QFont::Bold ) );
  lbl-&gt;setPaletteForegroundColor( mTFgColor );

  QLabel *logo = new QLabel( vbox );
  logo-&gt;setPalette( Qt::white );

  QString px( locate( "appdata", mTheme-&gt;themeDir() +
(mLogoFile.isNull()?QString("/Logo.png"):mLogoFile) ) );
  if (px.isNull())
    px = locate("appdata","Themes/Default/splash_top.png");
  if( !px.isNull() )
  {
    QPixmap pix( px );
    logo-&gt;setPixmap( pix );
  }
  else
  {
    logo-&gt;setText( "&lt;B&gt;KDE&lt;/B&gt;2000" );
    logo-&gt;setAlignment( AlignCenter|AlignVCenter );
  }

  mRotator = new RotWidget( vbox, mRotColor1, mRotColor2, mRotSpeed );

  QHBox *hbox = new QHBox( vbox );
  labelBox-&gt;setSpacing( 4 );
  labelBox-&gt;setMargin( 4 );

  mText = new QLabel( hbox );
  mText-&gt;setPaletteForegroundColor( mStatusColor );
  mText-&gt;setPaletteBackgroundColor( mTFgColor );
  mText-&gt;setText( mWndTitle );
  mText-&gt;setFixedHeight( 48 );

  setFixedSize( vbox-&gt;sizeHint() );
  QRect rect(KGlobalSettings::splashScreenDesktopGeometry());
  move( rect.x() + (rect.width() - size().width())/2,
        rect.y() + (rect.height() - size().height())/2 );
}

void Theme2k::readSettings()
{
  if( !mTheme )
    return;

  KConfig *cfg = mTheme-&gt;themeConfig();
  if( !cfg )
    return;

  cfg-&gt;setGroup( QString("KSplash Theme: %1").arg(mTheme-&gt;theme()) );

  QColor DefaultTBgColor( Qt::darkBlue );
  QColor DefaultTFgColor( Qt::white );

  mTBgColor = cfg-&gt;readColorEntry( "Title Background Color",
&amp;DefaultTBgColor );
  mTFgColor = cfg-&gt;readColorEntry( "Title Foreground Color",
&amp;DefaultTFgColor );
  mStatusColor = cfg-&gt;readColorEntry("Status Text Color", &amp;mTBgColor );

  QColor DefaultRot1( Qt::darkBlue );
  QColor DefaultRot2( Qt::cyan );
  mRotColor1 = cfg-&gt;readColorEntry( "Rotator Color 1", &amp;DefaultRot1 );
  mRotColor2 = cfg-&gt;readColorEntry( "Rotator Color 2", &amp;DefaultRot2 );

  mRotSpeed = cfg-&gt;readNumEntry( "Rotator Speed", 30 );
  mWndTitle = cfg-&gt;readEntry( "Window Title", i18n("Please wait...") );
  mLogoFile = cfg-&gt;readEntry( "Logo File", QString::null );
}
</programlisting>
</sect1>
<sect1 id="rotwidgeth">
<title
>Quelltext von <filename
>rotwidget.h</filename
></title>
<programlisting
>#ifndef         __ROTWIDGET_H__
#define         __ROTWIDGET_H__

#include &lt;qlabel.h&gt;
#include &lt;qtimer.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kdialogbase.h&gt;
#include &lt;kpixmap.h&gt;

/**
 * @short Display a rotating-gradient widget.
 */
class         RotWidget: public QWidget
{
  Q_OBJECT
public:
  RotWidget( QWidget *, const QColor&amp;, const QColor&amp;, int );
  ~RotWidget();

private slots:
  void stepEvent();

protected:
  void        preparePixmap( int );
  void        paintEvent( QPaintEvent * );
  void        resizeEvent( QResizeEvent * );

  QColor m_color1, m_color2;
  int m_step, m_speed;
  QTimer *m_stepTimer;

  QList&lt;KPixmap&gt; m_stepPixmap;
};

#endif
</programlisting>
</sect1>
<sect1 id="rotwidgetcpp">
<title
>Quelltext von <filename
>rotwidget.cpp</filename
></title>
<programlisting
>#include &lt;kdebug.h&gt;
#include &lt;kdialogbase.h&gt;
#include &lt;kpixmapeffect.h&gt;

#include &lt;qlabel.h&gt;
#include &lt;qpainter.h&gt;
#include &lt;qwidget.h&gt;

#include "rotwidget.h"
#include "rotwidget.moc"

RotWidget::RotWidget( QWidget *parent, const QColor&amp; c1, const QColor&amp;
c2, int sp )
    :QWidget(parent), m_color1(c1), m_color2(c2), m_step(0), m_speed(sp)
{
  if( (m_speed &lt;= 0) || (m_speed &gt; 20) )
    m_speed = 1;
  setFixedHeight( 6 );

  for( int i = 0; i &lt;= width(); i++ )
    preparePixmap( i );

  m_stepTimer = new QTimer( this );
  connect(m_stepTimer, SIGNAL(timeout()), this, SLOT(stepEvent()));
  m_stepTimer-&gt;start( 50 );
}

RotWidget::~RotWidget()
{
}

void RotWidget::stepEvent()
{
  // This is inefficient as we create too many pixmaps, optimize later.
  m_step += m_speed;
  if( m_step &gt; width() )
    m_step = 0;
  repaint( true );
}

// Todo: Optimize drawing.
void RotWidget::paintEvent( QPaintEvent *pe )
{
  QPainter p;
  p.begin( this );

  QRect r = pe-&gt;rect();

  if( m_stepPixmap.at( m_step ) )
    bitBlt( this, r.x(), r.y(), m_stepPixmap.at( m_step ), r.x(), r.y(),
r.width(), r.height() );
  else
    p.fillRect( rect(), Qt::black );
  p.end();
}

void RotWidget::resizeEvent( QResizeEvent *re )
{
  m_stepPixmap.clear();
  for( int i = 0; i &lt;= re-&gt;size().width(); i++ )
    preparePixmap( i );
}

void RotWidget::preparePixmap( int step )
{
  if( step &lt; 0 )
    return;

  // Explicitly draw our first pixmap. The rest we will bitBlt() from here.
  if( step == 0 )
  {
    KPixmap tmp; tmp.resize( size().width() / 2, size().height() );
    KPixmap tmp2(tmp);
    KPixmapEffect::gradient( tmp, m_color1, m_color2,
KPixmapEffect::HorizontalGradient );
    KPixmapEffect::gradient( tmp2, m_color2, m_color1,
KPixmapEffect::HorizontalGradient );
    KPixmap *px = new KPixmap( size() );
    QPainter p;
    p.begin( px );
    p.drawPixmap( 0, 0, tmp );
    p.drawPixmap( size().width()/2, 0, tmp2 );
    p.end();
    m_stepPixmap.append( px );
  }
  else if( m_stepPixmap.at( step-1 ) )
  {
    QPixmap *prev = m_stepPixmap.at( step-1 );
    QPixmap next; next.resize( size() );
    // convert
    // prev = "[------------]"
    // to
    // next = "------------]["
    bitBlt( &amp;next, 0, 0, prev, 1, 0, prev-&gt;width()-1, prev-&gt;height()
);
    bitBlt( &amp;next, width()-1, 0, prev, 0, 0, 1, prev-&gt;height() );
    KPixmap *n = new KPixmap( next );
    m_stepPixmap.append( n );
  }
}
</programlisting>
</sect1>
</appendix>

&documentation.index;
</book>

<!--
Local Variables:
mode: xml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:

vim:tabstop=2:shiftwidth=2:expandtab
-->
