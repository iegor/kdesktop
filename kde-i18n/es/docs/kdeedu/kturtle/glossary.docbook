<!--Dear translator: please NEVER translate the id or anything inside the tags as they are needed in english by the application
     Thanks a lot in advance.-->
<chapter id="Glossary">
<title
>Glosario</title>

<para
>En este capitulo encontraremos una explicación de la mayoría de las palabras «inusuales» que utilizaremos a lo largo del manual.</para>

<glosslist>
<glossentry id="degrees">
<glossterm
>Grados</glossterm>
<glossdef
><para
>En geometría, los grados son unidades utilizadas para la medición de ángulos, y representan cada una de las 360 partes iguales, en que puede dividirse la circunferencia. Es decir, un giro completo es un giro de 360 grados. Mientras que con un giro de 180 grados obtenemos una media vuelta. Las órdenes <userinput
>izquierda</userinput
>, <userinput
>derecha</userinput
> y <userinput
>dirección</userinput
> consideran que el parámetro introducido está expresado en grados.</para
></glossdef>
</glossentry>

<glossentry id="input-output">
<glossterm
>Entrada y salida de órdenes</glossterm>
<glossdef
><para
>A lo largo de este manual, observaremos que no todos las órdenes se comportan de la misma manera. Mientras que algunas órdenes devuelven valores, otras requieren que se les pasen valores como parámetros. Adicionalmente, otras órdenes no devolverán valores ni requerirán parámetros.</para>
<para
>Veamos algunos ejemplos de órdenes que solo aceptarán parámetros de entrada:<screen>
avanzar 50
colorpluma 255,0,0
escribir "Hola!"
</screen
> Aquí, la orden <userinput
>avanzar</userinput
> toma el valor <userinput
>50</userinput
> como parámetro de entrada. Así, <userinput
>avanzar</userinput
> necesita un parámetro numérico para saber cuantos <glossterm linkend="pixels"
>pixels</glossterm
> deberá adelantarse. Del mismo modo, <userinput
>colorpluma</userinput
> toma un color como parámetro de entrada y <userinput
>escribir</userinput
> toma una cadena de texto. Otro tipo de parámetro de entrada esta representado por las variables. Veremos un ejemplo del uso de variables a continuación: <screen
>x = 50
escribir x
a = "¡Hola!"
escribir a
</screen
></para>

<para
>Ahora, veremos ejemplos de órdenes que devuelven un valor de salida:<screen>
x = pregunta "Aquí podemos introducir lo que se nos ocurra:"
r = aleatorio 1,100
</screen
>Entonces, la orden <userinput
>pregunta</userinput
> toma una cadena como parámetro, devuelve como salida lo que sea que hallamos introducido y lo guarda en la variable x. A continuación, la orden <userinput
>aleatorio</userinput
> también devuelve un valor de salida, que en este caso será un número entre 1 y 100 que guardará en la variable r. Observe que en este caso no estamos haciendo nada con los valores contenidos en las variables <userinput
>x</userinput
> y <userinput
>r</userinput
>.</para>

<para
>Finalmente, veremos algunas órdenes que no requieren parámetros de entrada, ni devuelven valores de salida: <screen
>limpiar
levantarpluma
envolver
ocultartortuga
</screen>
</para
></glossdef>
</glossentry>

<glossentry id="intuitive-highlighting">
<glossterm
>Resaltado intuitivo</glossterm>
<glossdef
><para
>Esta es una característica de &kturtle; que hará más amena nuestra tarea de programar en LOGO. Con el resaltado intuitivo de sintaxis, el código que vamos generando se colorea automáticamente en función del tipo de código que estamos introduciendo. En la lista de abajo, veremos los diferentes colores que puede tomar nuestro código a medida que lo vamos escribiendo en el <link linkend="the-code-editor"
>editor de código</link
>. <table>
<title
>Diferentes tipos de código y su color de resaltado</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>órdenes regulares</entry>
<entry
>verde oscuro</entry>
<entry
>Las órdenes regulares se describen <link linkend="commands"
>aquí</link
>.</entry>
</row>
<row>
<entry
>controladores de ejecución</entry>
<entry
>negro (negrita)</entry>
<entry
>Las órdenes que definen estructuras de control. Podemos aprender más acerca de las estructuras de control en este <link linkend="controlling-execution"
>enlace</link
>.</entry>
</row>
<row>
<entry
>comentarios</entry>
<entry
>amarillo oscuro</entry>
<entry
>Cuando una línea de código comience con el carácter #, será interpretado como un comentario y se ignorará durante la ejecución del código. Así, los comentarios nos permiten explicar nuestro código en lenguaje coloquial. Y adicionalmente, los comentarios nos permiten suprimir alguna línea de código temporalmente sin tener que borrarla.</entry>
</row>
<row>
<entry
>corchetes [, ]</entry>
<entry
>verde claro (negrita)</entry>
<entry
>Utilizaremos los corchetes para agrupar porciones de código. Los corchetes son con frecuencia utilizados en combinación con los <link linkend="controlling-execution"
>controladores de ejecución</link
>.</entry>
</row>
<row>
<entry
>La orden <link linkend="learn"
>aprender</link
></entry>
<entry
>verde claro (negrita)</entry>
<entry
>La orden <link linkend="learn"
>aprender</link
> se utiliza para crear nuevas funciones.</entry>
</row>
<row>
<entry
>números</entry>
<entry
>azul</entry>
<entry
>Son números ¿Que más podríamos decir?</entry>
</row>
<row>
<entry
>cadenas</entry>
<entry
>rojo oscuro</entry>
<entry
>Son cadenas de texto. Siempre deben estar entre comillas dobles (").</entry>
</row>
<row>
<entry
>Operadores matemáticos</entry>
<entry
>gris</entry>
<entry
>Son los signos para realizar operaciones matemáticas: +, -, /, (, ). Puede leer acerca de ellos <link linkend="math"
>aquí</link
>.</entry>
</row>
<row>
<entry
>Signos de interrogación</entry>
<entry
>azul (negrita)</entry>
<entry
>Podemos leer más acerca del uso de signos de interrogación <link linkend="questions"
>aquí</link
>.</entry>
</row>
<row>
<entry
>Operadores lógicos</entry>
<entry
>rosa</entry>
<entry
>Podremos leer más acerca de los operadores lógicos <link linkend="question-glue"
>aquí</link
>.</entry>
</row>
<row>
<entry
>texto regular</entry>
<entry
>negro</entry>
<entry
></entry>
</row>
</tbody>
</tgroup>
</table>
</para
></glossdef>
</glossentry>

<glossentry id="pixels">
<glossterm
>Pixels</glossterm>
<glossdef
><para
>Básicamente, un pixel es un punto en la pantalla del ordenador. Todas las imágenes que vemos en el monitor, están formadas por pixels. Un pixel es la parte más pequeña que compone una imagen en el ordenador.</para>
<para
>Existen órdenes que necesitan un número de pixels como parámetros de entrada. Estos son: <userinput
>avanzar</userinput
>, <userinput
>retroceder</userinput
>, <userinput
>ir</userinput
>, <userinput
>irx</userinput
>, <userinput
>iry</userinput
>, <userinput
>tamañolienzo</userinput
> y <userinput
>grosorpluma</userinput
>.</para
></glossdef>
</glossentry>

<glossentry id="rgb">
<glossterm
>Combinaciones RGB (código de colores)</glossterm>
<glossdef
><para
>Las combinaciones RGB se utilizan para describir colores. La «R» para el «rojo» (del inglés red), la «G» para el «verde» (del inglés green), y la «B» para el «azul» (del inglés blue). Un ejemplo de un combinación RGB es <userinput
>255,0,0</userinput
>: el primer valor («rojo») es 255 y los otros dos son 0. De modo que representa un color rojo fuerte. Cada valor de la combinación RGB debe estar en el rango que va de 0 a 255. He aquí una lista de alguno de los colores más utilizados: <table frame="none">
<title
>combinaciones RGB frecuentemente utilizadas</title>
<tgroup cols="2" colsep="5" rowsep="1">
<colspec colname="c1"/>
<tbody>
<row
><entry
><userinput
>0,0,0</userinput
></entry
><entry
>negro</entry
></row>
<row
><entry
><userinput
>255,255,255</userinput
></entry
><entry
>blanco</entry
></row>
<row
><entry
><userinput
>255,0,0</userinput
></entry
><entry
>rojo</entry
></row>
<row
><entry
><userinput
>150,0,0</userinput
></entry
><entry
>rojo oscuro</entry
></row>
<row
><entry
><userinput
>0,255,0</userinput
></entry
><entry
>verde</entry
></row>
<row
><entry
><userinput
>0,0,255</userinput
></entry
><entry
>azul</entry
></row>
<row
><entry
><userinput
>0,255,255</userinput
></entry
><entry
>azul claro</entry
></row>
<row
><entry
><userinput
>255,0,255</userinput
></entry
><entry
>rosa</entry
></row>
<row
><entry
><userinput
>255,255,0</userinput
></entry
><entry
>amarillo</entry
></row>
</tbody>
</tgroup>
</table>
</para>
<para
>Para encontrar fácilmente la combinación RGB correspondiente a un color determinado, podemos utilizar el selector de colores. Para abrir el selector de colores debemos ir a <link linkend="tools-color-picker"
><menuchoice
><guimenu
>Herramientas</guimenu
><guimenuitem
>Selector de colores</guimenuitem
></menuchoice
></link
>.</para>
<para
>Existen dos órdenes que necesitan de combinaciones RGB como parámetro de entrada: <userinput
>colorlienzo</userinput
> y <userinput
>colorpluma</userinput
>.</para
></glossdef>
</glossentry>

<glossentry id="sprite">
<glossterm
>Figura</glossterm>
<glossdef
><para
>Llamaremos figura a la pequeña imagen que se desplaza sobre el área de dibujo. Es decir, nuestra querida tortuga es, en este sentido, una figura.</para>
<para
>Nota: en esta versión de &kturtle; la figura puede ser solamente una tortuga. Sin embargo, en futuras versiones de &kturtle; esta previsto que se pueda adoptar una figura distinta.</para
></glossdef>
</glossentry>

<glossentry id="wrapping">
<glossterm
>envoltura</glossterm>
<glossdef
><para
>Con la «envoltura» hacemos que la tortuga permanezca siempre dentro del área de dibujo aunque el movimiento ejecutado tienda a llevarla fuera de sus límites. <screenshot
> <screeninfo
>Esto es lo que pasa al estar en el modo de <quote
>envoltura</quote
></screeninfo
> <mediaobject
> <imageobject
> <imagedata fileref="wrapping.png" format="PNG"/> </imageobject
> <textobject
> <phrase
>Entonces, </phrase
> </textobject
> </mediaobject
> </screenshot
>Cuando las órdenes dadas, lleven a la tortuga más allá de los límites del área de dibujo, el dibujo continuará a partir del lado opuesto de manera que pueda continuar con el dibujo.</para>
<para
>La envoltura puede activarse o desactivarse mediante las órdenes <userinput
>envolver</userinput
> y <userinput
>desenvolver</userinput
>. De forma predeterminada, al iniciarse &kturtle; la envoltura está activada.</para
></glossdef>
</glossentry>

</glosslist>

</chapter>