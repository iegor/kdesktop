<?xml version="1.0"  encoding="UTF-8" ?>

<chapter id="extending">
<chapterinfo>
<title
>Extender &kommander;</title>
<authorgroup>
<author
><firstname
></firstname
> <surname
></surname
> </author>

<othercredit role="translator"
><firstname
>Juan Manuel</firstname
> <surname
>García Molina</surname
> <affiliation
><address
><email
>juanma@superiodico.net</email
></address
></affiliation
><contrib
>Traductor</contrib
></othercredit
> 

</authorgroup>
</chapterinfo>

<title
>Extender &kommander;</title>

<!-- (OPTIONAL, BUT RECOMMENDED) This chapter should list all of the
application windows and their menubar and toolbar commands for easy reference.
Also include any keys that have a special function but have no equivalent in the
menus or toolbars. This may not be necessary for small apps or apps with no tool
or menu bars. -->

<sect1 id="create-widgets">
<title
>Crear widgets con &kommander;</title>
<para
>Con Kommander puede crear widgets nuevos basándose en widgets que no son de &kommander; de forma bastante sencilla. La aproximación es derivar la nueva clase widget de &kommander; del widget de &Qt; o &kde; que quiera integrar en &kommander; y luego también de la clase KommanderWidget. Los métodos sobrecargados de esta clase le darán al widget de &kommander; la funcionalidad. </para>
<para
>La mayor parte del código de un widget de &kommander; sólo es el código de una plantilla. Además, puede usar el cuadro de diálogo widgetgenerator.kmdr de &kommander; para generar la mayor parte del código del widget de &kommander;. Todo lo que tiene que hacer es rellenar las partes importantes en relación con el widget como la información de estado, el texto del widget, etc. </para>
<para
>Digamos que queremos crear un widget de edición de línea nuevo para &kommander;, basado en el widget KLineEdit de &kde;. Usando el cuadro de diálogo de generación de widgets, obtendremos algo como esto en el archivo de encabezado que se genera como salida: </para>
</sect1>

</chapter>
