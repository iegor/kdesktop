<!-- <?xml version="1.0" ?>
<!DOCTYPE chapter PUBLIC "-//KDE//DTD DocBook XML V4.2-Based Variant V1.1//EN" "dtd/kdex.dtd">
To validate or process this file as a standalone document, uncomment
this prolog. Be sure to comment it out again when you are done -->

<chapter id="arts-apis">
<title
>Interfaces de programación de aplicaciones (APIs) de &arts;</title>

<sect1 id="api-overview">
<title
>Introducción</title>
<para
>aRts no es sólo un conjunto de software, también proporciona una serie de APIs para propósitos variados. En esta sección trataré de describir de una forma resumida lo que se supone que hacen esas APIs, y cómo interaccionan. </para>

<para
>Hay que hacer una importante distinción: la mayoría de las APIs son <emphasis
>independientes del lenguaje y la localización</emphasis
> ya que están especificadas como <emphasis
>mcopidl</emphasis
>. Es decir, se pueden utilizar los servicios que ofrecen desde cualquier lenguaje, implementarlas en cualquier lenguaje, y no será necesario tener en cuenta si se trata de objetos locales o remotos. Esta es una lista de las primeras: </para>


<variablelist>
<varlistentry>
<term
>core.idl</term>
  <listitem
><para
>Definiciones básicas que forman el núcleo de la funcionalidad MCOP, como el propio protocolo, definiciones del objeto, el intercambiador, el sistema de flujo, etc. </para
></listitem>

</varlistentry>

<varlistentry>
<term
>artsflow.idl</term>

  <listitem
><para
>Aquí está contenido el sistema de transmisión que se utilizará para conectar transmisiones de audio, la definición de <emphasis
>Arts::SynthModule</emphasis
> que es la base de cualquier interfaz que tenga transmisiones y finalmente algunos objetos de audio útiles. </para
></listitem>

</varlistentry>

<varlistentry>
<term
>kmedia2.idl</term>


  <listitem
><para
>Aquí se define un objeto que puede reproducir un medio, <emphasis
>Arts::PlayObject</emphasis
>. Los reproductores de medios como noatun de KDE serán capaces de reproducir cualquier medio para el que se encuentre un objeto PlayObject. Así que cobra sentido implementar objetos PlayObject para varios formatos (como mp3, video mpeg, midi, wav, ...) en esa base, y, de hecho, ya hay muchos. </para
></listitem>

</varlistentry>

<varlistentry>
<term
>soundserver.idl</term>

  <listitem
><para
>Aquí se define un interfaz para el servidor de sonido global del sistema. El interfaz se llama <emphasis
>Arts::SoundServer</emphasis
>, que implementa funcionalidades como aceptar transmisiones desde la red, reproducir muestras, crear objetos de aRts propios, etc. La transparencia de red está implícita debido al uso de MCOP (como para todo lo demás). </para
></listitem>

</varlistentry>

<varlistentry>
<term
>artsbuilder.idl</term>
  <listitem
><para
>Este módulo define la funcionalidad básica de los gráficos de flujo, es decir, la combinación de objetos sencillos en otro más complejos, definiendo una gráfica de ellos. Define los interfaces básicos <emphasis
>Arts::StructureDesc</emphasis
>, <emphasis
>Arts::ModuleDesc</emphasis
> y <emphasis
>Arts::PortDesc</emphasis
> que contienen una descripción de una estructura, un módulo y un puerto. También hay un modo de obtener una «red viviente de objetos» de estas conexiones y descripciones de valor, utilizando una fábrica. </para
></listitem>

</varlistentry>

<varlistentry>
<term
>artsmidi.idl</term>

  <listitem
><para
>Este módulo define la funcionalidad MIDI básica, como objetos que producen eventos MIDI, lo que es un evento MIDI, un <emphasis
>Arts::MidiManager</emphasis
> para conectar los productores y consumidores de eventos MIDI, etc. Como siempre, la transparencia de red está implicada. </para
></listitem>

</varlistentry>

<varlistentry>
<term
>artsmodules.idl</term>
  <listitem
><para
>Aquí hay varios filtros adicionales, osciladores, efectos, retardos, etc. así como todo lo requerido para poder realizar procesamiento de señal y construir instrumentos complejos a partir de estos elementos básicos. </para
></listitem>

</varlistentry>

<varlistentry>
<term
>artsgui.idl</term>

  <listitem
><para
>Se encarga de los objetos visuales. Define el tipo básico <emphasis
> Arts::Widget</emphasis
> del que se derivan todos los módulos del entorno gráfico. Ésto proporciona independencia del conjunto de herramientas, edición visual del entorno gráfico y entornos gráficos serializables. Además, al tener los elementos del entorno gráfico atributos normales, sus valores puede estar conectados directamente a algunos módulos de procesamiento de señal. (Por ejemplo, el valor de un control al corte de un filtro). Como siempre: transparencia de red. </para
></listitem>

</varlistentry>

</variablelist>
<para
>Donde es posible, el propio aRts está implementado usando IDL. Por otro lado, hay algunas APIs <emphasis
>específicas del lenguaje</emphasis
> que utilizan C o C++. Lo más correcto es utilizar interfaces IDL donde se pueda, y las otras APIs donde sea necesario. Esta es una lista de APIs específicas del lenguaje: </para>

<variablelist>

<varlistentry>
<term
>KNotify, KAudioPlayer (incluido en libkdecore)</term>

  <listitem
><para
>Estas son APIs convenientes para los casos más sencillos y comunes, donde sólo se quiere reproducir una muestra. Las APIs están en C++, optimizado para Qt/KDE, y son lo más  sencillas posible. </para
></listitem>

</varlistentry>

<varlistentry>
<term
>libartsc</term>
  <listitem
><para
>Interfaz de C para el servidor de sonido. Muy útil para portar aplicaciones antiguas. </para
></listitem>

</varlistentry>

<varlistentry>
<term
>libmcop</term>

  <listitem
><para
>Toda la magia de MCOP se produce aquí. La biblioteca contiene los elementos básicos necesarios que debe conocer para escribir una aplicación MCOP sencilla, el repartidor, temporizadores, administración de entrada/salida, pero también los elementos internos que hacen que funcione el propio protocolo MCOP. </para
></listitem>

</varlistentry>

<varlistentry>
<term
>libartsflow</term>
  <listitem
><para
>Además de la implementación de artsflow.idl, incluye algunas utilidades como la conversión del ratio de muestreo. </para
></listitem>

</varlistentry>

<varlistentry>
<term
>libqiomanager</term>

  <listitem
><para
>Integración de MCOP en el bucle de eventos de Qt, cuando escriba aplicaciones Qt utilizando MCOP. </para
></listitem>

</varlistentry>

</variablelist>



</sect1>
<sect1 id="knotify">
<title
>knotify</title>
<para
>Pendiente de escribir. </para>
</sect1>

<sect1 id="kaudioplayer">
<title
>kaudioplayer</title>
<para
>Pendiente de escribir. </para>
</sect1>

<sect1 id="libkmid">
<title
>libkmid</title>
<para
>Pendiente de escribir. </para>
</sect1>

<sect1 id="kmedia2">
<title
>kmedia2</title>
<para
>Pendiente de escribir. </para>
</sect1>

<sect1 id="soundserver">
<title
>servidor de sonido</title>
<para
>Pendiente de escribir. </para>
</sect1>

<sect1 id="artsflow">
<title
>artsflow</title>
<para
>Pendiente de escribir. </para>
</sect1>

<sect1 id="capi">
<title
><acronym
>API</acronym
> de C</title>

<sect2 id="capiintro">
<title
>Introducción</title>

<para
>El <acronym
>API</acronym
> de C de &arts; se diseñó para facilitar la escritura y adaptación de aplicaciones en C al servidor de sonido &arts;. Proporciona funcionalidad de flujos (envío de suceciones de muestras a <application
>artsd</application
>), ya sea exclusivas o no. En la mayoría de las aplicaciones, basta con eliminar unas pocas llamadas al sistema que realizan la comunicación con el dispositivo de audio y sustituirlas por las llamadas a &arts; correspondientes.</para>

<para
>Yo he realizado dos adaptaciones como demostración del concepto: <application
>mpg123</application
> y <application
>quake</application
>. Los parches se puede obtener <ulink url="http://space.twc.de/~stefan/kde/download/artsc-patches.tar.gz"
>aquí</ulink
>. Usted mismo puede enviar sus propios parches al mantenedor de &arts; o de otros paquetes de software para facilitar el uso de &arts; en su código.</para>

</sect2>

<sect2 id="capiwalkthru">
<title
>Un vistazo rápido</title>

<para
>Enviar audio al servidor de sonido a través de la <acronym
>API</acronym
> es muy sencillo:</para>
<procedure>
<step
><para
>Incluya el archivo de cabecera utilizando <userinput
>#include &lt;artsc.h&gt;</userinput
>.</para
></step>
<step
><para
>Inicialice la <acronym
>API</acronym
> con <function
>arts_init()</function
>.</para
></step>
<step
><para
>Construya una transmisión de muestras con <function
>arts_play_stream()</function
>.</para
></step>
<step
><para
>Configure los parámetros específicos con <function
>arts_stream_set()</function
>.</para
></step>
<step
><para
>Escriba los datos de las muestras en la transmisión con <function
>arts_write()</function
>.</para
></step>
<step
><para
>Cierre la transmisión con <function
>arts_close_stream()</function
>.</para
></step>
<step
><para
>Libere la <acronym
>API</acronym
> con <function
>arts_free()</function
>.</para
></step>
</procedure>

<para
>Este ejemplo es un pequeño programa que ilustra el funcionamiento:</para>

<programlisting
>#include &lt;stdio.h&gt;
#include &lt;artsc.h&gt;
int main()
{
    arts_stream_t canal;
    char datos[8192];
    int bytes;
    int error;

    error = arts_init();
    if (error &lt; 0)
    {
        fprintf(stderr, "error en arts_init: %s\n", arts_error_text(error));
        return 1;
    }

    stream = arts_play_stream(44100, 16, 2, "probar_arts");

    while((bytes = fread(datos, 1, 8192, stdin)) &gt; 0)
    {
        error = arts_write(canal, datos, bytes);
        if(error &lt; 0)
        {
            fprintf(stderr, "error en arts_write: %s\n", arts_error_text(error));
            return 1;
        }
    }

    arts_close_stream(canal);
    arts_free();

    return 0;
}
</programlisting>
</sect2>

<sect2 id="capiartscconfig">
<title
>Compilación y enlace: <application
>artsc-config</application
></title>

<para
>Para compilar y enlazar de un forma sencilla los programas que utilicen la <acronym
>API</acronym
> para C de &arts;, se proporciona la utilidad <application
>artsc-config</application
> que sabe qué bibliotecas son necesarias para el enlace y dónde se encuentran los archivos de inclusión. Se ejecuta utilizando</para>

<screen
><userinput
><command
>artsc-config</command
> <option
>--libs</option
></userinput
>
</screen>

<para
>para determinar las bibliotecas, y </para>

<screen
><userinput
><command
>artsc-config</command
> <option
>--cflags</option
></userinput
>
</screen>

<para
>para establecer parámetros de compilación de C adicionales. El ejemplo anterior se compilaría con la línea de órdenes:</para>

<screen
><userinput
><command
>cc</command
> <option
>-o artsctest artsctest.c `artsc-config --cflags` `artsc-config --libs`</option
></userinput>

<userinput
><command
>cc</command
> <option
>-o artsctest</option
> <option
>artsctest.c</option
> <option
>`artsc-config --cflags`</option
> <option
>`artsc-config --libs`</option
></userinput
>
</screen>

</sect2>

<sect2 id="c-api-reference">
<title
>Referencia de la biblioteca</title>

<para
>[POR HACER: generar la documentación de artsc.h utilizando kdoc] </para>

</sect2>

</sect1>
</chapter>
