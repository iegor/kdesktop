<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.2-Based Variant V1.1//EN"
"dtd/kdex.dtd" [
  <!ENTITY kappname "&ksplash;">
  <!ENTITY package "kdebase">
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % Brazilian-Portuguese "INCLUDE">
]>

<book lang="&language;">

<bookinfo>
<title
>O Manual do &ksplash;</title>

<authorgroup>
<author
>&Teemu.Rytilahti; &Teemu.Rytilahti.mail; </author>

<othercredit role="developer"
>&Brian.C.Ledbetter; &Brian.C.Ledbetter.mail; </othercredit>

<othercredit role="developer"
>&Ravikiran.Rajagopal; &Ravikiran.Rajagopal.mail; </othercredit>

<othercredit role="translator"
><firstname
>Marcus</firstname
><surname
>Gama</surname
><affiliation
><address
><email
>marcus.gama@gmail.com</email
></address
></affiliation
><contrib
>Tradução</contrib
></othercredit
> 

</authorgroup>

<copyright>
<year
>2003</year>
<holder
>Teemu Rytilahti</holder>
</copyright>
<copyright>
<year
>2003-04</year>
<holder
>Ravikiran Rajagopal</holder>
</copyright>
<legalnotice
>&FDLNotice;</legalnotice>

<date
>2003-01-10</date>
<releaseinfo
>1.01.00</releaseinfo>

<abstract>
<para
>O &ksplash; é uma bela tela de abertura que mostra o progresso de um aplicativo que está sendo carregado.</para>
</abstract>

<keywordset>
<keyword
>KDE</keyword>
<keyword
>kdebase</keyword>
<keyword
>ksplash</keyword>
<keyword
>ksplashml</keyword>
<keyword
>tela de abertura</keyword>
<keyword
>colírio para os olhos</keyword>
</keywordset>

</bookinfo>

<chapter id="introduction">
<title
>Introdução</title>

<para
>O &ksplash; é uma bela tela de abertura que mostra o progresso de um aplicativo que está sendo carregado. Por favor relate qualquer problema ou solicitação de recurso para as listas de correio do &kde;. Os principais recursos do &ksplash;: </para>
<simplelist>
<member
>Suporte a temas</member>
<member
>Usa plugins para completa personalização</member>
<member
>Pode ser usado por qualquer aplicativo que usa DCOP</member>
</simplelist>

<para
>Este manual mostrará como criar temas para usar com plugins que já estão disponíveis. Se nenhum dos plugins disponíveis satisfizer suas preferências, você pode aprender como personalizar a aparência do &ksplash; completamente escrevendo um plugin em C++. </para>
</chapter>

<chapter id="using-themes">
<title
>Usando temas</title>

<para
>Para usar temas do <ulink url="http://www.kde-look.org"
>KDE-Look</ulink
>, extraia-os para <filename
>~/.kde/share/apps/ksplash/Themes/</filename
> no caso de um usuário simples, ou para <filename
>$<envar
>KDEDIR</envar
>/share/apps/ksplash/Themes/</filename
> para tornar-los disponíveis para todos os usuários do sistema.</para>

<para
>Você pode também usar o módulo de <guilabel
>Tela de Abertura</guilabel
> em <guilabel
>Aparência</guilabel
> no centro de controle do &kde; para fazer isto automaticamente.</para>

<sect1 id="using-kcontrol-module">
<title
>Usando o Módulo do &kcontrol;</title>

<para
>Este módulo permite instalar, testar e remover temas do &ksplash;.</para>

<para
>O lado inferior do módulo é uma lista dos temas do &ksplash; atualmente disponíveis. Conforme você seleciona um, uma previsão será exibida na parte principal da janela. Quando você tiver selecionado o que deseja usar, pressione <guibutton
>OK</guibutton
> ou <guibutton
>Aplicar</guibutton
>. Pressione <guibutton
>Cancelar</guibutton
> para sair do módulo sem realizar mudanças, e <guibutton
>Padrões</guibutton
> para restaurar a tela de abertura padrão do sistema.</para>

<para
>Para instalar novos módulos, pressione <guibutton
>Adicionar...</guibutton
>, e encontre o tema em seu computador. Você não precisa desempacotar os arquivo do tema, você pode seguramente selecionar o arquivo comprimido do tema. Instalar um tema não faz com que ele fique em uso até você selecioná-lo na lista e pressionar seja o <guibutton
>OK</guibutton
> ou o <guibutton
>Aplicar</guibutton
>.</para>

<para
>Apesar de você pode ver uma previsão da tela de abertura, você pode preferir ver como isto funciona na prática, por exemplo para ver como a animação aparece. Você pode testar temas selecionando-os na lista e clicando o botão <guibutton
>Testar</guibutton
>.</para>

<para
>Você pode também remover temas que você não mais deseja usar, selecionando-os e pressionando o botão <guibutton
>Remover</guibutton
>. Observe que sua conte de usuário pode não ter as permissões para remover temas instalados pelo sistema. É também recomendável que você não desinstale a tela de abertura <guilabel
>Padrão</guilabel
>.</para>

</sect1>

</chapter>

<chapter id="themes">
<title
>Como criar temas para o &ksplash;</title>
<sect1 id="themes-general">
<title
>Geral</title>
<para
>Fazer seu próprio tema para o &ksplash; é fácil. Após você ter terminado seus temas você pode postá-los no <ulink url="http://www.kde-look.org"
>KDE-Look</ulink
> para que outros possam usá-lo.</para>

<sect2 id="theme-syntax">
<title
>Identificando seu tema</title>

<para
>Vamos criar um tema chamado <literal
>MeuTemaLegal</literal
>. Para o tema ser reconhecido pelo &ksplash;, ele deve ser armazenado em uma pasta chamada <filename class="directory"
>MeuTemaLegal</filename
> em <filename class="directory"
>~/.kde/apps/ksplash/Themes/</filename
>. Ele deve ter um arquivo chamado <filename
>Theme.rc</filename
>, contendo as configurações do tema. Você pode especificar uma grande variedade de coisas especiais para o tema, mudar o motor de plugin a ser usado, e muito mais. Você não terá que usar todas as configurações disponíveis; normalmente, as configurações terão um valor padrão aceitável. A sintaxe básica para as entradas no arquivo <filename
>Theme.rc</filename
> é <literal
>[opção] = [valor]</literal
> Você pode encontrar definições de várias opções nas seções seguintes.</para>

<example>
<title
>Arquivo <filename
>Theme.rc</filename
> simples</title>
<programlisting
>[KSplash Theme: MeuTemaLegal]
Name = MeuTemaLegal
Description = Um bel tema usando o motor XpLike
Version = 1.0
Author = Nome Real &lt;correioreal@correio.com.br&gt;
## Usar o motor XpLike para este tema.
Engine = XpLike
Show Icon = false
Welcome Text = Carregando o KDE
</programlisting>
</example>

<para
>Após especificar o nome, a descrição e o autor do tema, você deve primeiro escolher um motor de tema (também conhecido como um plugin). Então, você pode personalizar vários recursos do motor do tema atribuindo pares de valores chave como no arquivo exemplo abaixo.</para>

<important>
<para
>Certifique-se de que o nome da pasta onde os arquivos dos temas são salvos (<filename class="directory"
>~/.kde/apps/ksplash/Themes/MeuTemaLegal</filename
> no nosso caso) e o identificador (<literal
>[Tema do KSplash: MeuTemaLegal] </literal
>, também no nosso caso) do tema no arquivo <filename
>Theme.rc</filename
> sejam idênticos. Caso contrário, o &ksplash; não irá reconhecer o tema.</para>
</important>

</sect2>

<sect2 id="theme-files">
<title
>Arquivos de fundo</title>

<para
>Quando o &ksplash; inicia, ele tenta encontrar uma imagem de fundo para sua resolução de tela atual, se o mecanismo de tema usa uma. O arquivo da imagem de fundo deve ser nomeado no seguinte formato: <filename
>Background-<replaceable
>LLLxAAA</replaceable
>.png</filename
>.</para>

<para
>Por exemplo, você pode usar um arquivo chamado <filename
>Background-1024x768</filename
>. Se a imagem de fundo para sua resolução de tela não for encontrada, ele tenta redimensionar o <filename
>Background.png</filename
> original ou o arquivo especificado no <filename
>Theme.rc</filename
> para adequá-la à resolução atual. O redimensionamento no carregamento certamente tomará mais tempo, logo você deve fornecer imagens de fundo pelo menos nos seguintes tamanhos: 1280x1024, 1024x768 e 800x600.</para>
</sect2>
</sect1>

<sect1 id="theme-engines">
<title
>Opções para Motores de Tema</title>

<sect2 id="default-themes">
<title
>Tema Padrão</title>
<table>
<title
>Opções Padrão do Tema</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Nome</entry>
<entry
>Argumento</entry>
<entry
>Explanação</entry>
</row>
<!-- Statusbar -->
<row>
<entry
>Sempre Mostrar o Progresso</entry>
<entry
>[true/false]</entry>
<entry
>Indica se o progresso do carregamento deve ser mostrado. Padrão é true (verdadeiro).</entry>
</row>
<row>
<entry
>Cor do Texto da Legenda</entry>
<entry
>[cor]</entry>
<entry
>Determina a cor do texto a usar na barra de estado. Por padrão é igual a '#FFFFFF' (branco).</entry>
</row>
<!-- Misc. things -->
<row>
<entry
>Ícones Piscando</entry>
<entry
>[true/false]</entry>
<entry
>Indica se os ícones devem <quote
>piscar</quote
>. ('true': sim; 'false': não). O padrão é 'true'.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="standard-themes">
<title
>Tema Padrão</title>
<table>
<title
>Opções de Tema Padrão</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Nome</entry>
<entry
>Argumento</entry>
<entry
>Explanação</entry>
</row>
<!-- Statusbar -->
<row>
<entry
>Statusbar Position</entry>
<entry
>[top/bottom]</entry>
<entry
>Alterna a posição da barra de estado na tela. O padrão é bottom (inferior).</entry>
</row>
<row>
<entry
>Statusbar Visible</entry>
<entry
>[true/false]</entry>
<entry
>Indica se a barra de estado deve ser mostrada. Padrão é true (verdadeiro).</entry>
</row>
<row>
<entry
>Progress Visible</entry>
<entry
>[true/false]</entry>
<entry
>Indica se o progresso do carregamento deve ser mostrado. Padrão é true (verdadeiro).</entry>
</row>
<!-- Fonts -->
<row>
<entry
>Statusbar Font</entry>
<entry
>[nomedafonte]</entry>
<entry
>A fonte usada na barra de estado. Padrão é Helvetica.</entry>
</row>
<row>
<entry
>Statusbar Font Size</entry>
<entry
>[tamanho]</entry>
<entry
>O tamanho da fonte da barra de estado. Padrão é 16.</entry>
</row>
<row>
<entry
>Statusbar Font Bold</entry>
<entry
>[true/false]</entry>
<entry
>Indica se a fonte da barra de estado deve ser negrito. Padrão é true (verdadeiro).</entry>
</row>
<row>
<entry
>Statusbar Font Italic</entry>
<entry
>[true/false]</entry>
<entry
>Indica se a fonte da barra de estado deve ser itálica. Padrão é false (falso).</entry>
</row>
<!-- Misc. things -->
<row>
<entry
>Statusbar Foreground</entry>
<entry
>[cor]</entry>
<entry
>A cor de frente da barra de estado. Padrão é white (branco).</entry>
</row>
<row>
<entry
>Statusbar Background</entry>
<entry
>[cor]</entry>
<entry
>A cor de fundo da barra de estado. Padrão é black (preto).</entry>
</row>
<row>
<entry
>Statusbar Icon</entry>
<entry
>[true/false]</entry>
<entry
>Indica se a barra de estado deve ter um ícone.</entry>
</row>
<row>
<entry
>Icons Visible</entry>
<entry
>[true/false]</entry>
<entry
>Indica se o ícones devem ser visíveis. Padrão é true (verdadeiro).</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Indica se os ícones devem ficar pulando. Padrão é true (verdadeiro).</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[0-3,10-13]</entry>
<entry
>Posição onde os ícones serão mostrados. Padrão é base-esquerda.</entry>
</row>
<row>
<entry
>Splash Screen</entry>
<entry
>[nome]</entry>
<entry
>Muda a imagem da tela de abertura que será mostrada.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="redmond-themes">
<title
>Redmond theme</title>
<table>
<title
>Opções de tema Redmond</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Nome</entry>
<entry
>Argumento</entry>
<entry
>Explanação</entry>
</row>
<!-- Main elements -->
<row>
<entry
>Background Image</entry>
<entry
>[nomedoarquivo]</entry>
<entry
>Imagem de fundo definida pelo usário para ser usada.</entry>
</row>
<row>
<entry
>User Icon</entry>
<entry
>[Nomedoícone]</entry>
<entry
>Nome de ícone padrão a ser mostrado para o usuário. Padrão é <constant
>ir</constant
>.</entry>
</row>
<row>
<entry
>Welcome Text</entry>
<entry
>[texto]</entry>
<entry
>Texto mostrado na tela de abertura. Padrão é "Welcome".</entry>
</row>
<row>
<entry
>Username Text</entry>
<entry
>[texto]</entry>
<entry
>Texto mostrado ao invés do nome real do usuário.</entry>
</row>
<!-- Positioning elements -->
<row>
<entry
>Welcome Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Posição na tela onde o Texto de Boas Vindas será mostrado.</entry>
</row>
<row>
<entry
>Username Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Posição na tela onde o nome do usuário é mostrado.</entry>
</row>
<row>
<entry
>Action Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Posição na tela onde a ação atual é mostrada.</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[x,y]</entry>
<entry
>Posição na tela onde o ícone do usuário é mostrado.</entry>
</row>
<!-- Show to show.. -->
<row>
<entry
>Show Welcome Text</entry>
<entry
>[true/false]</entry>
<entry
>Alterna a exibição do texto de boas vindas. Padrão é true (verdadeiro).</entry>
</row>
<row>
<entry
>Show Welcome Shadow</entry>
<entry
>[true/false]</entry>
<entry
>Alterna a exibição da sombra do texto de boas vindas. Padrão é ture (verdadeiro).</entry>
</row>
<row>
<entry
>Show Username</entry>
<entry
>[true/false]</entry>
<entry
>Alterna a exibição do nome do usuário. Padrão é true (verdadeiro).</entry>
</row>
<row>
<entry
>Show Action</entry>
<entry
>[true/false]</entry>
<entry
>Alterna a exibição da ação que está sendo executada no momento. Padrão é true (verdadeiro).</entry>
</row>
<row>
<entry
>Show Icon</entry>
<entry
>[true/false]</entry>
<entry
>Indica se o ícone deve ser mostrado. Padrão é true (verdadeiro)</entry>
</row>
<row>
<entry
>Use KDM User Icon</entry>
<entry
>[true/false]</entry>
<entry
>Mostra o ícone de login do usuário. Padrão é true (verdadeiro).</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="macx-themes">
<title
>Tema MacX</title>
<table>
<title
>Opções do Tema MacX</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Nome</entry>
<entry
>Argumento</entry>
<entry
>Explanação</entry>
</row>
<row>
<entry
>Icon Size Minimum</entry>
<entry
>[tamanho]</entry>
<entry
>Atribui o tamanho mínimo dos ícones. Padrão é 16.</entry>
</row>
<row>
<entry
>Icon Size Maximum</entry>
<entry
>[tamanho]</entry>
<entry
>Atribui o tamanho máximo dos ícones. Padrão é 64.</entry>
</row>
<row>
<entry
>Optimized Icon Rendering</entry>
<entry
>[true/false]</entry>
<entry
>Otimiza a renderização de ícones. Padrão é true (verdadeiro).</entry>
</row>
<row>
<entry
>Progress Bar Visible</entry>
<entry
>[true/false]</entry>
<entry
>Padrão é true (verdadeiro).</entry>
</row>
<row>
<entry
>Progress Bar Position</entry>
<entry
>[top/bottom]</entry>
<entry
>Alterna se a barra de estado deve estar na base ou no topo. Padrão é bottom (base).</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Indica se os ícones devem ficar pulando. Padrão é false (falso).</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="mac-classic-themes">
<title
>Tema MacClassic</title>
<table>
<title
>Opções do Tema MacClassic</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Nome</entry>
<entry
>Argumento</entry>
<entry
>Explanação</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[0-3,10-13]</entry>
<entry
>Posição dos ícones na tela. Padrão é base esquerda.</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Indica se os ícones devem ficar pulando. Padrão é false (falso).</entry>
</row>
<row>
<entry
>Icons Visible</entry>
<entry
>[true/false]</entry>
<entry
>Indica se o ícones devem ser visíveis. Padrão é true (verdadeiro).</entry>
</row>
<row>
<entry
>Splash Screen</entry>
<entry
>[nome]</entry>
<entry
>Muda a imagem da tela de abertura que será mostrada.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="themes-2k">
<title
>Tema 2k</title>
<table>
<title
>Opções do Tema 2k</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Nome</entry>
<entry
>Argumento</entry>
<entry
>Explanação</entry>
</row>
<row>
<entry
>Title Background Color</entry>
<entry
>[cor]</entry>
<entry
>A cor de fundo do título. Padrão é dark blue (azul escuro).</entry>
</row>
<row>
<entry
>Title Foreground Color</entry>
<entry
>[cor]</entry>
<entry
>A cor de frente do título. Padrão é white (branco).</entry>
</row>
<row>
<entry
>Status Text Color</entry>
<entry
>[cor]</entry>
<entry
>A cor do texto de estado. Padrão é a mesma de Title Background Color.</entry>
</row>
<row>
<entry
>Rotator Color 1</entry>
<entry
>[cor]</entry>
<entry
>Define a cor do rotacionador 1. Padrão é dark blue (azul escuro).</entry>
</row>
<row>
<entry
>Rotator Color 2</entry>
<entry
>[cor]</entry>
<entry
>Define a cor do rotacionador 2. Padrão é cyan (ciano).</entry>
</row>
<row>
<entry
>Rotator Speed</entry>
<entry
>[valor]</entry>
<entry
>Define a velocidade do rotacionador. Padrão é 30.</entry>
</row>
<row>
<entry
>Window Title</entry>
<entry
>[texto]</entry>
<entry
>Especifica o texto de título da janela.</entry>
</row>
<row>
<entry
>Logo File</entry>
<entry
>[nomedoarquivo]</entry>
<entry
>Define o logotipo usado.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>
</sect1>
</chapter>

<chapter id="from-other-applications">
<title
>Usando o &ksplash; A Partir Do Seu Próprio Aplicativo</title>

<para
>Neste capítulo, nós descreveremos um método simples para usar o &ksplash; como tela de abertura para seu aplicativo &kde;. Se você não desenvolve aplicativos para o &kde;, você pode pular este capítulo.</para>

<sect1 id="basic-other-reqs">
<title
>Requisitos Básicos</title>

<para
>Seu aplicativo &kde; deve ser compatível com &DCOP;. O &DCOP; é a tecnologia do &kde; usada para comunicação entre aplicativos. Se você usa o <ulink url="http://developer.kde.org"
>ambiente de trabalho de aplicativos &kde;</ulink
> padrão, isto é feito automaticamente. Para informações sobre o &DCOP; e tecnologias &kde; correlatas, por favor visite o <ulink url="http://developer.kde.org"
>canto dos desenvolvedores do &kde;</ulink
>.</para>
</sect1>

<sect1 id="other-using">
<title
>Iniciando o &ksplash;</title>

<para
>Antes de seu aplicativo iniciar um trabalho intensivo de computação, ou antes de ele iniciar o carregamento de plugins, &etc;, invoque o &ksplash; como se segue:</para>

<programlisting
>DCOPClient *c = kapp-&gt;dcopClient();
QString erro;
QCString NomeKSplash;
int pid = 0;
QStringList args;
args &lt;&lt; "--theme=MeuTemaLegal" &lt;&lt; "--managed";
if (kapp-&gt;startServiceByDesktopName("ksplash", args, &amp;erro, &amp;NomeKSplash, &amp;pid))
{
  KMessageBox::sorry(0, erro, "Não é possível invocar o KSplash");
  // Algum processamento de erros aqui.
}
</programlisting>

<para
>Nós assumiremos que existe somente uma instância do &ksplash; em execução. Outros casos são ligeiramente mais complexos. Por favor veja a documentação do &DCOP; para mais detalhes.</para>
</sect1>

<sect1 id="show-messages">
<title
>Mostrando mensagens</title>

<para
>Antes de mostrar qualquer mensagem, você precisa configurar o número de passos que serão mostrados. Por exemplo, a inicialização do &kde; se processa em 7 passos.</para>

<programlisting
>QByteArray dados;
    QDataStream arg(dados,IO_WriteOnly);
    arg &lt;&lt; umNumero;
    if (!(c-&gt;send(NomeKSplash, "KSplashIface", "setStartupItemCount(int)", dados))
      // Algum processamento de erros aqui.
</programlisting>

<para
>Sempre que você deseja exibir uma mensagem com ou sem um ícone, use</para>

<programlisting
>arg &lt;&lt; QString("nomeIcone") &lt;&lt; QString("nomePrograma") &lt;&lt; QString("Uma descrição");
    if (!(c-&gt;send(NomeKSplash, "KSplashIface", "programStarted(QString,QString,QString)", dados))
    {
      // Algum processamento de erros aqui.
    }
</programlisting>

<para
>Cada vez que você chama <constant
>programStarted</constant
>, os passos completados são incrementados. Quando seu programa tiver terminado sua inicialização, faça o seguinte para fazer com que a tela de abertura vá embora:</para>

<programlisting
>if (!(c-&gt;send(KSplashName, "KSplashIface", "startupComplete()", data))
    {
      // Algum processamento de erro aqui.
    }
</programlisting>

<para
>É isto! Você não precisa fazer nada mais para aproveitar todas as vantagens que o &ksplash; tem para oferecer.</para>

</sect1>
</chapter>

<!-- FIXME: Better to leave this out until it's written, or the translators -->
<!-- will have to still translate it ... -->

<chapter id="wrplugins">
<title
>Escrevendo novos plugins para o &ksplash;</title>

<para
>Escrever novos plugins para o &ksplash; não é difícil. Neste capítulo, nós escreveremos um plugin simples que emulará a tela de abertura de um sistema operacional bem conhecido. Este tutorial assume que você conhece os fundamentos do C++, e um pouco de programação KDE/Qt.</para>

<sect1 id="basic-requirements">
<title
>Requisitos Básicos</title>
<para
>Nós criaremos um plugin chamado <literal
>2k</literal
>. O nome do plugin é usado em vários lugares, e é importante que você use-o com consistência de modo que o plugin seja reconhecido pelo &ksplash;. Plugins do &ksplash; são atualmente bibliotecas de carregamento dinâmico com a seguinte convenção de nomes: </para>
<simplelist>
<member
>A biblioteca deve ser nomeado como <filename
>ksplash+nome_tema_minúsculas</filename
>. Para nosso tema, ela será <filename
>ksplash2k</filename
>.</member>
<member
>Ela deve ter um arquivo desktop correspondente que é nomeado como <filename
>ksplash+nome_tema_minúsculas.desktop</filename
>. Para nosso tema, ele será <filename
>ksplash2k.desktop</filename
>. </member>
<member
>Finalmente, o objeto que será retornado pela biblioteca deve ser de uma classe que é nomeada <literal
>Theme+nome_tema</literal
>. Para nosso exemplo, ela deve ser <literal
>Theme2k</literal
>.</member>
</simplelist>
<para
>Não se preocupe se você não entendeu tudo acima. Nós abordaremos cada um destes pontos em detalhes mais tarde. Outro detalhe muito importante é que a classe de plugin deve ser derivada de <literal
>ThemeEngine</literal
>. </para>
</sect1>
<sect1 id="skeleton">
<title
>Construindo o esqueleto do ambiente de trabalho</title>
<para
>Nós usaremos o ambiente de trabalho de aplicativos do &kde; que tomará conta da construção do plugin e fornecerá uma plataforma independente sem nenhum trabalho de nossa parte. Para fazer isto, certifique-se de que possui o pacote <filename
>kdesdk</filename
> instalado. Execute o comando <literal
>kapptemplate</literal
> para produzir um aplicativo nomeado "2k". Isto criará uma pasta de nível superior que contém arquivos genéricos como AUTHORS, &etc;. Nós estamos mais interessados na subpasta chamada <filename class="directory"
>2k</filename
>. Vá para esta subpasta e exclua todos os arquivos nela. Agora nós temos o esqueleto que precisamos. </para>
<para
>O próximo passo é criar um arquivo <filename
>.desktop</filename
> que, quando instalado, dirá ao &ksplash; que seu plugin está disponível. Consistente com a convenções de nomes estabelecida <link linkend="basic-requirements"
>na seção anterior</link
>, crie um arquivo chamado <filename
>ksplash2k.desktop</filename
> nesta pasta. Ele deve conter as seguintes linhas: </para>
<programlisting
><literal>
[Desktop Entry]
Encoding=UTF-8
Type=Service
Comment=KSplash Plugin
Name=KSplash2k
ServiceTypes=KSplash/Plugin
X-KDE-Library=ksplash2k
X-KSplash-Default=true
X-KSplash-PluginName=2k
X-KSplash-ObjectName=Theme2k
</literal
>
</programlisting>
<para
>O <literal
>Encoding</literal
>, <literal
>Type</literal
>, <literal
>Comment</literal
> e <literal
>ServiceTypes</literal
> são o mesmo para todos os plugins. O nome do plugin e o nome da biblioteca segue as convenções estabelecidas anteriormente. A entrada <literal
>X-KSplash-Default</literal
> recebe um valor booleano que determina se ele é mostrado no módulo de configuração do painel de controle por padrão. Exceto para casos muito raros, isto deve ser <constant
>true</constant
>(verdadeiro). </para>
</sect1>
<sect1 id="headerfile">
<title
>Declaração da classe do plugin</title>
<para
>Agor que nós terminamos o trabalho preliminar, vamos para a parte mais divertida - criar uma classe que fornecerá o comportamento que nós desejamos. Apesar de sermos livre para fazer esta classe fazer quase qualquer coisa que nós quisermos, existem algumas poucas restrições.</para>
<orderedlist>
<listitem
><para
>Classes de plugin devem ser derivadas da classe <constant
>ThemeEngine</constant
>.</para
></listitem>
<listitem
><para
>Classes de plugin devem ser nomeadas de acordo com a regra: <classname
>Theme+Nome_Plugin</classname
>.</para
></listitem>
<listitem
><para
>Classes de plugin devem fornecer uma função <literal
>static</literal
> chamada <function
>names</function
> que retorna uma lista dos nomes pela qual ela pode ser invocada.</para
></listitem>
<listitem
><para
>Se o plugin pode ser configurado no módulo do centro de controle, ele deve fornecer uma classe baseada em <literal
>ThemeEngineConfig</literal
> para a configuração.</para
></listitem>
<listitem
><para
>Classes de plugin devem sobrescrever pelo menos as funções virtuais de <function
>slotSetText</function
>, <function
>slotSetPixmap</function
>, <function
>slotUpdateProgress</function
> e <function
>slotUpdateSteps</function
> para torná-las úteis.</para
></listitem>
<listitem
><para
>O construtor deve tomar a forma <literal
>ThemeEngine( QWidget *parent, const char *name, const QStringList &amp;args )</literal
> de modo que ele possa ser usado com o <classname
>KGenericFactory</classname
>.</para
></listitem>
</orderedlist>
<para
>O último requisito pode ser mais complicado, mas, como veremos mais tarde, adicionando uma linha simples ao seus arquivos fonte, você pode normalmente ignorá-lo.</para>
</sect1>
<sect1 id="headercode">
<title
>Código para o arquivo de cabeçalho</title>
<para
>Fornecida as constantes, nós agora iremos ver que o arquivo de cabeçalho <filename
>theme2k.h</filename
> se parecerá com este:</para>
<example>
<title
>Lista para <filename
>theme2k.h</filename
></title>
<programlisting
>#ifndef __THEME2K_H__
#define __THEME2K_H__

#include &lt;qlabel.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kdialogbase.h&gt;
#include &lt;kpixmap.h&gt;
#include &lt;ksplash/themeengine.h&gt;

class RotWidget;

class Cfg2k: public ThemeEngineConfig
{
  Q_OBJECT
public:
  Cfg2k( KConfig * );
};

class ObjKsTheme;
class Theme2k: public ThemeEngine
{
  Q_OBJECT
public:
  Theme2k( QWidget *, const char *, const QStringList&amp; );

  inline const QString name()
  {
    return( QString("KSplash2k") );
  }
  inline const KDialogBase *config( KConfig *kc )
  {
    return new Cfg2k( kc );
  }
  static QStringList names()
  {
    QStringList Names;
    Names &lt;&lt; "KSplash2k";
    Names &lt;&lt; "ks2k";
    Names &lt;&lt; "2k";
    Names &lt;&lt; "2000";
    return( Names );
  };

public slots:
  inline void slotSetText( const QString&amp; s )
  {
    if( mText &amp;&amp; mText-&gt;text() != s ) mText-&gt;setText( s );
  };

private:
  void initUi();
  void readSettings();

  QLabel *mText;
  RotWidget *mRotator;
  QColor mTBgColor, mTFgColor, mRotColor1, mRotColor2, mStatusColor;
  int mRotSpeed;
  QString mWndTitle, mLogoFile;
};

#endif
</programlisting>
</example>
<para
>Vamos analisar a lista acima. A classe <classname
>Theme2k</classname
> satisfaz a convenção de nomes, e é filha de <classname
>ThemeEngine</classname
>. Ela fornece um <methodname
>Theme2k::names()</methodname
>, e possui um construtor que recebe os seguintes parâmetros: <function
>Theme2k( QWidget *, const char *, const QStringList&amp; );</function
> e também fornece um método <methodname
>Theme2k::slotSetText()</methodname
> simples. Por enquanto, não se preocupe com a classe <classname
>RotWidget</classname
>. Ela é um pequeno widget que fornece algum colírio para os olhos do usuário. Nosso plugin é muito simples e não exibe nenhum ícone ou mostra uma barra de progresso. Se você gostaria de exibir ícones, sobrescreva a função <function
>slotSetPixmap</function
>. Funções semelhantes existem para configurar o intervalo da barra de progresso (<function
>slotUpdateSteps</function
>) e incrementar (<function
>slotUpdateProgress</function
>) o passo atual. </para>
</sect1>
<sect1 id="Implementation">
<title
>Implementação do plugin</title>
<para
>Nós examinaremos somente as partes relevantes da implementação. Para uma listagem de toda implementação, por favor veja o apêndice. A primeira coisa que nós faremos é obter o requisito da biblioteca desta maneira:</para>
<example>
<title
>Requisito da biblioteca</title>
<programlisting
>K_EXPORT_COMPONENT_FACTORY( ksplash2k, KGenericFactory&lt;Theme2k&gt; );
</programlisting>
</example>
<para
>O macro <constant
>K_EXPORT_COMPONENT_FACTORY</constant
> é declarado em <filename
>kgenericfactory.h</filename
>. Vamos para o construtor! Uma vez que é um plugin muito simples, o construtor é consideravelmente simples.</para>
<example>
<title
>Construtor do plugin</title>
<programlisting
>Theme2k::Theme2k( QWidget *mae, const char *nome, const QStringList &amp;argumentos  )
    :ThemeEngine( mae, nome, argumentos )
{
  readSettings();
  initUi();
}
</programlisting>
</example>
<para
>O método <function
>readSettings()</function
> ilustra a maneira correta de obter as configurações do seu tema. (Você deseja que as pessoas usem seus plugins em seus temas, não é?)</para>
<example>
<title
>Obtendo configurações do tema</title>
<programlisting
>void Theme2k::readSettings()
{
  if( !mTheme )
    return;

  KConfig *cfg = mTheme-&gt;themeConfig();
  if( !cfg )
    return;

  cfg-&gt;setGroup( QString("KSplash Theme: %1").arg(mTheme-&gt;theme()) );

  QColor TCorFundoPadrao( Qt::darkBlue );
  QColor TCorTextoPadrao( Qt::white );

  mTCorFundo = cfg-&gt;readColorEntry( "Cor de Fundo do Título", &amp;TCorFundoOmissao );
  mTCorTexto = cfg-&gt;readColorEntry( "Cor do Texto do Título", &amp;TCorTextoOmissao );
  mCorEstado = cfg-&gt;readColorEntry("Cor do Texto do Estado", &amp;mTCorFundo );

  QColor Rot1Padrao( Qt::darkBlue );
  QColor Rot2Padrao( Qt::cyan );
  mRotCor1 = cfg-&gt;readColorEntry( "Cor 1 da Rotação", &amp;Rot1Padrao );
  mRotCor2 = cfg-&gt;readColorEntry( "Cor 2 da Rotação", &amp;Rot2Padrao );

  mRotVelocidade = cfg-&gt;readNumEntry( "Velocidade da Rotação", 30 );
  mTitulo = cfg-&gt;readEntry( "Título da Janela", i18n("Espere por favor") );
  mLogotipo = cfg-&gt;readEntry( "Arquivo do Logotipo", QString::null );
}
</programlisting>
</example>
<para
>Uma vez que nós gostamos de nossos usuários, nós fornecemos padrões adequados para os parâmetros que não estão presentes no arquivo de tema. Observe que nós devemos sempre configurar nosso grupo para "KSplash Theme: nome_tema" para manter compatibilidade com especificações de tema futuras. O método <function
>initUI()</function
> não é muito interessante, uma vez que ele simplesmente constrói os widgets. Por favor veja o apêndice para detalhes. </para>
</sect1>
<sect1 id="compilingfile">
<title
>Compilando o plugin</title>
<para
>Uma vez que decidimos usar o ambiente de trabalho do &kde; para compilação do plugin, nós precisamos criar um <filename
>Makefile.am</filename
>. Ele deve se parecer com isto:</para>
<example>
<title
>Lista do <filename
>Makefile.am</filename
></title>
<programlisting
>INCLUDES = $(all_includes)

kde_module_LTLIBRARIES = ksplash2k.la

ksplash2k_la_SOURCES = theme2k.cpp rotwidget.cpp
ksplash2k_la_LDFLAGS = $(all_libraries) $(KDE_RPATH)
ksplash2k_la_LIBADD = $(LIB_KDEUI) -lksplashthemes

METASOURCES = AUTO

noinst_HEADERS        = theme2k.h rotwidget.h

servicesdir = $(kde_servicesdir)
services_DATA = ksplash2k.desktop

themedir = $(kde_datadir)/ksplash/Themes/2k
theme_DATA = Theme.rc Preview.png
</programlisting>
</example>
<para
>Para mais informações sobre como criar os arquivos <filename
>Makefile.am</filename
> para o &kde;, por favor veja a <ulink url="http://developer.kde.org/documentation/other/makefile_am_howto.html"
>página Web</ulink
> dos programadores do &kde;. A única coisa a notar é que nós oferecemos um tema padrão baseado neste plugin e oferecemos uma imagem de previsão para o mesmo. Como cortesia para os seus usuários, você deverá oferecer um <filename
>Theme.rc</filename
> de exemplo e que ilustre a utilização das várias opções.</para>
</sect1>
</chapter>

<chapter id="faq">
<title
>Perguntas e Respostas</title>
&reporting.bugs; &updating.documentation; <qandaset id="faqlist">
<qandaentry>
<question>
<para
>Eu não consigo encontrar nenhum tema que funcione com o &ksplash;. Porque isto?</para>
</question>
<answer>
<para
>Você provavelmente não tem os plugins corretos para o tema. Os plugins estão no pacote <literal
>kde-artwork</literal
>. Baixe-os e instale-os, e tente novamente.</para>
</answer>
</qandaentry>
<qandaentry>
<question>
<para
>O que é o arquivo <filename
>Theme.rc</filename
> e como eu posso criar um?</para>
</question>
<answer>
<para
>O <filename
>Theme.rc</filename
> é o arquivo onde você pode especificar as configurações do seu tema. Para mais informações, dê uma olhada em <link linkend="themes"
>Como criar temas para o &ksplash;</link
>. </para>
</answer>
</qandaentry>
</qandaset>
</chapter>

<chapter id="credits">
<title
>Créditos e Licença</title>

<para
>&ksplash;</para>

<para
>Direitos de Cópia do Programa &copy; 2003 &Ravikiran.Rajagopal; &Ravikiran.Rajagopal.mail;</para>

<itemizedlist>
<title
>Contribuidores</title>
<listitem
><para
>&Brian.C.Ledbetter; &Brian.C.Ledbetter.mail;</para>
</listitem>
</itemizedlist>

<para
>Direitos de Cópia da Documentação &copy; 2003 &Teemu.Rytilahti; &Teemu.Rytilahti.mail;</para>
&underFDL; &underGPL; </chapter>

<appendix id="installation">
<title
>Instalação</title>

<sect1 id="requirements">
<title
>Requisitos</title>

<para
>Para usar com sucesso o &ksplash;, você precisa do &kde; versão 3.2 ou superior. Alguns temas pode requerer plugins específicos. Se um dos temas não funcionar, por favor contacte o autor do tema para descobrir onde obter o plugin apropriado.</para>

</sect1>

<sect1 id="compilation">
<title
>Compilação e Instalação</title>
&install.compile.documentation; </sect1>
</appendix>
<appendix id="srccode">
<title
>Código fonte</title>
<sect1 id="theme2kcpp">
<title
>Lista do <filename
>theme2k.cpp</filename
></title>
<programlisting
>#include &lt;qlabel.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kapplication.h&gt;
#include &lt;kconfig.h&gt;
#include &lt;kdebug.h&gt;
#include &lt;kdialogbase.h&gt;
#include &lt;kgenericfactory.h&gt;
#include &lt;kglobalsettings.h&gt;
#include &lt;klocale.h&gt;
#include &lt;ksplash/objkstheme.h&gt;
#include &lt;kstandarddirs.h&gt;

#include "rotwidget.h"
#include "theme2k.h"
#include "theme2k.moc"

K_EXPORT_COMPONENT_FACTORY( ksplash2k, KGenericFactory&lt;Theme2k&gt; );

Cfg2k::Cfg2k( KConfig * )
{}

Theme2k::Theme2k( QWidget *parent, const char *name, const QStringList &amp;args
 )
    :ThemeEngine( parent, name, args )
{
  readSettings();
  initUi();
}

void Theme2k::initUi()
{
  QVBox *vbox = new QVBox( this );
  vbox-&gt;setFrameShape( QFrame::WinPanel );
  vbox-&gt;setFrameShadow( QFrame::Raised );

  QHBox *labelBox = new QHBox( vbox );
  labelBox-&gt;setPalette( mTBgColor );
  labelBox-&gt;setMargin( 1 );
  QLabel *lbl = new QLabel( mWndTitle, labelBox );
  lbl-&gt;setFont( QFont( "Arial", 12, QFont::Bold ) );
  lbl-&gt;setPaletteForegroundColor( mTFgColor );

  QLabel *logo = new QLabel( vbox );
  logo-&gt;setPalette( Qt::white );

  QString px( locate( "appdata", mTheme-&gt;themeDir() +
(mLogoFile.isNull()?QString("/Logo.png"):mLogoFile) ) );
  if (px.isNull())
    px = locate("appdata","Themes/Default/splash_top.png");
  if( !px.isNull() )
  {
    QPixmap pix( px );
    logo-&gt;setPixmap( pix );
  }
  else
  {
    logo-&gt;setText( "&lt;B&gt;KDE&lt;/B&gt;2000" );
    logo-&gt;setAlignment( AlignCenter|AlignVCenter );
  }

  mRotator = new RotWidget( vbox, mRotColor1, mRotColor2, mRotSpeed );

  QHBox *hbox = new QHBox( vbox );
  labelBox-&gt;setSpacing( 4 );
  labelBox-&gt;setMargin( 4 );

  mText = new QLabel( hbox );
  mText-&gt;setPaletteForegroundColor( mStatusColor );
  mText-&gt;setPaletteBackgroundColor( mTFgColor );
  mText-&gt;setText( mWndTitle );
  mText-&gt;setFixedHeight( 48 );

  setFixedSize( vbox-&gt;sizeHint() );
  QRect rect(KGlobalSettings::splashScreenDesktopGeometry());
  move( rect.x() + (rect.width() - size().width())/2,
        rect.y() + (rect.height() - size().height())/2 );
}

void Theme2k::readSettings()
{
  if( !mTheme )
    return;

  KConfig *cfg = mTheme-&gt;themeConfig();
  if( !cfg )
    return;

  cfg-&gt;setGroup( QString("KSplash Theme: %1").arg(mTheme-&gt;theme()) );

  QColor DefaultTBgColor( Qt::darkBlue );
  QColor DefaultTFgColor( Qt::white );

  mTBgColor = cfg-&gt;readColorEntry( "Title Background Color",
&amp;DefaultTBgColor );
  mTFgColor = cfg-&gt;readColorEntry( "Title Foreground Color",
&amp;DefaultTFgColor );
  mStatusColor = cfg-&gt;readColorEntry("Status Text Color", &amp;mTBgColor );

  QColor DefaultRot1( Qt::darkBlue );
  QColor DefaultRot2( Qt::cyan );
  mRotColor1 = cfg-&gt;readColorEntry( "Rotator Color 1", &amp;DefaultRot1 );
  mRotColor2 = cfg-&gt;readColorEntry( "Rotator Color 2", &amp;DefaultRot2 );

  mRotSpeed = cfg-&gt;readNumEntry( "Rotator Speed", 30 );
  mWndTitle = cfg-&gt;readEntry( "Window Title", i18n("Please wait...") );
  mLogoFile = cfg-&gt;readEntry( "Logo File", QString::null );
}
</programlisting>
</sect1>
<sect1 id="rotwidgeth">
<title
>Lista do <filename
>rotwidget.h</filename
></title>
<programlisting
>#ifndef         __ROTWIDGET_H__
#define         __ROTWIDGET_H__

#include &lt;qlabel.h&gt;
#include &lt;qtimer.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kdialogbase.h&gt;
#include &lt;kpixmap.h&gt;

/**
 * @short Display a rotating-gradient widget.
 */
class         RotWidget: public QWidget
{
  Q_OBJECT
public:
  RotWidget( QWidget *, const QColor&amp;, const QColor&amp;, int );
  ~RotWidget();

private slots:
  void stepEvent();

protected:
  void        preparePixmap( int );
  void        paintEvent( QPaintEvent * );
  void        resizeEvent( QResizeEvent * );

  QColor m_color1, m_color2;
  int m_step, m_speed;
  QTimer *m_stepTimer;

  QList&lt;KPixmap&gt; m_stepPixmap;
};

#endif
</programlisting>
</sect1>
<sect1 id="rotwidgetcpp">
<title
>Lista do <filename
>rotwidget.cpp</filename
></title>
<programlisting
>#include &lt;kdebug.h&gt;
#include &lt;kdialogbase.h&gt;
#include &lt;kpixmapeffect.h&gt;

#include &lt;qlabel.h&gt;
#include &lt;qpainter.h&gt;
#include &lt;qwidget.h&gt;

#include "rotwidget.h"
#include "rotwidget.moc"

RotWidget::RotWidget( QWidget *parent, const QColor&amp; c1, const QColor&amp;
c2, int sp )
    :QWidget(parent), m_color1(c1), m_color2(c2), m_step(0), m_speed(sp)
{
  if( (m_speed &lt;= 0) || (m_speed &gt; 20) )
    m_speed = 1;
  setFixedHeight( 6 );

  for( int i = 0; i &lt;= width(); i++ )
    preparePixmap( i );

  m_stepTimer = new QTimer( this );
  connect(m_stepTimer, SIGNAL(timeout()), this, SLOT(stepEvent()));
  m_stepTimer-&gt;start( 50 );
}

RotWidget::~RotWidget()
{
}

void RotWidget::stepEvent()
{
  // This is inefficient as we create too many pixmaps, optimize later.
  m_step += m_speed;
  if( m_step &gt; width() )
    m_step = 0;
  repaint( true );
}

// Todo: Optimize drawing.
void RotWidget::paintEvent( QPaintEvent *pe )
{
  QPainter p;
  p.begin( this );

  QRect r = pe-&gt;rect();

  if( m_stepPixmap.at( m_step ) )
    bitBlt( this, r.x(), r.y(), m_stepPixmap.at( m_step ), r.x(), r.y(),
r.width(), r.height() );
  else
    p.fillRect( rect(), Qt::black );
  p.end();
}

void RotWidget::resizeEvent( QResizeEvent *re )
{
  m_stepPixmap.clear();
  for( int i = 0; i &lt;= re-&gt;size().width(); i++ )
    preparePixmap( i );
}

void RotWidget::preparePixmap( int step )
{
  if( step &lt; 0 )
    return;

  // Explicitly draw our first pixmap. The rest we will bitBlt() from here.
  if( step == 0 )
  {
    KPixmap tmp; tmp.resize( size().width() / 2, size().height() );
    KPixmap tmp2(tmp);
    KPixmapEffect::gradient( tmp, m_color1, m_color2,
KPixmapEffect::HorizontalGradient );
    KPixmapEffect::gradient( tmp2, m_color2, m_color1,
KPixmapEffect::HorizontalGradient );
    KPixmap *px = new KPixmap( size() );
    QPainter p;
    p.begin( px );
    p.drawPixmap( 0, 0, tmp );
    p.drawPixmap( size().width()/2, 0, tmp2 );
    p.end();
    m_stepPixmap.append( px );
  }
  else if( m_stepPixmap.at( step-1 ) )
  {
    QPixmap *prev = m_stepPixmap.at( step-1 );
    QPixmap next; next.resize( size() );
    // convert
    // prev = "[------------]"
    // to
    // next = "------------]["
    bitBlt( &amp;next, 0, 0, prev, 1, 0, prev-&gt;width()-1, prev-&gt;height()
);
    bitBlt( &amp;next, width()-1, 0, prev, 0, 0, 1, prev-&gt;height() );
    KPixmap *n = new KPixmap( next );
    m_stepPixmap.append( n );
  }
}
</programlisting>
</sect1>
</appendix>

&documentation.index;
</book>

<!--
Local Variables:
mode: xml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:

vim:tabstop=2:shiftwidth=2:expandtab
-->
