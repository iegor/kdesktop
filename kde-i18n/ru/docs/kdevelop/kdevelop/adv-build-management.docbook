<chapter id="adv-build-management">
<title
>Расширенное использование менеджера проектов</title>
<indexterm zone="adv-build-management"
><primary
>&automake;</primary
></indexterm>

<sect1 id="buildconfigurations">
<title
>Несколько конфигураций сборки</title>
<indexterm zone="buildconfigurations"
><primary
>конфигурации сборки</primary
><secondary
>несколько</secondary
></indexterm>

<para
>(... в процессе написания ...) </para>

</sect1
> <!-- buildconfigurations -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="crosscompiling">
<title
>Кросс-платформенное компилирование</title>
<indexterm zone="crosscompiling"
><primary
>кросс-платформенное компилирование</primary
></indexterm>
<indexterm zone="crosscompiling"
><primary
>сборка, компиляция</primary
><secondary
>кросс-платформенное</secondary
></indexterm>
<indexterm zone="crosscompiling"
><primary
><option
>--host</option
></primary
></indexterm>

<para
>Если у вас есть кросс-компиляторы, вы можете компилировать программы под процессоры и операционные системы, отличные от текущей. Коллекция компиляторов &GNU; GCC может также быть собрана с поддержкой кросс-компиляции. Для подробностей см. <ulink url="info://gcc/Cross-Compiler"
>info-страницы GCC</ulink
>. Некоторые дистрибутивы &Linux; также предоставляют уже собранные кросс-платформенные версии компиляторов. </para>

<para
>Выполнить кросс-компиляцию пакетов, основанных на <application
>automake</application
>, можно указанием ключа <option
>--host</option
> в команде запуска сценария configure и установкой переменных окружения <envar
>CC</envar
> и <envar
>CXX</envar
>. В &kdevelop; есть возможность создания нескольких конфигураций сборки. Для подробностей см. <xref linkend="buildconfigurations"/>. После того, как вы создали новую конфигурацию сборки через диалог <menuchoice
><guimenu
>Проект</guimenu
> <guimenuitem
>Параметры проекта...</guimenuitem
></menuchoice
>, добавьте ключ </para>

<screen
><option
>--host=</option
><replaceable
>платформа</replaceable
></screen>

<para
>в опции configure. <replaceable
>Платформа</replaceable
> указывается в виде </para>

<programlisting
>процессор-поставщик-ОС</programlisting>
<para
>или</para>
<programlisting
>процессор-поставщик-ядро-ОС</programlisting>

<para
>Кроем, того вы можете использовать краткую форму, например <wordasword
>i386-linux</wordasword
> или <wordasword
>arm-elf</wordasword
>. </para>

</sect1
> <!-- crosscompiling -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id="qtembedded">
<title
>Qt/Embedded</title>
<indexterm zone="qtembedded"
><primary
>embedded</primary
><secondary
>Qt</secondary
></indexterm>
<indexterm zone="qtembedded"
><primary
>Qt/Embedded</primary
></indexterm>
<indexterm zone="qtembedded"
><primary
>Qtopia</primary
></indexterm>
<indexterm zone="qtembedded"
><primary
>framebuffer</primary
></indexterm>

<para
>&qte; &mdash; это вариант библиотеки &Qt;, который не использует X Window, а прорисовывает графику напрямую на framebuffer системы &Linux;. Это полезно для встраиваемых систем с ограничениями по использованию памяти. &API; этой библиотеки полностью совместимо с библиотекой для X11. </para>

<para
>Разработка приложения для &qte; в &kdevelop; не очень отличается от разработки под &Qt; для X11. На самом деле, вы даже можете использовать одну кодовую базу для обоих версий. Если вы используете менеджер autoproject, вы можете переключиться на версию embedded передачей ключа <option
>--enable-embedded</option
> скрипту configure. Это можно сделать в диалоге <menuchoice
><guimenu
>Проект</guimenu
> <guimenuitem
>Параметры проекта...</guimenuitem
></menuchoice
> в разделе <guilabel
>Параметры configure</guilabel
>. Ключом <option
>--with-qt-dir=DIR</option
> можно указать каталог, в котором установлен &qte;. </para>

<para
>После конфигурации и сборки вашего приложения с этими ключами, оно будет использовать библиотеку <filename
>libqpe.so</filename
>. Его нельзя будет запустить совместно с X11. Чтобы протестировать его, запустите его из программы <application
>qvfb</application
> (&Qt; Virtual Frame Buffer). </para>

<screen
><command
>app <option
>-qws</option
> <option
>-display QVFb:0</option
></command
></screen>

<para
>В можете создать несколько сборочных конфигураций, как описано выше. </para>

<para
>Приложения для &qte; обычно выполняются как отдельные команды на устройстве, для которого они сделаны. Trolltech также поддерживает Qtopia, коллекцию приложений для PIM, обзора web, и других направлений, работающих вместе. Это стандартное окружение, например, на КПК Sharp Zaurus. Вы можете писать приложения, интегрированные в это окружение, используя Qtopia SDK. Это достигается созданием основного класса вашего приложения подклассом <classname
>QPEApplication</classname
> и сборкой с подключением  библиотеки <filename
>libqpe.so</filename
>. Если вы разрабатываете ваше приложение используя менеджер autoproject, вам нужно добавить ключ <option
>--enable-qtopia</option
> в опции configure. </para>

</sect1
> <!-- qtembedded -->

</chapter
> <!-- adv-build-management -->
