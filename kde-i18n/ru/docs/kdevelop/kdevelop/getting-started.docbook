
<!--
Please keep the formatting simple.
Do not indent XML constructs.
Keep lines at 80 characters length maximum.
-->

<chapter id="getting-started">

<chapterinfo>
<authorgroup>
<author
><firstname
>Bernd</firstname
><surname
>Pol</surname
></author>
<othercredit role="translator"
><firstname
>Сергей</firstname
><surname
>Бобыкин</surname
> <affiliation
><address
><email
>_myst@mail.ru</email
></address
></affiliation
><contrib
>Перевод на русский язык</contrib
></othercredit
> 
</authorgroup>
</chapterinfo>

<title
>Начало работы с &kdevelop;.</title>

<para
>Теперь, когда вы только установили среду разработки &kdevelop;, как вы собираетесь её применять? Это сложное приложение, освоить его непросто, особенно, если вы ещё не использовали такой тип интегрированных сред разработки.</para>

<para
>Мы попробуем помочь вам в этом на примере создания простого приложения на C++ для KDE. Для этого мы рассмотрим следующие темы:</para>

<simplelist>
<member
><link linkend="gettingstarted-overview"
>Знакомство с элементами пользовательского интерфейса.</link
></member>
<member
><link linkend="gettingstarted-configure"
>Начальная настройка.</link
></member>
<member
><link linkend="gettingstarted-new"
>Создание нового проекта.</link>
</member>
<member
><link linkend="gettingstarted-edit"
>Работа с документами.</link
></member>
<member
><link linkend="gettingstarted-compile"
>Компиляция проекта.</link
></member>
<member
><link linkend="gettingstarted-extend"
>Добавление в проект классов.</link
></member>
<member
><link linkend="gettingstarted-debug"
>Отладка проекта.</link
></member>
<member
><link linkend="gettingstarted-doc"
>Основные инструменты сборки программ и пользовательской документации.</link
></member>
<member
><link linkend="gettingstarted-keys"
>Последнее, но не менее важное, комбинации клавиш</link
></member>
</simplelist>

<para
>Перед тем, как начать, нужно прояснить один важный момент.</para>

<formalpara>
<title
>Предназначение программы.</title>
<para
>Как уже говорилось, &kdevelop; &mdash; это <emphasis
>интегрированная среда разработки</emphasis
>. Это означает, что &kdevelop; сама по себе является не средством разработки, но графической оболочкой для упрощения доступа к различным инструментам, многие из которых требуют сложных команд, запускаемых из текстовой консоли.</para>
</formalpara>

<para
>Хотя &kdevelop; упрощает многие задачи программирования, значительная часть сложности этих инструментов ещё лежит на плечах разработчика. Для полного понимания &kdevelop;, вам необходимо понимать, как они работают.</para>

<para
>Поэтому мы не можем научить вас разрабатывать программное обеспечение, но познакомим с тем, каким образом &kdevelop; упрощает процесс создания программ. Если вы хотите узнать больше о назначении интегрированных сред разработки, возможно вас заинтересует глава «<link linkend="unixdev"
>Разработка ПО в &UNIX;</link
>», особенно раздел «<link linkend="unixdev-ide"
>Концепции и средства интегрирования</link
>».</para>

<note>
<para
>Излагая материал, мы предполагаем, что &kdevelop; у вас запускается в режиме <guilabel
>Упрощённый IDEAl</guilabel
>. В других режимах интерфейса, некоторые элементы могут располагаться в других местах и вести себя немного иначе. Если вы не знаете в каком режиме интерфейса работает среда, выберите <menuchoice
><guimenu
>Настройка</guimenu
> <guimenuitem
>Настроить KDevelop...</guimenuitem
> <guimenuitem
>Интерфейс пользователя</guimenuitem
></menuchoice
> и посмотрите.</para>
</note>

<sect1 id="gettingstarted-overview">
<title
>Первое знакомство с &kdevelop;</title>

<para
>Эта глава посвящена тому, что вы увидите, когда впервые запустите &kdevelop;. В ней вы узнаете:</para>

<simplelist>
<member
><link linkend="gettingstarted-overview-basic"
>описание интерфейса программы;</link
></member>
<member
><link linkend="gettingstarted-overview-help"
>как получить справку;</link
></member>
<member
><link linkend="gettingstarted-overview-menu"
>структуру меню;</link
></member>
<member
><link linkend="gettingstarted-overview-tools"
>предназначение боковых панелей.</link
></member>
</simplelist>

<sect2 id="gettingstarted-overview-basic">
<title
>Описание интерфейса программы</title>

<para
>При первом запуске &kdevelop;, вы увидите окно, похожее на это:</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="empty-ide.png" format="PNG"/>
</imageobject>
<caption>
<para
>Начальное расположение элементов в окне &kdevelop;.</para>
<para
>В реальности окно будет больше, но элементы в нём будут точно такими же.</para>
</caption>
</mediaobject>
</screenshot>

<formalpara>
<title
>Рабочая область и боковые панели</title>
<para
>В начале среда работает, в так называемом режиме интерфейса <link linkend="uimodes-survey"
>IDEAl</link
>. Рабочее пространство слева, снизу и справа окружено рядами кнопок, которые действуют наподобие вкладок. Если вы нажмёте на одну из них, откроется <emphasis
>боковая панель</emphasis
> для выполнения определённой задачи.</para>
</formalpara>

<formalpara>
<title
>Меню и панели инструментов</title>
<para
>Вверху окна находится обычная панель меню, под которой следуют несколько панелей инструментов. Некоторые из них изначально пустые. Они будут заполнены после открытия проекта.</para>
</formalpara>

<formalpara>
<title
>Строка состояния</title>
<para
>Внизу находится строка состояния. Она показывает краткую информацию.</para>
</formalpara>
</sect2>

<sect2 id="gettingstarted-overview-help">
<title
>Как получить справку</title>

<para
>Помимо меню <guimenu
>Справка</guimenu
>, отвечающее на конкретные вопросы, можно использовать строку состояния и два вида всплывающих подсказок, предоставляющих краткую справку.</para>

<formalpara>
<title
>Как узнать назначение пункта меню.</title>
<para
>При наведении курсора на пункт меню, в строке состояния выводится краткое пояснение к нему. В большинстве случаев это просто название, но для некоторых пунктов — описание команды.</para>
</formalpara>

<formalpara>
<title
>Как узнать название элемента интерфейса</title>
<para
>Многие элементы имеют всплывающую подсказку, которая будет показываться, если задержать указатель мыши над элементом на несколько секунд. Это полезно для быстрой ориентации на панели инструментов или вкладках боковых панелей в режиме IDEAl, когда на кнопках показываются только значки.</para>
</formalpara>

<formalpara>
<title
>Как узнать назначение элемента интерфейса</title>
<para
>Для многих элементов среды доступна дополнительная информация через расширенную подсказку. Выберите команду меню <menuchoice
><guimenu
>Справка</guimenu
> <guimenuitem
>Что это?</guimenuitem
></menuchoice
> или нажмите комбинацию клавиш <keycombo
><keycap
>&Shift;</keycap
><keycap
>F1</keycap
></keycombo
>. Рядом с указателем мыши появится знак вопроса. Выберите интересующий элемент и полу́чите дополнительную информацию о нём, если она имеется. Этим способом также можно выбирать любые меню и их пункты (и активные, и неактивные).</para>
</formalpara>
</sect2>

<sect2 id="gettingstarted-overview-menu">
<title
>Структура меню</title>

<para
>Панель меню содержит десять элементов. После открытия проекта, большинство из них имеет полный набор пунктов, но для некоторых требуется открыть хотя бы один документ в окне редактора. Они предоставляют следующие типы операций.</para>

<note>
<para
>Это только предварительный обзор. Детальное описание находится в <link linkend="commands"
>справочнике команд</link
>.</para>
</note>

<variablelist>
<varlistentry>
<term
><guimenu
>Файл</guimenu
></term>
<listitem>
<formalpara>
<title
>Обычные действия</title>
<para
>Создание, открытие, сохранение, печать и закрытие файлов, а также выход из программы.</para>
</formalpara>

<formalpara>
<title
>Вернуть все</title>
<para
>Отмена последних, ещё не сохранённых изменений загрузкой содержания файла с диска. Операция выполняется для всех редактируемых файлов, не только для файлов проекта.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Правка</guimenu
></term>
<listitem>
<para
>Это меню содержит действия для работы с документом.</para>

<formalpara>
<title
>Обычные действия</title>
<para
>Отмена и повтор, работа с буфером обмена, варианты выделения текстовых фрагментов.</para>
</formalpara>

<formalpara>
<title
>Поиск и замена</title>
<para
>Существует два очень мощных средства поиска: <menuchoice
><guimenu
>Правка</guimenu
> <guimenuitem
>Найти в файлах...</guimenuitem
></menuchoice
> и <menuchoice
><guimenu
>Правка</guimenu
> <guimenuitem
>Поиск-выбор-замена...</guimenuitem
></menuchoice
>. Они позволяют выполнять поиск и замену не только в пределах текущего документа, но и глобально.</para>
</formalpara>

<formalpara>
<title
>Комплексные операции</title>
<para
>Переформатирование документа, несколько видов дополнения набираемого текста.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Вид</guimenu
></term>
<listitem>
<para
>Среди прочих данное меню содержит следующие операции:</para>

<formalpara>
<title
>История просмотра</title>
<para
>Перемещение по открытым документам.</para>
</formalpara>

<formalpara>
<title
>Отслеживание ошибок</title>
<para
>Перемещение по строкам, в которых обнаружены ошибки во время последней компиляции или сборки.</para>
</formalpara>

<formalpara>
<title
>Управление редактором</title>
<para
>В случае использования компонента &kate; (встроенный текстовый редактор) будут доступны:</para>
</formalpara>

<itemizedlist>
<listitem>
<para
>управление переносом строк в окне документа;</para>
</listitem>
<listitem>
<para
>показ или скрытие полосы закладок, номеров строк, закладок на полосе прокрутки;</para>
</listitem>
<listitem>
<para
>управление показом сворачиваемых блоков исходного кода.</para>
</listitem>
</itemizedlist>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Проект</guimenu
></term>
<listitem>
<para
>Вся работа в &kdevelop; основана на <emphasis
>проектах</emphasis
>, которые собирают воедино файлы исходного кода, файлы управления сборкой и другую информацию. Данное меню содержит команды управления проектом. В частности:</para>

<formalpara>
<title
>Открытие</title>
<para
>Создание, открытие и импорт из других сред.</para>
</formalpara>

<formalpara>
<title
>Параметры</title>
<para
>Установка параметров.</para>
</formalpara>

<formalpara>
<title
>Управление классами</title>
<para
>Добавление новых классов и управление иерархией наследования.</para>
</formalpara>

<formalpara>
<title
>Подготовка к распространению</title>
<para
>Сборка дистрибутивных пакетов для распространения в Интернете.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Сборка</guimenu
></term>
<listitem>
<para
>Команды компиляции и документирования проекта:</para>

<formalpara>
<title
>Компиляция, сборка, выполнение</title>
<para
>Компилирование и сборка всего проекта или его части, запуск разрабатываемой программы.</para>
</formalpara>

<formalpara>
<title
>Подготовка к сборке</title>
<para
>Набор операций этой группы зависит от используемой в проекте сборочной системы. Например, в случае automake это могут быть команды для выполнения <filename
>Makefile.cvs</filename
> и скрипта <filename
>configure</filename
>.</para>
</formalpara>

<formalpara>
<title
>Установка приложения</title>
<para
>Установка приложения в локальные и системные (доступные только для root) каталоги.</para>
</formalpara>

<formalpara>
<title
>Документация по API</title>
<para
>Сборка или удаление документации по API на базе Doxygen.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Отладка</guimenu
></term>
<listitem>
<para
>Для использования этого меню приложение нужно скомпилировать с отладочной информацией (это можно сделать через команду меню <menuchoice
><guimenu
>Проект</guimenu
> <guimenuitem
>Параметры проекта...</guimenuitem
></menuchoice
>). Меню содержит следующие операции:</para>

<formalpara>
<title
>Обычные операции по отладке</title>
<para
>Первая часть меню представляет собой вариант графического интерфейса к GDB &GNU;. Она включает в себя запуск и останов приложения в отладчике, несколько вариантов пошагового выполнения.</para>
</formalpara>

<formalpara>
<title
>Точки останова</title>
<para
>Устанавливать точки останова в исходном коде приложения можно несколькими способами. Один из них — команда <guimenuitem
>Установить/снять точку останова</guimenuitem
>.</para>
</formalpara>

<formalpara>
<title
>Комплексные операции по отладке</title>
<para
>Остальные пункты меню представляют более сложные средства исследования программы. Чтобы узнать подробности, воспользуйтесь комбинацией клавиш <keycombo
><keycap
>&Shift;</keycap
><keycap
>F1</keycap
></keycombo
>.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Скрипты</guimenu
></term>
<listitem>
<para
>Из этого меню вы можете вызывать различные скрипты для выполнения рутинных операций обработки текста в текущем окне редактора. Набор доступных команд зависит от выбранного скрипта. </para>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Окно</guimenu
></term>
<listitem>
<para
>Довольно обычное меню. Содержит команды перехода между открытыми окнами, индивидуального и группового закрытия окон.</para>

<para
>В зависимости от модуля расширения редактора, который вы используете, также могут присутствовать и другие команды. Так, используемый по умолчанию модуль редактора Kate позволяет разделять окно редактора по горизонтали или вертикали.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Сервис</guimenu
></term>
<listitem>
<para
>Среда обладает широкими возможностями по настройке. Можно выбрать любимый текстовый редактор и инструменты (внешние или в виде модулей), расширяющие функциональность среды. Бо́льшая часть этих возможностей собрана в данном меню.</para>

<formalpara>
<title
>Комплексное редактирование</title>
<para
>Верхняя часть меню содержит команды текущего модуля редактора. Его можно выбрать с помощью команды меню <menuchoice
><guimenu
>Настройка</guimenu
> <guimenuitem
>Настроить KDevelop...</guimenuitem
> <guilabel
>Редактор</guilabel
></menuchoice
>.</para>
</formalpara>

<formalpara>
<title
>Работа с веб-страницами</title>
<para
>Если текущее окно содержит страницу HTML (например, файл документации), меню будет содержать команды навигации по веб-страницам.</para>
</formalpara>

<formalpara>
<title
>Другие команды</title>
<para
>Обычно меню содержит много других команд. Это зависит от имеющихся инструментов. Используйте комбинацию клавиш <keycombo
><keycap
>&Shift;</keycap
> <keycap
>F1</keycap
></keycombo
> для получения дополнительной информации об их назначении.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Настройка</guimenu
></term>
<listitem>
<para
>Данное меню позволяет показывать или скрывать меню, панели инструментов и строку состояния. А также настраивать  комбинации клавиш, панели инструментов, уведомления, редактор и общее поведение среды.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenu
>Справка</guimenu
></term>
<listitem>
<para
>В этом меню можно открыть руководство пользователя KDevelop, искать термины в различных файлах документации, открывать страницы man (традиционный формат документации для UNIX) и страницы info (формат документации проекта GNU). Более того, здесь можно отправить отчёт об ошибках и получить информацию о версии программы и её авторах.</para>
</listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="gettingstarted-overview-tools">
<title
>Назначение боковых панелей</title>

<para
>В режиме пользовательского интерфейса IDEAl рабочая область окружена тремя рядами кнопок так называемых <emphasis
>вкладок боковых панелей</emphasis
>. Они обеспечивают доступ к <emphasis
>боковым панелям</emphasis
>, которые решают основные задачи по разработке программ. Каждый из трёх рядов имеет своё назначение.</para>

<itemizedlist>
<listitem>
<formalpara>
<title
>Левый ряд</title>
<para
>Доступ к инструментам навигации и выделения.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Нижний ряд</title>
<para
>Окна сообщений различных инструментов.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Правый ряд</title>
<para
>Доступ к документации и инструментам сборки.</para>
</formalpara>
</listitem>
</itemizedlist>

<para
>Число вкладок боковых панелей изменится после открытия проекта. Тогда будет доступно больше инструментов. Фактическое число боковых панелей зависит от доступных программе <link linkend="plugin-tools"
>инструментов</link
>. Подробно об этом рассказано в главе «<link linkend="setup"
>Настройка &kdevelop;</link
>».</para>

<para
>На данный момент, когда не открыт ни один проект и загружены модули по умолчанию, вы должны видеть следующие боковые панели. Нажатие на вкладке открывает соответствующую боковую панель.</para>

<variablelist>
<varlistentry>
<term
>Перемещение и выделение</term>
<listitem>
<formalpara>
<title
>Файлы</title>
<para
>Панель для перемещения по дереву каталогов и выбора файлов для работы, как в &konqueror;. Нажатие левой кнопки мыши на файле открывает его в окне редактора. Нажатие правой кнопкой мыши в области выбора файлов открывает контекстное меню с командами перемещения и управления файлом.</para>
</formalpara>

<formalpara>
<title
>Окна</title>
<para
>Список окон с файлами, открытых в данный момент. Нажатие левой кнопкой мыши на  окне в списке активирует окно в рабочей области. Используйте эту функцию для быстрой навигации по большому количеству открытых файлов. Более того, это окно — средство организации открытых файлов в <emphasis
>сеанс</emphasis
>. Это полезно в очень больших и сложных проектах, помогая разработчику концентрироваться на разных задачах. Нажатие правой кнопкой на окне открывает контекстное меню для управления файлом в окне.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
>Окна сообщений</term>
<listitem>
<formalpara>
<title
>Приложение</title>
<para
>Показывает вывод приложения, запущенного в среде.</para>
</formalpara>

<formalpara>
<title
>Diff</title>
<para
>Показывает содержимое файла исправлений или вывод инструмента определения различий, запускаемого командой <menuchoice
><guimenu
>Сервис</guimenu
><guimenuitem
>Окно просмотра различий...</guimenuitem
></menuchoice
>.</para>
</formalpara>

<formalpara>
<title
>Сообщения</title>
<para
>Показывает сообщения, сгенерированные вызванными из среды инструментами сборки (см. меню <guimenu
>Сборка</guimenu
>).</para>
</formalpara>

<formalpara>
<title
>Поиск в файлах</title>
<para
>Показывает список элементов, найденных во время операции глобального поиска, запущенного командой меню <menuchoice
><guimenu
>Правка</guimenu
> <guimenuitem
>Найти в файлах...</guimenuitem
></menuchoice
>. Нажатие левой кнопкой мыши на строке автоматически показывает место файла, содержащее найденное, в окне редактора.</para>
</formalpara>

<formalpara>
<title
>Заменить</title>
<para
>Показывает список результатов глобального поиска с заменой, выполненного командой меню <menuchoice
><guimenu
>Правка</guimenu
> <guimenuitem
>Поиск-выбор-замена...</guimenuitem
></menuchoice
>. В этом окне можно принять окончательное решение, что из найденного заменять.</para>
</formalpara>
<note>
<para
>Глобальный поиск с заменой доступен только после загрузки проекта. В противном случае команда меню <menuchoice
><guimenu
>Правка</guimenu
> <guimenuitem
>Поиск-выбор-замена...</guimenuitem
> </menuchoice
> будет неактивна.</para>
</note>

<formalpara>
<title
>Konsole</title>
<para
>Окно эмулятора терминала <application
>Konsole</application
>, где можно вводить команды традиционного для &UNIX; интерфейса командной строки.</para>
</formalpara>
</listitem>
</varlistentry>

<varlistentry>
<term
>Документация и управление сборкой</term>
<listitem>
<formalpara>
<title
>Документация</title>
<para
>Предоставляет удалённый доступ ко всей документации в структурированном виде. А также несколько видов прямого доступа к руководствам по &kde; или &Qt;.</para>
</formalpara>

<para
>См. главы «<link linkend="documentation"
>Документация</link
>» и «<link linkend="setup-docu"
>Настройка документации</link
>».</para>

<formalpara>
<title
>Заготовки</title>
<para
>Коллекция текстовых заготовок для повторного использования во время редактирования. Заготовки могут иметь параметры.</para>
</formalpara>
<para
>См. главы «<link linkend="editing-snippets"
>Заготовки кода</link
>» и «<link linkend="setup-snippets"
>Настройка заготовок кода</link
>».</para>
</listitem>
</varlistentry>
</variablelist>
</sect2>
</sect1>

<sect1 id="gettingstarted-configure">
<title
>Немного настройки</title>

<para
>Перед тем, как начать первый проект, нам нужно подогнать поведение среды под наши нужды. Хотя значения большинства параметров подходит большинству, некоторые стоит подправить.</para>

<note>
<para
>Более подробно настройка среды освещена в главе «<link linkend="setup"
>Настройка &kdevelop;</link
>».</para>
</note>

<sect2 id="gettingstarted-configure-general">
<title
>Главное</title>

<para
>Для настройки выберите команду меню <menuchoice
><guimenu
>Настройка</guimenu
></menuchoice
> <menuchoice
><guimenuitem
>Настроить KDevelop...</guimenuitem
></menuchoice
>. Она откроет диалог <guilabel
>Настройка KDevelop</guilabel
> с разделом <guilabel
>Главное</guilabel
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-general.png" format="PNG"/>
</imageobject>
<caption>
<para
>Диалог настройки &kdevelop;</para>
</caption>
</mediaobject>
</screenshot>

<para
>Большинство параметров по умолчанию должны вас устроить, но, возможно, вы захотите некоторые из них изменить.</para>

<formalpara>
<title
>Каталог проектов по умолчанию</title>
<para
>При первом запуске среда, скорее всего, настроена на ваш домашний каталог. Однако большинство пользователей предпочитает иметь специальный каталог для хранения своих проектов. Введите в это поле название корневого каталога, в котором хотите хранить свои проекты. Также его можно выбрать в дереве каталогов, если нажать справа кнопку «<guilabel
>Выбор файла или папки</guilabel
>» со значком папки.</para>
</formalpara>

<para
>В наших примерах мы будем использовать выдуманное имя пользователя <filename class="directory"
>devel</filename
>. Заменяйте его своим. Наш пользователь будет использовать каталог <filename class="directory"
>/home/devel/projects</filename
> как каталог проектов. Название <filename class="directory"
>projects</filename
> тоже заменяйте названием своего каталога для проектов. </para>

<para
>По умолчанию для каждого нового проекта среда создаёт отдельный подкаталог в каталоге проектов. Например, в нашем случае все файлы проекта «Hello» будут располагаться в каталоге <filename class="directory"
>/home/devel/projects/hello</filename
>.</para>

<para
>Конечно, при необходимости вы можете временно переопределить каталоги. См. главу «<link linkend="applicationwizard"
>&appwizard;</link
>».</para>

<formalpara>
<title
>Вывод компилятора</title>
<para
>Когда среда компилирует исходный текст, сообщения <application
>make</application
> и других инструментов сборки будут выводиться в окно <guilabel
>Сообщения</guilabel
> в нижней части рабочей области. Обычно эти сообщения очень многословны. Для большего удобства просмотра имеются встроенные средства их сокращения.</para>
</formalpara>

<para
>В зависимости от используемой вами версии среды параметр <guilabel
>Вывод компилятора</guilabel
> может иметь предустановленное значение «Полный», в этом режиме сообщения выводятся полностью. Если он для вас не удобен, выберите режим «Очень краткий» из выпадающего списка.</para>

<caution>
<para
>Имейте в виду, в этом режиме в окне <guilabel
>Сообщения</guilabel
> будет показываться только <emphasis
>самая основная</emphasis
> информация. В случае возникновения ошибок (во время сборки, например), скорее всего, вы захотите видеть, если не полные, то значительно более подробные сообщения. Полное содержание сообщений не теряется. Его можно увидеть с помощью команды «Полный вывод компилятора» контекстного меню окна <guilabel
>Сообщения</guilabel
>.</para>
</caution>
</sect2>

<sect2 id="gettingstarted-configure-search">
<title
>Создание индекса для поиска в документации</title>

<para
>Существует другой, не такой очевидный, элемент, который должен быть создан перед началом работы над проектом — индекс документации. Он необходим среде для выполнения поиска по документации. Во время работы над проектом поиск будет нужен вам постоянно. Поэтому, давайте, заранее его создадим.</para>

<para
>Откройте боковую панель <guilabel
>Документация</guilabel
> в правой части главного окна и откройте на ней вкладку <guilabel
>Поиск</guilabel
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="documents-search.png" format="PNG"/>
</imageobject>
<caption
><para
>Вкладка создания поискового индекса.</para
></caption>
</mediaobject>
</screenshot>

<para
>Теперь нажмите кнопку <guibutton
>Обновить конфигурацию</guibutton
>, чтобы убедиться, что основные инструменты поиска установлены правильно. Должен появиться диалог с сообщением «Конфигурационный файл обновлён». Нажмите кнопку <guibutton
>OK</guibutton
> и он исчезнет.</para>

<para
>Теперь среда готова к обработке известной ей документации и созданию индекса. Нажмите кнопку <guibutton
>Обновить индекс</guibutton
> справа. Появится диалог <guilabel
>Создаётся индекс поиска</guilabel
>, показывающий степень выполнения операции создания индекса.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-docu-indexgen.png" format="PNG"/>
</imageobject>
<caption
><para
>Среда создаёт индекс для поиска в документации.</para
></caption>
</mediaobject>
</screenshot>

<para
>Этот процесс может занять определённое время в зависимости от объёма документации и мощности вашей машины. В конце концов кнопка <guibutton
>Отмена</guibutton
> будет заменена кнопкой <guibutton
>OK</guibutton
>. Нажмите её для продолжения.</para>

<note>
<itemizedlist>
<listitem>
<para
>Обычно это работает идеально. Но в некоторых случаях программа <application
>htdig</application
>, которая используется средой для выполнения полнотекстового поиска, может быть неправильно настроена. См. главу «<link linkend="setup-docu-textsearch"
>Индексирование документации</link
>».</para>
</listitem>
<listitem>
<para
>Чтобы была возможность осуществлять поиск по API &kde; и &Qt;, <emphasis
>KDELibs Apidocs</emphasis
> должны быть установлены до установки &kdevelop;. Если у вас проблемы с генерацией индекса или выполнением <link linkend="gettingstarted-edit-defs"
>примеров поиска идентификаторов</link
> ниже в этой главе, убедитесь, что эта документация существует и доступна среде. См. <link linkend="kdevelop-install"
>Установка &kdevelop;</link
>.</para>
</listitem>
</itemizedlist>
</note>
</sect2>
</sect1>


<sect1 id="gettingstarted-new">
<title
>Создание проекта</title>

<para
>Почти каждое приложение состоит из десятков, сотен, и даже тысяч файлов, которые нужно содержать в структурированном, удобном для обработки виде. Для решения этой проблемы среда использует концепцию <emphasis
>проектов</emphasis
>. Поэтому, приступая к разработке в среде, обычно первым делом создают проект.</para>

<para
>К счастью, это очень легко. Для этого в среде имеется так называемый Мастер проектов (см. главу "<link linkend="applicationwizard"
>Начало работы &mdash; создание проекта</link
>").</para>

<para
>Теперь приступим к созданию простого проекта, чтобы увидеть, как просто это делается, и какие файлы и инструменты для этого имеются. Рассмотрим следующие темы:</para>

<simplelist>
<member
><link linkend="gettingstarted-new-setup"
>Создание нового проекта с помощью мастера.</link
></member>
<member
><link linkend="gettingstarted-new-files"
>Файлы, создаваемые в проекте.</link
></member>
<member
><link linkend="gettingstarted-new-toolviews"
>Дополнительные боковые панели, показываемые при открытом проекте.</link
></member>
</simplelist>

<sect2 id="gettingstarted-new-setup">
<title
>Создание нового проекта</title>

<para
>Давайте, создадим простой проект приложения &kde; «Hello World». Для этого выполните следующие действия:</para>

<procedure>
<step>
<para
>Запустите мастер командой меню <menuchoice
><guimenu
>Проект</guimenu
> <guimenuitem
>Создать проект...</guimenuitem
></menuchoice
>.</para>
</step>

<step>
<para
>Появится диалог <guilabel
>Новый проект</guilabel
>. Вверху на вкладке <guilabel
>Все проекты</guilabel
> находится список языков программирования.</para>

<substeps>
<step>
<para
>Мы хотим создать C++ приложение для &kde;, поэтому нажмите на <guilabel
>+</guilabel
> слева от <guilabel
>C++</guilabel
>, чтобы открыть эту ветвь.</para>
</step>

<step>
<para
>Ветвь содержит список возможных типов приложений на этом языке. Мы будем собирать приложение для &kde;, поэтому откройте подраздел, нажав <guilabel
>+</guilabel
> рядом с <guilabel
>KDE</guilabel
></para>
</step>

<step>
<para
>Теперь вам предлагаются несколько <emphasis
>шаблонов проекта</emphasis
>. Перейдите в конец ветви и выберите <guilabel
>Простое приложение KDE с формой</guilabel
>.</para>

<para
>Справа будет показан предварительный вид приложения и его краткое описание.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="tutorial-new-project.png" format="PNG"/>
</imageobject>
<caption>
<para
>Выбор шаблона для проекта «Hello World»</para>
</caption>
</mediaobject
></screenshot>
</step>

<step>
<para
>Нашему приложению нужно название. Найдите блок <guilabel
>Свойства</guilabel
> внизу диалога и введите подходящее название в поле <guilabel
>Имя приложения</guilabel
>.</para>

<para
>В нашем примере это «Hello», но вы можете использовать любое, какое вам нравится. Главное, чтобы в названии содержались только буквы, цифры и символы подчёркивания. Мастер никакие другие символы в названии не принимает.</para>
</step>

<step>
<para
>Убедитесь, что текстовое поле <guilabel
>Расположение</guilabel
> внизу содержит название каталога ваших проектов, установленного в главе «<link linkend="gettingstarted-configure"
>Немного настройки</link
>». Если это не так, введите его или выберите из списка каталогов, открываемого кнопкой с изображением папки справа от поля ввода.</para>

<para
>Если всё сделано правильно, надпись <guilabel
>Конечное расположение</guilabel
> внизу будет показывать путь к каталогу проекта. Если же к нему добавлено слово «(неверно)», попробуйте другое название проекта и/или проверьте наличие каталога проектов в файловой системе и пра́ва записи в него.</para>
</step>

<step>
<para
>Если нет никаких ошибок, кнопка <guibutton
>Далее</guibutton
> внизу диалога становится активной. Нажмите её для продолжения.</para>
</step>
</substeps>
</step>

<step>
<para
>Вы перейдёте на шаг <guilabel
>Параметры проекта</guilabel
>. Проверьте правильность полей <guilabel
>Автор</guilabel
> и <guilabel
>Электронная почта</guilabel
>. Обычно по умолчанию они содержат параметры пользователя &kde; (см. диалог <guilabel
>Профиль пользователя</guilabel
> Центра управления KDE). Измените их, если они вас не устраивают.</para>

<screenshot id="gettingstarted-new-setup-options">
<mediaobject>
<imageobject>
<imagedata fileref="tutorial-hello-options.png" format="PNG"/>
</imageobject>
<caption>
<para
>Введите ваше имя и (не обязательно) адрес электронной почты.</para>
</caption>
</mediaobject>
</screenshot>

<note>
<para
>Вы должны по крайней мере ввести значение поля <guilabel
>Автор</guilabel
>. Это обязательно. Оно необходимо для подготовки файлов приложения.</para>
</note>

<para
>Если нет никаких ошибок, кнопка <guibutton
>Далее</guibutton
> станет активной. Нажмите её для продолжения.</para>
</step>

<step>
<para
>Шаги <guilabel
>Система управления версиями</guilabel
>, <guilabel
>Шаблон для файлов .h</guilabel
> и <guilabel
>Шаблон для файлов .cpp</guilabel
> пока не представляют интереса.  Пропустите их, нажимая кнопку <guibutton
>Далее</guibutton
> и кнопку <guibutton
>Готово</guibutton
> на последнем шаге.</para>
</step>
</procedure>

<para
>Вот и всё! Мастер создаст набор начальных файлов в каталоге <guilabel
>Конечное расположение</guilabel
> (см. пункт 2с).</para>

<para
>Когда создание файлов завершится, среда откроет окно редактора для файла реализации <emphasis
>главного окна приложения</emphasis
> (в нашем примере это файл <filename
>hello.cpp</filename
>), чтобы вы могли сразу же приняться за работу.</para>
</sect2>

<sect2 id="gettingstarted-new-files">
<title
>Начальные файлы</title>

<para
>Хотя наш проект довольно простой, мастер создал целую группу файлов исходного кода и управления проектом. Вы можете их легко увидеть, если откроете боковую панель <guilabel
>Файлы</guilabel
> слева внизу. Его содержание показано на иллюстрации ниже.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="tutorial-hello-new.png" format="PNG"/>
</imageobject>
<caption>
<para
>Начальные файлы нашего проекта</para>
</caption>
</mediaobject>
</screenshot>

<para
>Для демонстрации файлов, созданных мастером, мы открыли бо́льшую часть ветвей в боковой панели <guilabel
>Файлы</guilabel
> слева. Ветвь открывается простым нажатием левой кнопкой мыши на её названии в дереве.</para>

<para
>С этой же целью справа мы открыли ветви в боковой панели <guilabel
>Проект Automake</guilabel
>, где перечислены некоторые файлы исходного кода проекта.</para>

<sect3 id="gettingstarted-new-files-copyright">
<title
>Указание авторских прав</title>

<para
>Все приложения, удовлетворяющие требованиям проекта &GNU;, должны быть обеспечены авторскими правами. Уведомление о них требуется в <emphasis
>файлах исходного кода</emphasis
> и во время <emphasis
>выполнения приложения</emphasis
>. Мастер уже поместил соответствующую информацию об авторских правах и лицензировании в файлы проекта.</para>

<formalpara>
<title
>Сведения об авторских правах в файлах исходного кода.</title>
<para
>Помните шаг «<link linkend="gettingstarted-new-setup-options"
><guilabel
>Параметры проекта</guilabel
></link
>» во время создания нового проекта? Там нужно было предоставить ваше имя и адрес электронной почты, как разработчика. Теперь посмотрите на верхнюю часть окна редактирования файла <guilabel
>hello.cpp</guilabel
>. Мастер поместил их в заголовок лицензирования каждого созданного файла исходного кода.</para>
</formalpara>

<programlisting
>/***************************************************************************
 *   Copyright (C) 2006 by Joe User   *
 *   joe@user.com   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
</programlisting>

<para
>Этот заголовок добавляется во все файлы исходного кода, которые создаются в среде. Среда хранит эти параметры в файлах шаблонов (в каталоге <filename class="directory"
>templates</filename
>).</para>

<formalpara>
<title
>Информация об авторских правах во время выполнения приложения</title>
<para
>Во время работы приложения &kde; пользователь может посмотреть информацию о программе (обычно через меню <guimenu
>Справка</guimenu
>). Необходимый для этого код автоматически генерируется средой. Он находится в файле <filename
>main.cpp</filename
>. См. пример ниже:</para>
</formalpara>

<programlisting
>int main(int argc, char **argv)
{
    KAboutData about("hello", I18N_NOOP("Hello"), version, description,
                     KAboutData::License_GPL, "(C) 2006 Joe User", 0, 0,
                     "joe@user.com");
    about.addAuthor( "Joe User", 0, "joe@user.com" );
</programlisting>

<para
>Он добавляет имя главного разработчика (в нашем случае «Joe User») и адрес электронной почты на вкладку с информацией об авторских правах и вкладку  <guilabel
>Авторы</guilabel
> диалога <guilabel
>О программе</guilabel
>.</para>

<important>
<para
>Делая значительные изменения существующего проекта, убедитесь, что ввели своё имя и адрес электронной почты в уведомление об авторских правах каждого изменённого файла и диалог <guilabel
>About</guilabel
>. Не стесняйтесь, этим вы помогаете сообщество свободного программного обеспечения.</para>
</important>
</sect3>

<sect3 id="gettingstarted-new-files-source">
<title
>Начальные файлы исходного кода</title>

<para
>Мастер поместил исходные файлы в подкаталог <filename class="directory"
>src</filename
> каталога проекта. Как вы, возможно, и ожидали, там находятся <filename
>main.cpp</filename
>, <filename
>hello.h</filename
> и <filename
>hello.cpp</filename
>.</para>

<para
>В типичном приложении &kde; есть несколько дополнительных файлов, а именно:</para>

<itemizedlist>
<listitem>
<para
><filename
>hello.desktop</filename
> — метаданные для интеграции приложения в &kde;.</para>
</listitem>

<listitem>
<para
><filename
>hi16-app-hello.png</filename
> и <filename
>hi32-app-hello.png</filename
> — значки приложения (по умолчанию).</para>
</listitem>

<listitem>
<para
><filename
>helloui.rc</filename
> — описание интерфейса пользователя (на данный момент меню).</para>
</listitem>
</itemizedlist>
</sect3>

<sect3 id="gettingstarted-new-files-doc">
<title
>Начальная документация приложения</title>

<para
>В подкаталоге <filename class="directory"
>doc/en</filename
> находится файл <filename
>index.docbook</filename
>. Это шаблон для создания пользовательской документации.</para>
</sect3>

<sect3 id="gettingstarted-new-files-project">
<title
>Проектные и вспомогательные файлы</title>

<para
>На боковой панели <guilabel
>Файлы</guilabel
> те файлы, с которыми мы познакомились, выделены полужирным шрифтом. В то же время, большинство других — нет. Это означает, что они предназначены для совершенно других целей. Их содержание оказывает непосредственное влияние на приложение. В файлах исходного кода хранится исполняемый код приложения, в остальных — необходимые данные или документация. Эти файлы должны обслуживаться и в определённом порядке обрабатываться во время сборки проекта. Поэтому они называются <emphasis
>проектные файлы</emphasis
>.</para>

<para
>Список всех проектных файлов можно увидеть в окне <guilabel
>Проект Automake</guilabel
> внизу справа на рабочей области. Как мы скоро увидим, &automanag; использует их содержание для управления сборкой.</para>

<para
>Файлы, не выделенные полужирным шрифтом, имеют второстепенное значение и принадлежат нескольким различным классам:</para>

<itemizedlist>
<listitem>
<formalpara>
<title
>Управление сборкой проекта</title>
<para
>Файлы этого класса управляют компиляцией, установкой, созданием документации и так далее. Если проект использует механизм &GNU; <application
>autotools</application
>, как в нашем примере, то в каждом его каталоге будет лежать файл <filename
>Makefile.am</filename
>. Это разновидность файлов для утилиты make, содержащие правила сборки. Они будут обрабатываться вместе с различными файлами программы <filename
>configure</filename
> во время сборки. В результате в каждом каталоге будет создан окончательный файл <filename
>Makefile</filename
>. Этот файл содержит правила для утилиты <application
>make</application
>, с помощью которых она будет создавать двоичные файлы приложения.</para>
</formalpara>

<para
>За содержанием файлов <filename
>Makefile.am</filename
> нужно следить во время всего процесса разработки. К счастью, среда с помощью инструмента &automanag; почти полностью избавляет вас от этой проблемы. В своей основе &automanag; — графическая оболочка для работы с содержанием файла <filename
>Makefile.am</filename
>.</para>

<para
>Остальные файлы управления сборкой проекта — <filename
>configure.in.in</filename
> и <filename
>subdirs</filename
> — лежат в корневом каталоге проекта. Они будут обрабатываться определёнными файлами из специального каталога администрирования &kde; (<filename class="directory"
>admin</filename
>) для создания файлов <filename
>configure</filename
> и <filename
>Makefile</filename
> и последующей сборки двоичных файлов приложения.</para>
</listitem>

<listitem>
<formalpara>
<title
>Файлы управления средой</title>
<para
>Среда сама нуждается в некоторых управляющих файлах. Они находятся в корневом каталоге проекта. в нашем примере это <filename
>hello.kdevelop</filename
>, <filename
>hello.kdevelop.pcs</filename
> и <filename
>hello.kdevses</filename
>.</para>
</formalpara>

<para
>Особенно важен файл <filename
>xxx.kdevelop</filename
> (где «xxx» — название проекта). Это главный <emphasis
>файл проекта KDevelop</emphasis
>. Он необходим для загрузки проекта в среду.</para>

<warning>
<para
>Никогда не изменяйте, не переименовывайте и, тем более, не удаляйте эти файлы вручную! Иначе среда, скорее всего, не сможет правильно работать с проектом.</para>
</warning>
</listitem>

<listitem>
<formalpara>
<title
>Файлы описания проекта GNU</title>
<para
>Для любого приложения, удовлетворяющего требованиям проекта &GNU;, в корневом каталоге проекта обязательно должны присутствовать несколько файлов: <filename
>AUTHORS</filename
>, <filename
>ChangeLog</filename
>, <filename
>INSTALL</filename
>, <filename
>COPYING</filename
> (содержит текст лицензии GNU GPL); <filename
>INSTALL</filename
>, <filename
>NEWS</filename
>, <filename
>README</filename
> и <filename
>TODO</filename
>.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Другие файлы</title>
<para
>Несколько не упомянутых ранее файлов:</para>
</formalpara>

<itemizedlist>
<listitem>
<para
><filename
>Doxyfile</filename
>. Управляет созданием документации по &API; проекта.</para>
</listitem>

<listitem>
<para
>Каталог <filename class="directory"
>templates</filename
> содержит шаблоны файлов, которые среда использует как заготовки для создания новых исходных файлов. Вы можете в любое время их изменить. Новое содержание будет использовано при последующем создании исходных файлов соответствующих типов.</para>

<para
>Например, можно выровнять звёздочки на концах строк, сообщающих об авторских правах, которые мастер вставил в шаблоны файлов <filename
>cpp</filename
> и <filename
>h</filename
>, чтобы создаваемые исходные файлы выглядели более опрятно.</para>
</listitem>

<listitem>
<para
>Каталог <filename class="directory"
>po</filename
> предназначен для локализации приложения. Это существенная часть файлов проекта (содержит файл <filename
>Makefile.am</filename
>), но, в основном, они используются в процессе перевода, который не особенно интересует разработчика приложения.</para>
</listitem>

<listitem>
<para
>Каталог <filename class="directory"
>admin</filename
>. Он нужен приложениям &kde;. так как нём хранятся файлы, необходимые для обслуживания исходного кода и двоичных файлов приложения, а также для их правильной интеграции в среду &kde;.</para>
</listitem>
</itemizedlist>

</listitem>
</itemizedlist>
</sect3>
</sect2>

<sect2 id="gettingstarted-new-toolviews">
<title
>Дополнительные боковые панели</title>

<para
>Когда мастер создаст новый проект, вы увидите, что появились несколько дополнительных боковых панелей. Они имеют значение только во время работы с проектом и обеспечивают следующую функциональность.</para>

<note>
<para
>Конкретный набор боковых панелей зависит от того, какие дополнительные модули загружены в среду. Этим можно управлять. О том, как это делать, читайте раздел "<link linkend="setup-plugins"
>Подключаемый инструментарий</link
>".</para>
</note>

<sect3 id="gettingstarted-new-toolviews-left">
<title
>Инструменты перемещения и выделения (левая сторона)</title>

<itemizedlist>
<listitem>
<formalpara>
<title
>Закладки</title>
<para
>Вы можете ставить закладку на любую строку текстового файла для быстрого возврата к ней. Среда будет помнить все <emphasis
>закладки</emphasis
> даже после закрытия окна редактора. Данная боковая панель содержит список всех закладок по имени файла и номеру строки. Вы просто нажимаете левой кнопкой мыши на закладку в списке и нужное место файла открывается в окне редактора.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Классы</title>
<para
>Список классов, методов и так далее, содержащихся в проекте. Нажатие левой кнопкой мыши на элементе списка открывает соответствующий заголовочный файл или файл реализации в окне редактора и перемещает курсор на соответствующее объявление или определение.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Группы</title>
<para
>С помощью этой боковой панели можно объединять файлы проекта в различные группы: исходный код, интерфейс пользователя, значки, переводы и т.п. Нажатие левой кнопкой мыши на файле в группе открывает его в окне редактора.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Переменные</title>
<para
>Используется отладчиком для показа, вычисления и наблюдения значений переменных во время отладки.</para>
</formalpara>
</listitem>
</itemizedlist>
</sect3>

<sect3 id="gettingstarted-new-toolviews-bottom">
<title
>Сообщения (нижняя сторона)</title>

<itemizedlist>
<listitem>
<formalpara>
<title
>Valgrind</title>
<para
>Результаты программы <application
>Valgrind</application
> (средство анализа программы во время выполнения). Используется, например, для поиска утечек памяти.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Безопасность</title>
<para
>Модуль <guilabel
>Проверка безопасности</guilabel
> выводит на эту боковую панель предупреждения о наличии в текущем файле исходного кода типичных проблем безопасности.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Точки останова</title>
<para
>Панель для управления точками останова в файлах исходного кода. Используется в вместе с отладчиком.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>CTags</title>
<para
>Панель для работы с базой данных идентификаторов. С её помощью можно искать идентификаторы в файлах исходного кода. Для создания базы используется программа <application
>CTags</application
>. Результаты поиска объединяются в список. Нажатие левой кнопкой мыши на элементе списка открывает в окне редактора файл с идентификатором.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Проблемы</title>
<para
>Среда отслеживает типичные проблемы программирования в редактируемом файле исходного кода и выводит предупреждения на эту боковую панель.</para>
</formalpara>
</listitem>
</itemizedlist>
</sect3>
  
<sect3 id="gettingstarted-new-toolviews-right">
<title
>Управление исходным кодом (правая сторона)</title>
      
<itemizedlist>
<listitem>
<formalpara>
<title
>Проект Automake</title>
<para
>Инструмент &automanag; — это графическая оболочка для работы с содержанием файлов <filename
>Makefile.am</filename
>, расположенных в каждом каталоге проекта. Он имеет два поля управления. Верхнее показывает часть подкаталогов проекта, которые содержат <emphasis
>проектные файлы</emphasis
>. Каждый такой подкаталог должен иметь файл <filename
>Makefile.am</filename
>. В &automanag; он называется <emphasis
>подпроект</emphasis
>.</para>
</formalpara>

<para
>Нажатие левой кнопкой мыши на подпроекте показывает его проектные файлы в нижнем поле. Файлы группируются в соответствии их ролью в файле <filename
>Makefile.am</filename
> данного подпроекта.</para>

<para
>&automanag; — очень мощный инструмент для управления проектом и его подпроектами, а также функциями проектных файлов в процессе сборки приложения. <link linkend="gettingstarted-extend-automake"
>Ниже</link
> мы рассмотрим его основные особенности. Более подробное описание в главе «<link linkend="project-management"
>Сборка и управление проектом</link
>».</para>
</listitem>
</itemizedlist>
</sect3>
</sect2>
</sect1>


<sect1 id="gettingstarted-edit">
<title
>Советы по работе с документами.</title>

<para
>В нашем примере &appwizard; оставил файл <filename
>hello.cpp</filename
> открытым в окне редактора, чтобы вы могли немедленно приступить к работе. Мы предполагаем, что вы умеете пользоваться редактором, поэтому не будем вдаваться в подробности. Однако среда обладает несколькими полезными функциями для управления окнами редактора и документами. Их мы и рассмотрим.</para>

<simplelist>
<member
><link linkend="gettingstarted-edit-headers"
>Быстрое переключение между заголовочным файлом и файлом реализации.</link
></member>
<member
><link linkend="gettingstarted-edit-defs"
>Быстрый доступ к объявлениям и определениям.</link
></member>
<member
><link linkend="gettingstarted-edit-arrange"
>Упорядочение окон редактора.</link
></member>
<member
><link linkend="gettingstarted-edit-problems"
>Отслеживание типичных проблем.</link
></member>
</simplelist>

<sect2 id="gettingstarted-edit-headers">
<title
>Быстрое переключение между заголовочным файлом и файлом реализации</title>

<para
>Среда предлагает простой и быстрый способ переключения с файла реализации (<filename
>.cpp</filename
>) на соответствующий заголовочный файл (<filename
>.h</filename
>) и наоборот. Нажмите правой кнопкой мыши в окне редактора — появится меню, как на иллюстрации ниже.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="editor-switch-header.png" format="PNG"/>
</imageobject>
<caption
><para
>Переключение между файлом реализации и заголовочным файлом.</para
></caption>
</mediaobject>
</screenshot>

<para
>Выберите пункт <guimenuitem
>Переключить заголовочный файл и файл реализации</guimenuitem
>. Среда найдёт соответствующий заголовочный файл или файл реализации и откроет его в другом окне редактора. В нашем примере, если вы нажали правой кнопкой мыши в файле <filename
>hello.cpp</filename
>, будет показан файл <filename
>hello.h</filename
>, и курсор переместится в его окно.</para>

<para
>Более того, если вы нажмёте правой кнопкой мыши в пределах кода реализации класса, среда установит курсор на строке объявления этого класса в заголовочном файле. И наоборот, нажатие правой кнопкой мыши на объявлении класса покажет его реализацию.</para>

<para
>Если окно редактора с файлом должно переключиться на уже существующее, среда его активирует и переместит в него курсор, если это необходимо.</para>
</sect2>

<sect2 id="gettingstarted-edit-defs">
<title
>Доступ к объявлениям и определениям</title>

<para
>Но что если вы работаете над файлом исходного кода и хотите найти объявление или определение идентификатора? Это тоже нетрудно. По существу, всё, что вам нужно сделать — это нажать правой кнопкой мыши на интересующем вас идентификаторе.</para>

<para
>Однако, нужно разделять две различных ситуации:</para>
<simplelist>
<member
><link linkend="gettingstarted-edit-defs-external"
>доступ к идентификаторам, определённым вне проекта</link
> и</member>
<member
><link linkend="gettingstarted-edit-defs-project"
>работу с внутренними идентификаторами проекта</link
>.</member>
</simplelist>

<sect3 id="gettingstarted-edit-defs-external">
<title
>Внешние объявления и определения</title>

<para
>В самом типичном случае, вы будете искать идентификатор, определённый за пределами проекта. В проектах &kde; такие идентификаторы, скорее всего, документированы в библиотеках &kde; и &Qt;. Если &kde; и &kdevelop; установлены правильно, то должен быть доступ к документации по API и возможность поиска идентификаторов в ней.</para>

<para
>Давайте рассмотрим пример. Найдите в окне редактора файла <filename
>hello.cpp</filename
> следующие строки:</para>

<programlisting
>Hello::Hello()
    : KMainWindow( 0, "Hello" )
{
</programlisting>

<para
>Нажмите правую кнопку мыши на <classname
>KMainWindow</classname
>. Откроется меню. Выберите в нём пункт <guimenuitem
>Искать в документации: KMainWindow</guimenuitem
> и отпустите кнопку. Откроется боковая панель <guilabel
>Документация</guilabel
>, показывающая <classname
>KMainWindow</classname
> как элемент поиска в разделе <guilabel
>Поиск</guilabel
>. Через мгновенье в рабочей области откроется новое окно редактора, показывающее страницу справочника по API KDE с описанием класса <classname
>KMainWindow</classname
>.</para>

<para
>См. иллюстрацию ниже. Мы намеренно открыли вкладку <guilabel
>Документация</guilabel
>, <guilabel
>Поиск</guilabel
>, чтобы продемонстрировать результат выбора этого пункта меню.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="editor-search-doc.png" format="PNG"/>
</imageobject>
<caption
><para
>Поиск идентификаторов во внешней документации.</para
></caption>
</mediaobject>
</screenshot>

<para
>Вы могли бы выбрать пункт <guimenuitem
>Поиск в документации: KMainWindow</guimenuitem
>. В этом случае была бы показана вкладка <guilabel
>Поиск</guilabel
> боковой панели <guilabel
>Документация</guilabel
>, обычно предлагающая выбор страниц, содержащих искомую строку (в нашем примере это классы <classname
>KMainWindow</classname
> и <classname
>KMainWindowInterface</classname
>). Выберите любую из них, и она будет показана в окне редактора.</para>

<note>
<para
>Если это не сработало, возможно, не был создан индекс документации. См. <link linkend="gettingstarted-configure-search"
>предыдущий раздел</link
>.</para>
</note>
</sect3>

<sect3 id="gettingstarted-edit-defs-project">
<title
>Внутренние объявления и определения проекта</title>

<para
>Поиск во внешней документации имеет свои ограничения. С помощью него нельзя найти идентификатор, который используется только внутри текущего проекта. Решение этой проблемы есть: среда может использовать индексы, созданные программой <application
>CTags</application
> для поиска в исходных текстах проекта.</para>

<para
>Чтобы воспользоваться этой функцией в нашем проекте, мы должны сначала создать индекс. Это делается с помощью боковой панели <guilabel
>CTags</guilabel
>, расположенной внизу рабочей области.</para>

<para
>Когда вы нажмёте на кнопку вкладки <guibutton
>CTags</guibutton
>, откроется боковая панель. В её правом нижнем углу вы обнаружите кнопку <guibutton
>Создать индекс</guibutton
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="editor-ctags-regenerate.png" format="PNG"/>
</imageobject>
<caption
><para
>Нажмите её.</para
></caption>
</mediaobject>
</screenshot>

<para
>Подождите несколько секунд. Надпись <guilabel
>База данных CTags не найдена</guilabel
> слева от этой кнопке сменится текущей датой. Теперь можно искать идентификаторы.</para>

<tip>
<para
>Дата рядом с кнопкой <guilabel
>Создать индекс</guilabel
> предназначена для напоминания о том, что индекс, возможно, устарел. Когда ваши попытки найти какой-либо идентификатор начнут завершаться неудачно, подумайте об обновлении индекса. В больших проектах это может занять значительное время, но вам следует выработать привычку регулярно обновлять индекс после существенных изменений исходного кода программы.</para>
</tip>

<para
>Существует несколько способов поиска идентификаторов в проекте.</para>

<itemizedlist>
<listitem>
<formalpara>
<title
>Использование боковой панели CTags</title>
<para
>Это просто. Начните вводить название идентификатора в поле <guilabel
>Поиск</guilabel
> внизу слева. Среда попытается дополнить вводимое слово и показать все идентификаторы, которые начинаются с последовательности символов в поле.</para>
</formalpara>

<para
>Если, например, вы хотите узнать, где используется идентификатор «Hello» в нашем проекте, наберите в поле <guilabel
>Поиск</guilabel
> «H». Среда немедленно примется за дело и покажет результат, подобный следующему:</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="editor-ctags-lookup.png" format="PNG"/>
</imageobject>
<caption
><para
>Поиск идентификатора с помощью боковой панели <guilabel
>CTags</guilabel
>.</para
></caption>
</mediaobject>
</screenshot>

<para
>Если вы нажмёте левой кнопкой мыши на один из элементов списка, среда откроет в окне редактора файл и установит курсор в соответствующее место.</para>
</listitem>

<listitem>
<formalpara>
<title
>Использование контекстного меню в файле исходного кода</title>
<para
>Это удобно, когда вы работаете с определённым исходным файлом. Допустим, вы изучаете файл <filename
>main.cpp</filename
> нашего проекта. Там вы находите строку</para>
</formalpara>
<programlisting
>Hello *mainWin = 0;
</programlisting>
<para
>и задаётесь вопросом: «Для чего используется данная переменная?». Чтобы это выяснить, просто нажмите правой кнопкой мыши на идентификаторе «Hello». Появится меню, содержащее в конце необходимые для перехода пункты.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="editor-ctags-menu.png" format="PNG"/>
</imageobject>
<caption
><para
>Получение информации <application
>CTags</application
> об идентификаторе в проекте.</para
></caption>
</mediaobject>
</screenshot>

<para
>Нажмите левой кнопкой мыши на интересующем пункте. Выберите <guilabel
>CTags: перейти к определению «Hello»</guilabel
>. Среда незамедлительно откроет файл <filename
>hello.cpp</filename
> в новом окне редактора и переместит курсор прямо к определению класса:</para>
<programlisting
>Hello::Hello()
    : KMainWindow( 0, "Hello" )
{
</programlisting>
</listitem>

<listitem>
<formalpara>
<title
>Глобальный поиск</title>
<para
>Эта функция особенно полезна для поиска произвольного текста в исходном коде проекта. Есть два способа запустить глобальный поиск:</para>
</formalpara>
<itemizedlist>
<listitem>
<para
>запустить глобальный поиск командой меню <menuchoice
><guimenu
>Правка</guimenu
> <guimenuitem
>Найти в файлах...</guimenuitem
></menuchoice
>;</para>
</listitem>
<listitem>
<para
>использовать контекстное меню окна редактора.</para>
</listitem>
</itemizedlist>

<para
>Мы продемонстрируем второй способ на нашем проекте. Содержание открываемого меню будет, в целом, идентичным. Давайте предположим, что мы изучаем исходный код в файле <filename
>hello.cpp</filename
>, курсор находится на первом идентификаторе «Hello», и мы хотим узнать, в каких файлах и сколько раз встречается данный идентификатор. Это типичный случай, в котором используется глобальный поиск.</para>

<para
>Теперь, удерживая курсор мыши над идентификатором «Hello», нажмите правую кнопку мыши и выберите в появившемся контекстном меню пункт <guilabel
>Grep: Hello</guilabel
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="editor-find-menu.png" format="PNG"/>
</imageobject>
<caption
><para
>Запуск глобального поиска из окна редактора.</para
></caption>
</mediaobject>
</screenshot>

<para
>Появится диалог <guilabel
>Поиск в файлах</guilabel
> (точно такой же, как по команде меню <menuchoice
><guimenu
>Правка</guimenu
> <guimenuitem
>Найти в файлах...</guimenuitem
></menuchoice
>).</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="find-in-files.png" format="PNG"/>
</imageobject>
<caption
><para
>Диалог представляет собой графическую оболочку для выполнения глобального поиска в проекте.</para
></caption>
</mediaobject>
</screenshot>

<para
>Это очень мощный инструмент для выполнения поиска с помощью утилит <application
>find</application
> и <application
>grep</application
> во всём проекте. Мы не будем здесь углубляться в детали, вы можете поэкспериментировать с его возможностями сами. В данный момент в поле <guilabel
>Образец</guilabel
> уже должно быть помещено наше слово. В противном случае введите его в поле и нажмите кнопку <guibutton
>Поиск</guibutton
> внизу справа.</para>

<para
>Снизу откроется боковая панель <guilabel
>Поиск в файлах</guilabel
>, показывающая названия файлов нашего проекта и строки, где встречается искомое слово. Как обычно, если вы нажмёте левой кнопкой мыши на элементе списка, среда откроет в рабочей области окно редактора и покажет конкретное место употребления слова в файле.</para>

<para
>В этой боковой панели два места особенно интересны.</para>
<itemizedlist>
<listitem>
<para
>Справа наверху вы увидите последовательности команд, которые выполнялись во время поиска. Это полезная информация для контроля результатов поиска.</para>
</listitem>

<listitem>
<para
>Внизу находится список найденного. В нашем примере должно быть «*** 11 совпадений найдено ***».</para>
</listitem>
</itemizedlist>

<para
>Среда помнит результаты поиска всё время своей работы. Если вы запустите новый глобальный поиск, его результаты будут показаны на новой вкладке боковой панели <guilabel
>Поиск в файлах</guilabel
>.</para>
</listitem>
</itemizedlist>
</sect3>
</sect2>

<sect2 id="gettingstarted-edit-arrange">
<title
>Упорядочение окон редактора</title>

<para
>При работе с большими и сложными проектами, на панели вкладок часто скапливается множество вкладок окон редактора. Возникает необходимость их удалять, упорядочивать, группировать. Среда имеет для этого несколько функций:</para>
<simplelist>
<member
><link linkend="gettingstarted-edit-arrange-clean"
>Удаление ненужных окон.</link
></member>
<member
><link linkend="gettingstarted-edit-arrange-tabs"
>Упорядочение вкладок окон.</link
></member>
<member
><link linkend="gettingstarted-edit-arrange-split"
>Одновременный просмотр нескольких файлов в рабочей области.</link
></member>
<member
><link
linkend="gettingstarted-edit-arrange-sourceheader"
>Одновременное редактирование заголовочных файлов и файлов реализации C++.</link
></member>
<member
><link linkend="gettingstarted-edit-arrange-group"
>Объединение открытых окон в сеансы.</link
></member>
</simplelist>

<sect3 id="gettingstarted-edit-arrange-clean">
<title
>Очистка полосы вкладок</title>

<para
>На случай, когда огромное количество вкладок окон редактора становится плохо управляемым, в среде реализованы методы группового и индивидуального закрытия окон.</para>

<formalpara>
<title
>Одновременное закрытие нескольких окон</title>
<para
>Групповое закрытие окон существует и в других приложениях &kde;. Оно доступно через меню <guimenu
>Окно</guimenu
> или контекстное меню вкладки окна. С его помощью можно закрыть:</para>
</formalpara>
<itemizedlist>
<listitem>
<para
>текущее окно;</para>
</listitem>
<listitem>
<para
>все окна кроме текущего;</para>
</listitem>
<listitem>
<para
>все окна (только через меню <guimenu
>Окно</guimenu
>).</para>
</listitem>
</itemizedlist>

<formalpara>
<title
>Закрытие выбранных окон</title>
<para
>Последовательное закрытие отдельных окон может оказаться неудобным, если их открыто большое количество, а оставить необходимо только несколько. Вместо этого, окна можно сначала выбрать, а затем закрыть их одним нажатием кнопки мыши.</para>
</formalpara>

<para
>Давайте рассмотрим этот метод на простом примере. Допустим, в нашем проекте «Hello» открыто для редактирования несколько файлов: <filename
>hello.cpp</filename
>, <filename
>hello.h</filename
>, <filename
>helloui.rc</filename
>, <filename
>hello.desktop</filename
> и <filename
>main.cpp</filename
>. Мы хотим закрыть все кроме  <filename
>hello.cpp</filename
>. Самый простой способ это сделать — воспользоваться боковой панелью <guilabel
>Окна</guilabel
>. Для удобства список открытых файлов упорядочен по алфавиту. Процедура удаления занимает несколько шагов:</para>

<procedure>
<step>
<para
>Откройте панель <guilabel
>Окна</guilabel
> и, удерживая клавишу <keycap
>Ctrl</keycap
> нажатой, выберите файлы, которые хотите закрыть.</para>
</step>
<step>
<para
>Откройте контекстное меню любого выделенного файла в списке.</para>
</step>
<step>
<para
>Выберите в нём команду <guimenuitem
>Закрыть выделенные</guimenuitem
>.</para>
</step>
</procedure>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="file-list-close-selected.png" format="PNG"/>
</imageobject>
<caption
><para
>Закрытие выделенных окон редактора одним действием.</para
></caption>
</mediaobject>
</screenshot>
<para
>Выделенные окна будут закрыты.</para>
</sect3>

<sect3 id="gettingstarted-edit-arrange-tabs">
<title
>Упорядочение вкладок окон редактора</title>

<para
>Даже если у вас открыты только нужные окна, иногда возникает необходимость их упорядочить. Для этого имеется несколько функций:</para>

<formalpara>
<title
>Основная настройка: размещение новых вкладок.</title>

<para
>По умолчанию, вкладка нового окна вставляется справа от вкладки текущего. Можно сделать так, чтобы новая вкладка добавлялась с правого края панели вкладок.</para>
</formalpara>
<para
>Для этого нужно изменить параметр пользовательского интерфейса среды.</para>
<procedure>
<step>
<para
>Выберите команду меню <menuchoice
><guimenu
>Настройка</guimenu
> <guimenuitem
>Настроить KDevelop...</guimenuitem
></menuchoice
>.</para>
</step>
<step>
<para
>В открывшемся диалоге выберите раздел <guilabel
>Интерфейс пользователя</guilabel
>.</para>
</step>
<step>
<para
>В её левом нижнем углу найдите группу <guilabel
>Использование вкладок</guilabel
>. Уберите флажок <guilabel
>Открывать новую вкладку после текущей</guilabel
>.</para>
</step>
<step>
<para
>Перезапустите &kdevelop;. Теперь новые вкладки окон редактора будут добавляться с правого края на панели вкладок.</para>
</step>
</procedure>

<para
>К сожалению, этот параметр нельзя изменять во время работы. Вам придётся заранее решить, какой вариант поведения вам больше подходит.</para>

<formalpara>
<title
>Упорядочение вкладок</title>
<para
>Так как задачи в процессе разработки меняются, возникает необходимость упорядочить окна редактора. Сделать это в &kdevelop; не сложно.</para>
</formalpara>
<para
>Нажмите средней кнопкой мыши интересующую вкладку и чуть-чуть подвиньте мышь. Указатель примет форму перекрещенных стрелок. Теперь, не отпуская кнопку, перетащите вкладку в нужное место.</para>
</sect3>

<sect3 id="gettingstarted-edit-arrange-split">
<title
>Просмотр нескольких файлов одновременно</title>

<para
>Во время работы с проектом всегда открыто по крайней мере одно окно редактора для работы с исходным кодом. Хотя вы можете быстро переключаться между окнами, иногда нужно видеть несколько файлов одновременно. Например, для справки или для сложной правки. Для этого существует функция деления рабочей области на несколько одновременно видимых частей, каждая из которых может содержать свой набор окон.</para>

<para
>Для выполнения деления есть две команды. Они доступны в меню <guimenu
>Окно</guimenu
> и в контекстных меню окна и его вкладки. Рассмотрим их действие на примере нашего проекта.</para>

<para
>Допустим, есть два открытых файла исходного кода: <filename
>hello.cpp</filename
> и <filename
>hello.h</filename
>. Так как во время работы с файлом <filename
>hello.cpp</filename
> часто возникает необходимость обращаться к объявлениям в заголовочном файле <filename
>hello.h</filename
>, вы хотите видеть оба файла одновременно.</para>

<para
>Чтобы это сделать, откройте контекстное меню вкладки <filename
>hello.h</filename
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="split-workspace.png" format="PNG"/>
</imageobject>
<caption
><para
>Деление рабочей области на две части.</para
></caption>
</mediaobject>
</screenshot>

<para
>Выберите команду <guimenuitem
>Разделить горизонтально</guimenuitem
>. Текущая рабочая область будет поделена пополам, окно <filename
>hello.h</filename
> будет помещено в нижнюю половину.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="split-windows.png"/>
</imageobject>
<caption
><para
>Рабочая область, разделённая по горизонтали.</para
></caption>
</mediaobject>
</screenshot>

<para
>Обратите внимание на пунктирную разделительную линию между окнами. С помощью неё можно менять высоту верхнего и нижнего окон.</para>

<para
>Здесь стоит отметить несколько нюансов:</para>
<itemizedlist>
<listitem>
<para
>Части рабочей области функционируют независимо друг от друга. Это значит, что новые окна-вкладки будут открываться в той части, где находится текущее окно. Любую часть можно тоже делить на части и так далее, таким образом, количество одновременно видимых окон неограниченно.</para>
</listitem>

<listitem>
<para
>Операция разделения перемещает текущее окно редактора в нижнюю или правую части рабочей области. Остальные окна остаются на прежних местах. Окна нельзя перемещать между частями — окно необходимо сначала закрыть в одной части, а затем открыть его в другой.</para>
</listitem>

<listitem>
<para
>Команды закрытия частей рабочей области не предусмотрено. Они закрываются автоматически, когда в них закрывается последнее окно.</para>
</listitem>
</itemizedlist>
</sect3>

<sect3 id="gettingstarted-edit-arrange-sourceheader">
<title
>Одновременное редактирование заголовочных файлов и файлов реализации C++</title>

<para
>Существует изящное применение описанной возможности. Среда позволяет автоматически показывать <filename
>.cpp</filename
> и соответствующий <filename
>.h</filename
> файлы рядом, а также работать с обоими файлами синхронно: при выделении объявления в заголовочном файле, среда будет перемещать курсор к соответствующему определению в файле реализации и наоборот.</para>

<para
>Данная функция по умолчанию выключена. Если вы хотите её использовать, вам нужно её включить.</para>

<para
>Для этого выберите команду меню <menuchoice
><guibutton
>Проект</guibutton
> <guimenuitem
>Параметры проекта</guimenuitem
></menuchoice
>. Появится диалог <guilabel
>Параметры проекта</guilabel
>. Перейдите в раздел <guiicon
>Поддержка C++</guiicon
>, а затем на вкладку <guilabel
>Навигация</guilabel
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="split-source-header.png" format="PNG"/>
</imageobject>
<caption
><para
>Включение показа заголовочного файла и файла реализации C++ рядом.</para
></caption>
</mediaobject>
</screenshot>

<para
>Теперь установите флажок <guilabel
>Разрешить разбиение файлов на заголовочный файл и файл реализации</guilabel
>. По умолчанию установится флажок <guilabel
>Автоматическая синхронизация</guilabel
>, а переключатель <guilabel
>Ориентация</guilabel
> перейдёт в положение <guilabel
>Вертикально</guilabel
>. Пока не меняйте эти параметры. Нажмите кнопку <guibutton
>OK</guibutton
>.</para>

<para
>Чтобы увидеть эту функцию в действии, закройте в проекте «Hello» окна редактора для файлов <filename
>hello.cpp</filename
> и <filename
>hello.h</filename
>. Теперь снова выберите  файл <filename
>hello.cpp</filename
> в подкаталоге <filename class="directory"
>src</filename
> каталога проекта. Откроется окно редактора, как обычно. Но если вы сейчас откроете файл <filename
>hello.h</filename
>, среда автоматически разделит рабочую область и откроет окно редактора для этого файла прямо под окном <filename
>hello.cpp</filename
>.</para>

<para
>Теперь найдите в окне редактора файла <filename
>hello.cpp</filename
> следующее определение конструктора:</para>
<programlisting
>Hello::Hello()
</programlisting>
<para
>— и поместите в него курсор. Посмотрите в окно файла <filename
>hello.h</filename
> внизу. Среда покажет в нём соответствующее объявление этого конструктора.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="split-source-header-navigate.png" format="PNG"/>
</imageobject>
<caption
><para
>Автоматический переход к объявлению конструктора.</para
></caption>
</mediaobject>
</screenshot>

<para
>Этот механизм работает и в обратную сторону. Когда вы устанавливаете курсор на языковую конструкцию в одном окне редактора, среда перейдёт к соответствующей конструкции в другом.</para>
</sect3>

<sect3 id="gettingstarted-edit-arrange-group">
<title
>Объединение открытых окон в сеансы</title>

<para
>Увеличение размера проекта и усложнение задач по его разработке приводят в необходимости частого переключения между различными наборами файлов. В этом случае целесообразно организовать работу над проектом в виде нескольких сеансов. Это осуществляется в боковой панели <guilabel
>Окна</guilabel
>.</para>

<para
>В верхней части этой боковой панели есть панель инструментов, с помощью которой можно создавать, сохранять, выбирать и удалять сеансы. Альтернативный способ — через подменю <guimenuitem
>Сеанс</guimenuitem
> меню <guimenu
>Вид</guimenu
>.</para>

<para
>Мы покажем эту возможность снова на примере проекта «Hello». Предположим, вы хотите всегда открывать файлы <filename
>main.cpp</filename
>, <filename
>hello.h</filename
> и <filename
>main.cpp</filename
> одним действием не зависимо от того, что делали до этого. Для этого нужно сначала создать новый сеанс, который называется, скажем, «sources».</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="file-list-session-create.png" format="PNG"/>
</imageobject>
<caption
><para
>Использование сеансов для запоминания групп файлов.</para
></caption>
</mediaobject>
</screenshot>

<para
>Объединение файлов в сеанс занимает несколько шагов.</para>
<procedure>
<step>
<para
>Создание нового сеанса.</para>
<substeps>
<step>
<para
>Нажмите кнопку <guiicon
>Новый сеанс</guiicon
> в верхней левой части боковой панели <guilabel
>Окна</guilabel
>.</para>
</step>
<step>
<para
>Откроется диалог. Введите название сеанса в поле <guilabel
>Введите название сеанса</guilabel
> (например, «sources»).</para>
</step>
<step>
<para
>Закройте диалог кнопкой <guibutton
>OK</guibutton
>. Созданный сеанс появится в выпадающем меню панели инструментов.</para>
</step>
</substeps>
</step>
<step>
<para
>Новый сеанс изначально пуст. В него нужно добавить файлы.</para>
<substeps>
<step>
<para
>Откройте все файлы, которые хотите добавить в сеанс. В нашем примере это будут <filename
>hello.cpp</filename
>, <filename
>hello.h</filename
> и <filename
>main.cpp</filename
>.</para>
</step>
<step>
<para
>Нажмите кнопку <guiicon
>Сохранить сеанс</guiicon
> на панели инструментов. Не забудьте это сделать, иначе список файлов не будет запомнен.</para>
</step>
</substeps>
</step>
</procedure>

<para
>Всё. Когда вы выберите сеанс <guilabel
>sources</guilabel
> в выпадающем меню <guilabel
>Открыть сеанс</guilabel
>, среда закроет все открытые в данный момент окна редактора и откроет запомненные в сеансе файлы (в нашем примере это <filename
>hello.cpp</filename
>, <filename
>hello.h</filename
> и <filename
>main.cpp</filename
>).</para>

<para
>Количество сеансов в проекте неограниченно. Если хотите изменить содержание сеанса, просто обновите список файлов и нажмите <guiicon
>Сохранить сеанс</guiicon
>. Удаляется сеанс нажатием кнопки <guiicon
>Удалить сеанс</guiicon
> справа на панели инструментов.</para>

<para
>Более того, вы можете заставить среду открывать данный сеанс по умолчанию при загрузке проекта. Просто выберите сеанс в выпадающем списке в разделе <guimenuitem
>Окна</guimenuitem
> в диалоговом окне, открываемом командой меню <menuchoice
><guimenu
>Проекты</guimenu
> <guimenuitem
>Параметры проекта</guimenuitem
></menuchoice
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="file-list-session-default.png" format="PNG"/>
</imageobject>
<caption
><para
>Настройка среды на открытие определённого сеанса при загрузке проекта.</para
></caption>
</mediaobject>
</screenshot>
</sect3>
</sect2>

<sect2 id="gettingstarted-edit-problems">
<title
>Отслеживание типичных проблем</title>

<para
>Когда вы открываете файл с исходным кодом, среда делает анализ его содержимого. Это позволяет встроенному <emphasis
>инспектору проблем</emphasis
> проверить исходный текст на наличие типичных ошибок и предупредить пользователя о подозрительных местах.</para>

<para
>Давайте посмотрим, как это работает, на примере нашего проекта.</para>

<itemizedlist>
<listitem>
<para
>Откройте файл <filename
>main.cpp</filename
>.</para>
</listitem>

<listitem>
<para
>Убедитесь, что он ещё содержит где-то в конце следующую строку:</para>
<programlisting
>/// @todo do something with the command line args
</programlisting>
<para
>Она была вставлена Мастером проектов при создании проекта (см. главу <link linkend="gettingstarted-new"
>Создание нового проекта</link
>).</para>
</listitem>

<listitem>
<para
>Теперь откройте боковую панель <guilabel
>Проблемы</guilabel
> в нижнем ряду вкладок. Если всё сделано правильно, появится сообщение об этой заметке «todo»:</para>
<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="problem-report-todo.png"/>
</imageobject>
<caption
><para
>Среда предупреждает о строках в исходном коде, которые содержат маркер «todo».</para
></caption>
</mediaobject>
</screenshot>
</listitem>
</itemizedlist>

<para
>Формат команды <computeroutput
>/// @todo</computeroutput
> предназначен для специальной обработки программой <application
>Doxygen</application
>, которую мы рассмотрим в главе «<link linkend="gettingstarted-doc"
>Документация</link
>». Не обязательно использовать именно этот формат, более распространённые маркеры <computeroutput
>TODO</computeroutput
> и <computeroutput
>FIXME</computeroutput
> тоже распознаются.</para>

<para
>Например, если вы вставите комментарии, содержащие <computeroutput
>TODO</computeroutput
> и <computeroutput
>FIXME</computeroutput
>, в файл <filename
>hello.cpp</filename
>,</para>
<programlisting
>Hello::Hello()
    : KMainWindow( 0, "Hello" )
{
    // set the shell's ui resource file
    // TODO check the user interface
    setXMLFile("helloui.rc");

    // FIXME change to a better suited greeting
    new QLabel( "Hello World", this, "hello label" );
}
</programlisting>
<para
>то увидите их на боковой панели <guilabel
>Проблемы</guilabel
>:</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="problem-report-marks.png" format="PNG"/>
</imageobject>
<caption
><para
>Отчёт о строках текущего файла, требующих внимания.</para
></caption>
</mediaobject>
</screenshot>

<para
>Обратите внимание на другие вкладки боковой панели <guilabel
>Проблемы</guilabel
>, особенно на  <guilabel
>Fixme</guilabel
> и <guilabel
>Todo</guilabel
>. Если вы их откроете, то найдёте в них все строки помеченные маркерами <computeroutput
>FIXME</computeroutput
> и <computeroutput
>TODO</computeroutput
>, которые были обнаружены в текущем сеансе. Например, заметки  <computeroutput
>TODO</computeroutput
> будут выглядеть следующим образом:</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="problem-report-all-todos.png" format="PNG"/>
</imageobject>
<caption
><para
>Перечисление <computeroutput
>TODO</computeroutput
>.</para
></caption>
</mediaobject>
</screenshot>

<para
>Однако, вкладка <guilabel
>Ошибки</guilabel
> содержит не все ошибки, допущенные вами в коде. Это работа для других инструментов, например, инструментов сборки. Но вы можете найти здесь предупреждения о некоторых типичных ошибках программирования, которые могли бы остаться незамеченными и, возможно, трудноуловимыми во время отладки.</para>

<para
>Вы оце́ните генератор отчётов о проблемах по достоинству. Регулярно поглядывайте на боковую панель <guilabel
>Проблемы</guilabel
> во время разработки.</para>
</sect2>
</sect1>

<sect1 id="gettingstarted-compile">
<title
>Компиляция проекта</title>

<para
>Компиляция в &kdevelop; требует выполнения нескольких подготовительных действий, за которыми следует непосредственно сборка приложения. Все они доступны через меню <guimenu
>Сборка</guimenu
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="build-menu.png" format="PNG"/>
</imageobject>
<caption
><para
>Сборка проекта занимает несколько шагов.</para
></caption>
</mediaobject>
</screenshot>

<para
>На данный момент нам интересна верхняя секция этого меню. Его пункты упорядочены по важности. Наиболее часто используемая команда <guimenuitem
>Собрать проект</guimenuitem
> находится в самом верху. Она вызывает инициализацию всего проекта, его компиляцию и, при необходимости, компоновку. Другие пункты компилируют выбранные части проекта или отдельный файл, выполняют несколько последовательностей инициализации или устанавливают собранные двоичные файлы приложения.</para>

<para
>Сейчас мы сконцентрируемся на нескольких возможностях, предоставленных средой для установки, инициализации, сборки и запуска приложения.</para>

<simplelist>
<member
><link linkend="gettingstarted-compile-basic"
>Основной цикл сборки (кратко).</link
></member>
<member
><link linkend="gettingstarted-compile-setup"
>Основные средства конфигурации проекта.</link
></member>
</simplelist>

<sect2 id="gettingstarted-compile-basic">
<title
>Основной цикл сборки</title>

<para
>После создания нового проекта обычно хочется проверить, всё ли сделано правильно. Для этого нужно собрать и запустить приложение. Самая первая компиляция проекта требует выполнения несколько подготовительных действий. Рассмотрим их.</para>
<simplelist>
<member
><link linkend="gettingstarted-compile-basic-init"
>Инициализация проекта для первой сборки.</link
></member>
<member
><link linkend="gettingstarted-compile-basic-config"
>Выполнение начальной конфигурации.</link
></member>
<member
><link linkend="gettingstarted-compile-basic-build"
>Сборка проекта.</link
></member>
<member
><link linkend="gettingstarted-compile-basic-run"
>Запуск приложения.</link
></member>
</simplelist>

<note>
<para
>Описание предполагает, что ваш проект основан на &GNU; autotools, которые используются при выборе соответствующего шаблона при создании проекта. Если вы выбрали другой шаблон проекта, например, основанный на сборке диспетчером проектов &Qt; <application
>QMake</application
>, будут доступны другие возможности или недоступно никаких. Обратитесь к документации соответствующего инструмента сборки, чтобы узнать, как управлять проектом и собирать его.</para>
</note>

<sect3 id="gettingstarted-compile-basic-init">
<title
>Инициализация проекта для сборки</title>

<para
>Когда &appwizard; создавал проект «Hello», он оставил его в «сыром» состоянии. Инструменты &GNU; autotools требуют выполнения нескольких действий по инициализации перед компиляцией и компоновкой приложения. Если вы попытаетесь собрать проект в таком «сыром» состоянии, например, выбрав команду меню  <menuchoice
><guimenu
>Собрать</guimenu
> <guimenuitem
>Собрать проект</guimenuitem
></menuchoice
> или нажав клавишу <keycap
>F8</keycap
>, то получите следующее предупреждение:</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="raw-project-warning.png" format="PNG"/>
</imageobject>
<caption
><para
>Попытка сборки «сырого» проекта на базе automake.</para
></caption>
</mediaobject>
</screenshot>

<para
>Можете нажать кнопку <guibutton
>Запустить</guibutton
> и среда попытается автоматически выполнить все требуемые подготовительные действия перед компиляцией и компоновкой приложения. Но мы рассмотрим эти действия последовательно, поэтому нажмите кнопку <guibutton
>Не запускать</guibutton
>, чтобы отменить этот диалог. </para>

<para
>Как уже было сказано, компиляция и компоновка приложения выполняется через меню <guimenu
>Сборка</guimenu
>. Откройте его и выберите команду <guimenuitem
>Запустить automake и родственные программы</guimenuitem
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="build-menu-automake.png" format="PNG"/>
</imageobject>
<caption
><para
>Запуск основной инициализации.</para
></caption>
</mediaobject>
</screenshot>

<para
>Среда откроет боковую панель <guilabel
>Сообщения</guilabel
> внизу, в которой будет показывать сообщения инструментов сборки. В случае отсутствия ошибок, последняя строка будет содержать сообщение «<computeroutput
>*** Успешное завершение ***</computeroutput
>».</para>

<para
>Если вы прокрутите список сообщений вверх, то найдёте командную строку, которой среда вызывала инструменты сборки. Пример командной строки:</para>

<programlisting
>cd '/home/devel/projects/hello' &amp;&amp; \
WANT_AUTOCONF_2_5="1" WANT_AUTOMAKE_1_6="1" gmake -f Makefile.cvs
</programlisting>

<para
>Она говорит о том, что сначала среда перешла в корневой каталог нашего проекта. Затем установила определённые переменные окружения, сообщая системе сборки версии утилит <application
>autoconf</application
> и <application
>automake</application
>, используемых для данной инициализации. И наконец передала программе сборки (в нашем случае это &GNU; <application
>gmake</application
>) файл с правилами сборки.</para>

<para
>Файл с правилами сборки был автоматически создан и настроен при создании проекта. Он содержит команды необходимые для правильной инициализации проекта, чтобы приложение могло работать в &kde;. Эти команды создадут скрипт <filename
>configure</filename
>, необходимый для выполнения следующего шага.</para>
</sect3>

<sect3 id="gettingstarted-compile-basic-config">
<title
>Начальная настройка проекта «Hello»</title>

<para
>Конфигурация означает подгонку процесса сборки под аппаратные и программные особенности вашей системы. Это основное требование в процессе сборки на основе &GNU; autotools.</para>

<para
>Когда основная инициализация automake успешно завершится, можно запускать скрипт configure, так как только после этой инициализации необходимые для его работы файлы станут доступны. Чтобы запустить его выберите команду меню <menuchoice
><guimenu
>Сборка</guimenu
><guimenuitem
>Запустить configure</guimenuitem
></menuchoice
>.</para>

<para
>Среда при необходимости опять откроет боковую панель <guilabel
>Сообщения</guilabel
>  для показа сообщений скрипта configure. Если не возникнет никаких ошибок, последними сообщениями будут «<computeroutput
>Good - your configure finished. Start make now</computeroutput
>» и «<computeroutput
>*** Успешное завершение ***</computeroutput
>», добавленное средой.</para>

<para id="gettingstarted-compile-basic-config-cmd"
>В верхней части панели <guilabel
>Сообщения</guilabel
> вы снова увидите командную строку, которую среда использовала для запуска скрипта. Она содержит следующее:</para>

<programlisting
>mkdir '/home/devel/projects/hello/debug' &amp;&amp; \
cd '/home/devel/projects/hello/debug' &amp;&amp; \
CXXFLAGS="-O0 -g3" "/home/devel/projects/hello/configure" --enable-debug=full
</programlisting>

<para
>Здесь есть несколько интересных деталей.</para>

<informaltable frame="none">
<tgroup cols="2"
><tbody
><row>
<entry>
<mediaobject>
<imageobject>
<imagedata fileref="tutorial-debug-tree.png"/>
</imageobject>
</mediaobject>
</entry>
<entry>
<itemizedlist>
<listitem>
<para
>Во-первых, для сборки среда использует специальный подкаталог в дереве каталога проекта. Каталог сборки <filename class="directory"
>debug</filename
> (показанный слева) содержит основную структуру проекта и набор файлов, связанных со сборкой: несколько файлов, созданных <filename
>configure</filename
>, и дополнительно по одному файлу <filename
>Makefile</filename
> на каждый подкаталог.</para>
</listitem>
<listitem>
<para
>Ниже, в разделе «<link linkend="gettingstarted-compile-setup"
>Настройка проекта</link
>» мы рассмотрим причины, по которым используются отдельные подкаталоги для сборки. Сейчас достаточно знать, что среда создала каталог <filename class="directory"
>debug</filename
> перед вызовом configure, и что этот скрипт создал его подкаталоги и все <filename
>Makefiles</filename
> в них.</para>
</listitem>
<listitem>
<para
>Затем, из каталога сборки <filename class="directory"
>debug</filename
> среда вызывает скрипт <filename
>configure</filename
>, расположенный в корневом каталоге проекта, настроив переменные окружения, среди которых флаги <computeroutput
>CXXFLAGS="-O0 -g3"</computeroutput
> для компилятора &gcc; (-O0 — выключение оптимизации, -g3 — генерация полной отладочной информации).</para>
</listitem>
<listitem>
<para
>В последнюю очередь запускается скрипт <filename
>configure</filename
> с параметром <computeroutput
>--enable-debug=full</computeroutput
>, который означает, что каждый <filename
>Makefile</filename
> будет создаваться с правилом для компиляции и компоновки с отладочной информацией.</para>
</listitem>
</itemizedlist>
</entry>
</row
></tbody
></tgroup>
</informaltable>

<para
>Эти параметры настраиваются для каждого проекта индивидуально. Более подробно это описано в главе «<link linkend="project-management"
>Управление проектом</link
>».</para>
</sect3>

<sect3 id="gettingstarted-compile-basic-build">
<title
>Сборка проекта</title>

<para
>Теперь можно собирать (компилировать и компоновать) приложение. В меню <guimenu
>Сборка</guimenu
> есть три команды компиляции.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="build-commands.png" format="PNG"/>
</imageobject>
<caption
><para
>Команды для сборки двоичных файлов.</para
></caption>
</mediaobject>
</screenshot>

<para
>Пункты снизу вверх:</para>
<itemizedlist>
<listitem>
<para
><guimenuitem
>Скомпилировать файл</guimenuitem
>. Компилирует текущий открытый файл исходного кода. В основном используется для быстрой проверки исходного кода на ошибки.</para>
</listitem>
<listitem>
<para
><guimenuitem
>Собрать активную цель</guimenuitem
>. Эта команда обычно используется вместе с <link linkend="gettingstarted-extend-automake"
>диспетчером Automake</link
>, который мы рассмотрим ниже.</para>
</listitem>
<listitem>
<para
><guimenuitem
>Собрать проект</guimenuitem
>. Эта команда то, что нам сейчас нужно. Она будет обрабатывать проект целиком, компилируя и компонуя все необходимые файлы.</para>
</listitem>
</itemizedlist>

<para
>Происходящее в каталоге <filename class="directory"
>debug</filename
>, созданном во время предыдущего запуска <filename
>configure</filename
>, может быть интересным. Поэтому держите все его подкаталоги в развёрнутом состоянии, как показано выше. Выберите команду <menuchoice
><guimenu
>Сборка</guimenu
> <guimenuitem
>Собрать проект</guimenuitem
></menuchoice
> (или нажмите клавишу <keycap
>F8</keycap
>), чтобы начать сборку. Снова внизу откроется боковая панель <guilabel
>Сообщения</guilabel
>, показывающая вывод инструментов сборки. Вместе с этим в подкаталоге <filename class="directory"
>debug</filename
> появятся некоторые файлы.</para>

<para id="gettingstarted-compile-basic-build-cmd"
>В нашем проекте немного файлов, поэтому окно <guilabel
>Сообщения</guilabel
> будет содержать незначительное количество строк. Вверху вы опять найдёте командную строку, которую использовала среда.</para>

<programlisting
>cd '/home/devel/projects/hello/debug' &amp;&amp; \
WANT_AUTOCONF_2_5="1" WANT_AUTOMAKE_1_6="1" gmake -k 
</programlisting>

<para
>Среда переключилась на подкаталог <filename class="directory"
>debug</filename
>, чтобы запустить находящийся там файл <filename
>Makefile</filename
>. Как и на <link linkend="gettingstarted-compile-basic-init"
>этапе инициализации</link
>, она установила специальные переменные окружения перед вызовом <application
>gmake</application
>.</para>

<para
>Обратите внимание на параметр <computeroutput
>-k</computeroutput
> в командной строке <application
>gmake</application
>. Он запрещает прерывание процесса сборки при возникновении ошибок. Это значит, что среда будет выводить все сообщения об ошибках в окно <guilabel
>Сообщения</guilabel
>. Если в этом окне присутствуют ошибки, используйте средства среды: нажмите на сообщение об ошибке в окне <guilabel
>Сообщения</guilabel
> и среда покажет ошибочное место в исходном файле.</para>

<para
>Что же произошло внутри каталога <filename class="directory"
>debug</filename
>? Ничего особенного. Появилось несколько файлов в ветвях  <filename class="directory"
>doc/en</filename
> и <filename class="directory"
>src</filename
>. Наиболее интересный среди них файл <filename
>hello</filename
> в каталоге <filename class="directory"
>/home/devel/projects/hello/debug/src/</filename
>. Это двоичный файл приложения. Всё, что осталось сделать, это запустить его.</para>
</sect3>

<sect3 id="gettingstarted-compile-basic-run">
<title
>Запуск приложения</title>

<para
>Чтобы запустить приложение, либо выберите команду меню <menuchoice
><guimenu
>Сборка</guimenu
> <guimenuitem
>Выполнить программу</guimenuitem
></menuchoice
>, либо нажмите комбинацию клавиш <keycombo
><keycap
>Shift</keycap
> <keycap
>F9</keycap
></keycombo
>, либо нажмите кнопку <guibutton
>Выполнить программу</guibutton
> на панели <guilabel
>Панель инструментов «Сборка»</guilabel
>, показанной внизу.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="run-button.png"/>
</imageobject>
<caption
><para
>Запуск приложения с помощью панели <guilabel
>Панель инструментов «Сборка»</guilabel
>.</para>
</caption>
</mediaobject>
</screenshot>

<para
>Всё. Теперь среда запустит новое приложение в окне консоли, которое открывается как боковая панель <guilabel
>Приложение</guilabel
> внизу. В верхней строке будет вызванная средой команда, наподобие следующей:</para>

<programlisting
>./hello
</programlisting>

<para
>Эта строка показывает, что среда знает, где находится исполняемый файл приложения. Место поиска исполняемого файла — настраиваемый параметр (см. главу "<link linkend="project-management"
>Управление проектом</link
>").</para>

<para
>За строкой <computeroutput
>./hello</computeroutput
>, скорее всего, будет следовать предупреждающее сообщение. Не обращайте в данный момент на него внимания. Оно не помешает запустить наше приложение.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="hello-world-app.png" format="PNG"/>
</imageobject>
<caption>
<para
>Наше первое приложение <application
>Hello</application
>.</para>
</caption>
</mediaobject>
</screenshot>

<para
>Закройте приложение. Если не возникнет никаких ошибок, среда выведет в окно боковой панели <guilabel
>Приложение</guilabel
> сообщение «<computeroutput
>*** Нормальное завершение ***</computeroutput
>».</para>
</sect3>
</sect2>

<sect2 id="gettingstarted-compile-setup">
<title
>Настройка проекта</title>

<para
>Существуют различные способы управления проектом. Каждый проект настраивается индивидуально. И хотя эта возможность представляет интерес в основном для опытных разработчиков, несколько параметров следует знать с самого начала. </para>

<simplelist>
<member
><link linkend="gettingstarted-compile-setup-build"
>Конфигурации сборки</link
></member>

<member
><link linkend="gettingstarted-compile-setup-config"
>Настройка поведения скрипта <filename
>configure</filename
>.</link
></member>

<member
><link linkend="gettingstarted-compile-setup-make"
>Рекомендации по запуску утилиты <application
>make</application
>.</link
></member>

<member
><link linkend="gettingstarted-compile-setup-run"
>Местонахождение исполняемого файла и параметры его запуска</link
></member>
</simplelist>

<sect3 id="gettingstarted-compile-setup-build">
<title
>Параметры сборки</title>

<para
>Когда мы первый раз запускали скрипт <filename
>configure</filename
> в разделе «<link linkend="gettingstarted-compile-basic-config"
>Начальная настройка проекта «Hello»</link
>», мы обратили внимание на то, что среда создала специальный подкаталог <filename class="directory"
>debug</filename
>. В данном разделе мы обсудим некоторые следствия этого.</para>

<para
>Во-первых, среда не всегда использует специальные каталоги для сборки, отдельные от каталогов с исходным кодом. Подготовка автоматического использования определённой конфигурации сборки осуществляется с помощью шаблонов при создании проекта.</para>

<para
>Чтобы выяснить текущую конфигурацию сборки, обратитесь к меню <menuchoice
><guimenu
>Проект</guimenu
> <guisubmenu
>Конфигурация сборки</guisubmenu
></menuchoice
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="build-configurations.png" format="PNG"/>
</imageobject>
<caption
><para
>Различные конфигурации сборки проекта.</para
></caption>
</mediaobject>
</screenshot>

<para
>В случае нашего проекта есть три конфигурации. В других случаях может быть изначально только одна — <guimenuitem
>default</guimenuitem
>.</para>

<para
>Текущая конфигурация слева имеет флажок. Переключение между конфигурациями осуществляется выбором соответствующего пункта меню.</para>

<para
>Теперь давайте рассмотрим, что эти конфигурации сборки из себя представляют.</para>

<variablelist id="gettingstarted-compile-setup-build-configs">
<varlistentry>
<term
><guimenuitem
>debug</guimenuitem
></term>
<listitem>
<para
>Используйте эту конфигурацию во время разработки проекта. Сборка осуществляется отдельно от каталогов исходного текста в специальном подкаталоге <filename class="directory"
>debug</filename
>, то есть все объектные, вспомогательные и исполняемые файлы будут помещаться в этот подкаталог, а не в каталоги проекта с исходным кодом. Сценарий <filename
>configure</filename
> получит параметр <computeroutput
>--enable-debug=full</computeroutput
>, будет установлена переменная окружения <computeroutput
>CXXFLAGS="-O0 -g3"</computeroutput
>, указывающая компилятору &gcc; не оптимизировать код и добавить полную отладочную информацию в выходные двоичные файлы.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenuitem
>optimized</guimenuitem
></term>
<listitem>
<para
>Эта конфигурация используется для сборки окончательного приложения C++. Сборка происходит отдельно от каталогов исходного кода в специальном подкаталоге <filename class="directory"
>optimized</filename
>. Никаких специальных аргументов в <filename
>configure</filename
> не передаётся, устанавливается переменная окружения <computeroutput
>CXXFLAGS="-O2 -g0"</computeroutput
>, указывающая компилятору &gcc; оптимизировать код и не добавлять отладочную информацию в генерируемые двоичные файлы.</para>
</listitem>
</varlistentry>

<varlistentry>
<term
><guimenuitem
>default</guimenuitem
></term>
<listitem>
<para
>Термин «default» обозначает стандартные параметры, используемые во время сборки приложения из консоли утилитами командной строки: &GNU; <application
>configure</application
> и <application
>make</application
> или <application
>gmake</application
>. В отличие от конфигураций <guimenuitem
>debug</guimenuitem
> или <guimenuitem
>optimized</guimenuitem
> специальный каталог для сборки не используется. Приложение будет собираться в каталогах с исходным кодом. Для инструментов сборки (например, &gcc;) будут использоваться параметры по умолчанию.</para>

<warning>
<para
>Подумайте дважды прежде, чем выбирать конфигурацию <guimenuitem
>default</guimenuitem
>!</para>

<para
>Она не может использоваться параллельно с конфигурацией <guimenuitem
>debug</guimenuitem
> или <guimenuitem
>optimized</guimenuitem
>. <emphasis
>Выполнение любой сборочной операции, использующей конфигурацию <guimenuitem
>default</guimenuitem
>, приведёт к невозможности использовать другие конфигурации.</emphasis
> Это вызвано определёнными особенностями процесса создания файлов <filename
>Makefile</filename
> посредством <application
>automake</application
> и <application
>autoconf</application
>.</para>
</warning>
</listitem>
</varlistentry>
</variablelist>

<para
>Возникает вопрос: «А зачем вообще использовать разные конфигурации сборки, когда они даже выглядят несовместимыми друг с другом?» Ответ: они упрощают цикл «редактирование-компиляция-отладка». Дополнительные отладочные инструкции, добавляемые в двоичные файлы, а также хитроумные изменения в структуре программного кода при его оптимизации влияют на поведение программы во время выполнения. Поэтому во многих случаях, когда логическая структура некоторой подпрограммы кажется правильной, вы можете проверить, корректно ли её поведение в более реальных условиях.</para>

<para
>Здесь как раз и могут пригодиться конфигурации сборки. Поскольку создаваемые объектные и исполняемые файлы, а также команды сборки, хранятся отдельно друг от друга, нужно обрабатывать только изменения исходного кода при переключении между конфигурациями.</para>

<para
>Таким образом, вместо очистки и перекомпиляции заново с другими параметрами, вам нужно лишь переключиться с конфигурации <guimenuitem
>debug</guimenuitem
> на <guimenuitem
>optimize</guimenuitem
>, скомпилировать изменения исходного кода и протестировать приложение в других условиях, а в случае проблем просто переключиться обратно на <guimenuitem
>debug</guimenuitem
> и продолжить работу.</para>

<para
>Последнее замечание: многие параметры конфигурации сборки можно настраивать. Также можно определить свои конфигурации, если это требуется вашему процессу разработки. Мы рассмотрим эти возможности в следующем разделе.</para>
</sect3>

<sect3 id="gettingstarted-compile-setup-config">
<title
>Параметры конфигурации проекта</title>

<para
>Конфигурация приложения особенно важна при сборке с помощью &GNU; autotools. Она обычно осуществляется запуском <filename
>configure</filename
> с определёнными параметрами и/или специальными флагами в переменных окружения перед запуском <filename
>configure</filename
> (например, переменная <computeroutput
>CXXFLAGS</computeroutput
>, упоминавшаяся выше).</para>

<para
>Вы можете устанавливать бо́льшую часть параметров конфигурации проекта с помощью графического интерфейса, предлагаемого средой. Выберите команду меню <menuchoice
><guimenu
>Проект</guimenu
> <guimenuitem
>Параметры проекта</guimenuitem
></menuchoice
> и в открывшемся диалоге перейдите в раздел <guiicon
>Параметры configure</guiicon
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-project-configure.png" format="PNG"/>
</imageobject>
<caption
><para
>Здесь могут быть определены почти все параметры configure.</para
></caption>
</mediaobject>
</screenshot>

<para
>Как видите, в этом разделе можно устанавливать довольно много параметров. Сейчас мы рассмотрим лишь малую их часть, касающуюся нашего проекта. Подробности читайте в главе «<link linkend="projects-configure"
>Настройка проектов</link
>». Если хотите узнать смысл различных устанавливаемых флагов, введите в консоли команду <command
>info make</command
> (или <command
>info:make</command
> в &konqueror;) и перейдите в раздел <menuchoice
><guimenu
>Implicit Rules</guimenu
> <guimenuitem
>Implicit Variables</guimenuitem
></menuchoice
>.</para>

<para
>Диалог имеет несколько вкладок. Вкладка <guilabel
>Главное</guilabel
> содержит часто используемые параметры, остальные вкладки — специфичные параметры компилятора. В любом случае, фактическое содержимое диалога определяется текущей конфигурацией сборки.</para>

<para
>Конфигурация сборки, чьи параметры должны быть определены, выбирается в выпадающем списке <guilabel
>Конфигурация</guilabel
> в верхней части диалога <guilabel
>Параметры configure</guilabel
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-project-buildconfig.png" format="PNG"/>
</imageobject>
<caption
><para
>Выбор конфигурации сборки.</para
></caption>
</mediaobject>
</screenshot>

<para
>Теперь выберите другую конфигурацию из выпадающего списка и обратите внимание, как меняется содержание, например, текстовых полей <guilabel
>Параметры командной строки</guilabel
> и <guilabel
>Каталог сборки</guilabel
> в соответствии с параметрами, о которых мы упоминали в <link linkend="gettingstarted-compile-setup-build-configs"
>списке конфигураций сборки</link
> выше.</para>

<sect4 id="gettingstarted-compile-setup-config-general">
<title
>Главное</title>

<para
>На вкладке <guilabel
>Главное</guilabel
> находятся следующие параметры:</para>

<itemizedlist>
<listitem>
<formalpara>
<title
>Параметры командной строки</title>
<para
>Это параметры, которые передаются в скрипт <filename
>configure</filename
> во время сборки. См. <link linkend="gettingstarted-compile-basic-config-cmd"
>пример</link
> в разделе «Начальная настройка проекта «Hello».</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Каталог сборки</title>
<para
>Подкаталог в корне текущего проекта, куда среда будет помещать все создаваемые во время сборки файлы. В идеале он должен соответствовать названию используемой конфигурации сборки, но это необязательно. Главное, чтобы названия каталогов сборки разных конфигураций отличались друг от друга.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Основной каталог с исходным кодом</title>
<para
>Этот параметр используется нечасто. Он содержит название корневого каталога проекта и нуждается в переопределении только в том случае, если исходный код проекта находится в другом месте.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Параметры препроцессора C/C++ (CPPFLAGS)</title>
<para
>Это параметры препроцессора. Среда будет их использовать при установке значений временных переменных окружения перед вызовом инструментов сборки. См. <link linkend="gettingstarted-compile-basic-config-cmd"
>пример</link
> в разделе «Начальная конфигурация проекта «Hello»».</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Параметры компоновщика (LDFLAGS)</title>
<para
>Это дополнительная информация для инструмента компоновки <application
>ld</application
> о том, где искать дополнительные библиотеки. Тоже входит в состав набора временных переменных окружения.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Переменные окружения</title>
<para
>Здесь вы можете определить дополнительные переменные, которые среда добавит в набор временных переменных окружения перед вызовом соответствующих инструментов сборки. Эти переменные определяются для каждой конфигурации индивидуально.</para>
</formalpara>
</listitem>
</itemizedlist>
</sect4>

<sect4 id="gettingstarted-compile-setup-config-spec">
<title
>Специфичные параметры компилятора</title>

<para
>Остальные вкладки диалога <guilabel
>Параметры configure</guilabel
> содержат параметры для компилятора. Они однотипно структурированы, поэтому достаточно рассмотреть вкладку <guilabel
>C++</guilabel
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-project-cpp.png" format="PNG"/>
</imageobject>
<caption
><para
>Выбор компилятора и его переменных окружения.</para
></caption>
</mediaobject>
</screenshot>

<para
>Здесь можно устанавливать следующие параметры:</para>

<itemizedlist>
<listitem>
<formalpara>
<title
>Компилятор C++</title>
<para
>Компилятор, который среда должна использовать. Список содержит только те компиляторы, которые известны среде.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Команда компилятора (CXX)</title>
<para
>Этот параметр предназначен для опытных пользователей. Он нужен только, если используется нестандартный компилятор C++, и содержит команду его вызова.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Параметры компилятора (CXXFLAGS)</title>
<para
>Здесь можно определить любые дополнительные параметры, которые среда передаст (через <filename
>Makefile</filename
>) компилятору. Некоторые значения параметров будут предустановлены в соответствии с выбранной в выпадающем списке <guilabel
>Конфигурация</guilabel
> конфигурацией сборки.</para>
</formalpara>

<para
>Обратите внимание, многие общие параметры компилятора можно выбирать из диалога, открываемого нажатием кнопки <guibutton
>...</guibutton
> справа от текстового поля.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-project-cppoptions.png" format="PNG"/>
</imageobject>
<caption
><para
>Диалог для определения поведения компилятора &GNU; C++.</para
></caption>
</mediaobject>
</screenshot>

<para
>На рисунке мы намеренно выделили вкладку <guilabel
>Оптимизация</guilabel
>. Обратите внимание, параметр <guilabel
>Нет оптимизации</guilabel
> был предустановлен (соответствуя параметру <computeroutput
>-O0</computeroutput
> в конфигурации сборки <computeroutput
>debug</computeroutput
>).</para>

<para
>К сожалению, на данный момент вы не можете выбирать все параметры из данного диалога. Например, параметр <computeroutput
>-g3</computeroutput
>, используемый в конфигурации сборки <computeroutput
>debug</computeroutput
>, потребовалось бы изменять вручную, если бы это понадобилось.</para>
</listitem>
</itemizedlist>
</sect4>
</sect3>

<sect3 id="gettingstarted-compile-setup-make">
<title
>Правила сборки проекта программой make</title>

<para
>Вы можете также настроить вызов программы <application
>make</application
> из среды во время сборки проекта. Выберите команду меню <menuchoice
><guimenu
>Проект</guimenu
> <guimenuitem
>Параметры проекта</guimenuitem
></menuchoice
> и в открывшемся диалоге выберите раздел <guiicon
>Параметры make</guiicon
>. Справа откроется диалог <guilabel
>Параметры make</guilabel
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-project-make.png" format="PNG"/>
</imageobject>
<caption
><para
>Определите, как среда должна вызывать программу <application
>make</application
>.</para
></caption>
</mediaobject>
</screenshot>

<para
>На данный момент здесь особо нечего изменять. Единственный параметр, представляющий интерес в большинстве случаев — флажок <guilabel
>Прервать после первой ошибки</guilabel
>. В большинстве проектов он выключен. Это соответствует параметру <computeroutput
>-k</computeroutput
> программы <application
>gmake</application
>, который мы встречали во время <link linkend="gettingstarted-compile-basic-build-cmd"
>начальной сборки</link
> нашего проекта.</para>

<para
>Это имеет смысл в среде такой, как &kdevelop;, которая будет протоколировать любые сообщения об ошибках во время сборки. После завершения процесса сборки, вы можете легко перемещаться между сообщениями с помощью боковой панели <guilabel
>Сообщения</guilabel
>. Используйте для этого команды меню <menuchoice
><guimenu
>Вид</guimenu
> <guimenuitem
>Следующая ошибка</guimenuitem
></menuchoice
> и <menuchoice
><guimenu
>Вид</guimenu
> <guimenuitem
>Предыдущая ошибка</guimenuitem
></menuchoice
> или соответственно клавишу <keycap
>F4</keycap
> и комбинацию клавиш <keycombo
><keycap
>Shift</keycap
> <keycap
>F4</keycap
></keycombo
>. Среда будет автоматически активировать окно редактора файла исходного кода и устанавливать курсор на строку с ошибкой.</para>

<para
>С другой стороны, если вы хотите, чтобы сборка останавливалась при первой же ошибке, установите параметр <guilabel
>Прервать после первой ошибки</guilabel
> в этом диалоге. Тогда среда будет вызывать <application
>gmake</application
> без параметра <computeroutput
>-k</computeroutput
>.</para>
</sect3>

<sect3 id="gettingstarted-compile-setup-run">
<title
>Запуск исполняемого файла</title>

<para
>Когда сборка завершена, вы можете легко запускать приложение прямо из среды. Используйте для этого команду меню <menuchoice
><guimenu
>Сборка</guimenu
> <guimenuitem
>Выполнить программу</guimenuitem
></menuchoice
>, комбинацию клавиш <keycombo
><keycap
>Shift</keycap
> <keycap
>F9</keycap
></keycombo
> или кнопку <guibutton
>Выполнить программу</guibutton
> на панели <guilabel
>Панель инструментов «Сборка»</guilabel
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="run-button.png" format="PNG"/>
</imageobject>
<caption
><para
>Нажмите кнопку <guibutton
>Выполнить программу</guibutton
> на панели инструментов.</para
></caption>
</mediaobject>
</screenshot>

<para
>Но где же находится запускаемый исполняемый файл? Как заставить среду добавить параметры при его вызове? Или как запустить приложение в терминале само по себе, чтобы проверить её интерактивное поведение в консоли?</para>

<para
>Всё это определяется параметрами проекта. Выберите команду меню <menuchoice
><guimenu
>Проект</guimenu
> <guimenuitem
>Параметры проекта</guimenuitem
></menuchoice
>, а затем перейдите в раздел <guiicon
>Параметры запуска</guiicon
>.</para>

<screenshot>
<mediaobject>
<imageobject>
<imagedata fileref="configure-project-run.png" format="PNG"/>
</imageobject>
<caption
><para
>Параметры местонахождения и запуска исполняемого файла программы.</para
></caption>
</mediaobject>
</screenshot>

<para
>В данном диалоге много параметров. Они собраны в четыре группы:</para>

<itemizedlist>
<listitem>
<formalpara>
<title
>Главная программа</title>
<para
>Этот параметр определяет, где среда будет искать исполняемый файл программы для запуска. Возможны три варианта.</para>
</formalpara>

<para
>Обратите внимание, что здесь определены только корневые каталоги. Среда обычно ищет исполняемый файл в одном из подкаталогов, указанных в следующей группе параметров.</para>

<itemizedlist>
<listitem>
<para
>Запуск из каталога, в котором исполняемый файл был создан в последний раз. Это значение по умолчанию. Оставьте его пока без изменений.</para>
</listitem>

<listitem>
<para
>Запуск из каталога сборки в соответствии с текущей <link linkend="gettingstarted-compile-setup-build"
>конфигурацией сборки</link
>. Название этого каталога было установлено на вкладке <link linkend="gettingstarted-compile-setup-config-general"
>Главное</link
>.</para>

<para
>Это корневой каталог, где среда будет искать исполняемый файл. Он меняется автоматически, в зависимости от выбора в меню <menuchoice
><guimenu
>Проект</guimenu
> <guisubmenu
>Конфигурации сборки</guisubmenu
></menuchoice
>.</para>

<para
>Вместо того, чтобы запускать самую свежую сборку исполняемого файла в соответствии с параметром выше, это позволяет переключаться между запускаемыми программами, просто выбирая другую конфигурацию сборки в меню <guimenu
>Проект</guimenu
>.</para>
</listitem>

<listitem>
<para
>Запуск исполняемого файла из указанного каталога. Снова, это только корневой каталог, в котором будет производиться поиск исполняемого файла.</para>

<para
>Используйте этот вариант, если, например, хотите запускать уже установленную программу вместо её версии из каталогов проекта.</para>
</listitem>
</itemizedlist>
</listitem>

<listitem>
<formalpara>
<title
>Исполняемый файл</title>
<para
>Этот параметр сообщает среде положение (относительно корневого каталога, определённого группой параметров, описанной выше) и название программы, которую нужно запускать. Дополнительно, вы можете определить аргументы, которые среда будет передавать программе при запуске.</para>
</formalpara>

<note>
<para
>Если текстовое поле <guilabel
>Исполняемый файл</guilabel
> оставить пустым, будут использоваться параметры <emphasis
>активной цели</emphasis
> диспетчера проектов. Хотя это параметр для опытных пользователей, нечаянно оставленный пустым, он может привести к проблемам. Проверьте его, если среда не запускает исполняемый файл.</para>
</note>
</listitem>

<listitem>
<formalpara>
<title
>Переменные окружения</title>
<para
>Среда будет устанавливать определённые переменные окружения перед запуском программы. В этой группе параметров можно определить дополнительные переменные.</para>
</formalpara>
</listitem>

<listitem>
<formalpara>
<title
>Параметры</title>
<para
>Два флажка внизу вкладки.</para>
</formalpara>

<itemizedlist>
<listitem>
<para
>Флажок <guilabel
>Автоматически компилировать перед выполнением</guilabel
> удобен в большинстве случаев. Среда будет проверять наличие изменений в проекте и выполнять необходимые действия по его конфигурации и сборке каждый раз, когда вы отдаёте команду выполнения программы.</para>

<para
>Снимите этот флажок, если хотите запустить версию программы до последних изменений.</para>
</listitem>

<listitem>
<para
>Флажок <guilabel
>Запускать во внешнем терминале</guilabel
> полезен, если вы хотите тестировать ввод/вывод программ без графического интерфейса пользователя в эмуляторе терминала. По умолчанию он снят, и среда запускает программу в своём собственном окне без возможностей консольного ввода/вывода.</para>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</sect3>
</sect2
> 
</sect1>

<sect1 id="gettingstarted-extend">
<title
>Расширение проекта. Диспетчер проектов.</title>

<para
>(в процессе написания)</para>

<sect2 id="gettingstarted-extend-automake">
<title
>Краткий обзор механизма automake</title>

<para
>(в процессе написания)</para>
</sect2
> 

<sect2 id="gettingstarted-extend-pics">
<title
>Помещение значков в отдельный каталог.</title>

<para
>(в процессе написания)</para>
</sect2
> 

<sect2 id="gettingstarted-extend-class">
<title
>Добавление новых классов</title>

<para
>(в процессе написания)</para>

<caution
><para
>Будьте осторожны, когда выбираете названия файлов классов. Потом их будет очень трудно изменить.</para
></caution>
</sect2
> 

<sect2 id="gettingstarted-extend-subproject">
<title
>Подпроект</title>

<para
>(в процессе написания)</para>

<sect3 id="gettingstarted-extend-subproject-active">
<title
>Концентрация на работе: активная цель.</title>

<para
>(в процессе написания)</para>
</sect3
> 
</sect2
> 

<sect2 id="gettingstarted-extend-restructure">
<title
>Реструктуризация проекта</title>

<para
>(в процессе написания)</para>
</sect2
> 
</sect1>


<sect1 id="gettingstarted-debug">
<title
>Отладка</title>

<para
>(в процессе написания)</para>
</sect1
> 


<sect1 id="gettingstarted-doc">
<title
>О документации по проекта.</title>

<para
>&kde; использует <ulink url="http://www.docbook.org/tdg5/en/html/docbook.html"
>docbook</ulink
> для генерации руководства пользователя по проекту. Руководство пользователя доступно через команду меню <menuchoice
><guimenu
>Справка</guimenu
> <guimenuitem
>Руководство пользователя <replaceable
>Ваше приложение</replaceable
></guimenuitem
></menuchoice
> во время работы вашего приложения &kde;. После сборки проекта руководство пользователя появляется в Центре справки &kde;. Оно объясняет пользователю, как работает приложение, какими функциями обладает и как его настраивать. </para>
<para
>Все шаблоны проектов &kde; в &kdevelop; имеют подкаталог, который содержит шаблон руководства пользователя <filename
>index.docbook</filename
> в папке «en». Его нужно отредактировать. Начните с изменения персональных данных: имени, адреса электронной  почты и так далее. Посмотрите на комментарии в файле и попробуйте следовать их указаниям, они помогут вам сделать первые шаги в составлении документации. Пересоберите проект, чтобы увидеть изменения в руководстве вашего приложения.</para>
<note
><para
>Вам нужно установить проект командой меню <menuchoice
><guimenu
>Сборка</guimenu
> <guimenuitem
>Установить</guimenuitem
></menuchoice
> или <guimenuitem
>Установить (с правами root)</guimenuitem
>, чтобы увидеть руководство пользователя вашего проекта в Центре справки KDE.</para
></note>
<para
>Дополнительная информация о синтаксисе docbook находится сайте <ulink url="http://l10n.kde.org/docs/markup/index.html"
>документации &kde;</ulink
>. </para>
</sect1>

<sect1 id="gettingstarted-keys">
<title
>Последнее, но не менее важное — комбинации клавиш</title>

<para
>(в процессе написания)</para>
</sect1>

<sect1 id="gettingstarted-whereto">
<title
>Что дальше</title>

<para
>(в процессе написания)</para>

<sect2 id="gettingstarted-whereto-faq">
<title
>Часто возникающие проблемы</title>

<simplelist>
<member
>Краткий обзор</member>
<member
>Страницы вопросов и ответов</member>
<member
>Форум</member>
<member
>Списки рассылки</member>
</simplelist>
</sect2>

<sect2 id="gettingstarted-whereto-projects">
<title
>Работа с проектами</title>

<para
>(в процессе написания)</para>

<sect3 id="gettingstarted-whereto-projects-open">
<title
>Использование существующих проектов &kdevelop;</title>

<para
>(в процессе написания)</para>
</sect3>

<sect3 id="gettingstarted-whereto-projects-import">
<title
>Импорт внешних проектов</title>

<para
>(в процессе написания)</para>
</sect3>
</sect2>
</sect1>

</chapter>
