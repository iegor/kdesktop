<!--Dear translator: please NEVER translate the id or anything inside the tags as they are needed in english by the application
     Thanks a lot in advance.-->
<chapter id="Glossary">
<title
>Глоссарий</title>

<para
>В данной главе вы найдёте объяснение большинства <quote
>непонятных</quote
> слов, встречающихся в данном руководстве.</para>

<glosslist>
<glossentry id="degrees">
<glossterm
>градусы</glossterm>
<glossdef
><para
>Градусы – единицы измерения углов или поворотов. Полный разворот – это 360 градусов, половина разворота  - это 180 градусов и четверть разворота -  90 градусов. Входными параметрами команд <userinput
>налево</userinput
>, <userinput
>направо</userinput
> и <userinput
>направление</userinput
> являются углы в градусах.</para
></glossdef>
</glossentry>

<glossentry id="input-output">
<glossterm
>входные параметры и возвращаемые значения команд</glossterm>
<glossdef
><para
>Некоторым командам необходимы входные параметры, некоторые возвращают значения. Есть такие, которые имеют <emphasis
>и</emphasis
> вход, <emphasis
>и</emphasis
> выход, а есть, наоборот, не имеющие ни входных параметров, ни возвращаемых значений.</para>
<para
>Вот несколько команд, имеющих только входные параметры: <screen>
вперёд 50
нов_цвет_пера 255,0,0
напиши "Привет!"
</screen
>Команда <userinput
>вперёд</userinput
> принимает в качестве входного параметра число <userinput
>50</userinput
>. Данный параметр указывает команде <userinput
>вперёд</userinput
> на сколько <glossterm linkend="pixels"
>пикселей</glossterm
> вперёд должна продвинуться Черепашка. Входным параметром для <userinput
>нов_цвет_пера</userinput
> является цвет, а для <userinput
>напиши</userinput
> это будет строка. И не забывайте, что входным параметром также может являться контейнер. Следующий пример продемонстрирует это: <screen
>икс = 50
напиши икс
строка = "Привет!"
напиши строка
</screen
></para>

<para
>Теперь приведём примеры команд, возвращающих значения:  <screen>
x = окно_вопроса "Введите что-нибудь и нажмите OK... спасибо!"
r = случайное 1,100
</screen
> Команда <userinput
>окно_вопроса</userinput
> принимает в качестве входного параметра строку, а возвращает число или строку. Как вы можете заметить, возвращаемое <userinput
>окно_вопроса</userinput
> значение помещается в контейнер <userinput
>x</userinput
>. Команда <userinput
>случайное</userinput
> также возвращает значение. В данном случае это будет число от 1 до 100. Как и в случае с предыдущей командой, выходное значение <userinput
>случайное</userinput
> также помещается в контейнер, имеющий имя <userinput
>r</userinput
>. Надо заметить, что контейнеры <userinput
>x</userinput
> и <userinput
>r</userinput
> нигде до этого в коде примера не использовались.</para>

<para
>Упомянем и команды, которые ничего не принимают и ничего не возвращают. Вот несколько примеров: <screen
>очисти
перо_подними
обёртка_вкл
спрячь
</screen>
</para
></glossdef>
</glossentry>

<glossentry id="intuitive-highlighting">
<glossterm
>подсветка синтаксиса</glossterm>
<glossdef
><para
>Это особенность &kturtle; позволяет сделать код более наглядным. С подсветкой синтаксиса весь код в редакторе выводится разными цветами, в зависимости от того, для чего предназначен тот или иной его кусок В следующем списке вы найдёте описание разных типов кода и цветов, которые они получают в <link linkend="the-code-editor"
>редакторе кода.</link
> <table>
<title
>Разные типы кода и их раскраска</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>команды</entry>
<entry
>тёмно-зелёный</entry>
<entry
>Обычные команды описаны <link linkend="commands"
>здесь</link
>.</entry>
</row>
<row>
<entry
>контроллеры выполнения</entry>
<entry
>чёрный (жирный)</entry>
<entry
>Специальные команды контроля выполнения, узнать больше можно <link linkend="controlling-execution"
>здесь</link
>.</entry>
</row>
<row>
<entry
>комментарии</entry>
<entry
>тёмно-жёлтый</entry>
<entry
>Строки комментария начинаются со знака комментария (#). Они игнорируются при выполнении программы. Комментарии необходимы для пояснения программистом того, что он делает в том или ином куске кода, а также для того, чтобы временно не выполнять какие-либо команды.</entry>
</row>
<row>
<entry
>скобки [, ]</entry>
<entry
>светло-зелёный (жирный)</entry>
<entry
>Скобки используются для группировки фрагмента программы. Зачастую скобки используются совместно с <link linkend="controlling-execution"
>командами контроля выполнения</link
>.</entry>
</row>
<row>
<entry
>команда <link linkend="learn"
>выучи</link
></entry>
<entry
>светло-зелёный (жирный)</entry>
<entry
>Команда <link linkend="learn"
>выучи</link
> используется для создания новых команд.</entry>
</row>
<row>
<entry
>числа</entry>
<entry
>голубой</entry>
<entry
>Числа..., да вроде бы говорить о них нечего.</entry>
</row>
<row>
<entry
>строки</entry>
<entry
>тёмно-красный</entry>
<entry
>Единственное, что мы скажем о строках – они должны начинаться и заканчиваться двойными кавычками (").</entry>
</row>
<row>
<entry
>математические символы</entry>
<entry
>серый</entry>
<entry
>Вот математические символы: +, -, *, /, (, и ). Узнайте о них больше <link linkend="math"
>здесь</link
>.</entry>
</row>
<row>
<entry
>символы вопросов</entry>
<entry
>голубой (жирный)</entry>
<entry
>Узнайте больше о символах вопросов <link linkend="questions"
>здесь</link
>.</entry>
</row>
<row>
<entry
>“склеивающие слова” вопросов</entry>
<entry
>розовый</entry>
<entry
>Узнайте больше о “склеивающих словах” (и, или, не) <link linkend="question-glue"
>здесь</link
>.</entry>
</row>
<row>
<entry
>обычный текст</entry>
<entry
>чёрный</entry>
<entry
></entry>
</row>
</tbody>
</tgroup>
</table>
</para
></glossdef>
</glossentry>

<glossentry id="pixels">
<glossterm
>пиксели</glossterm>
<glossdef
><para
>Пиксель – точка на экране. Если вы посмотрите на экран с очень близкого расстояния вы увидите, что ваш монитор использует пиксели. Пиксель – наименьшая частица, которая может быть нарисована на экране.</para>
<para
>Множеству команд требуется количество пикселей в качестве входных параметров. Вот эти команды: <userinput
>вперёд</userinput
>, <userinput
>назад</userinput
>, <userinput
>иди</userinput
>, <userinput
>иди_гор</userinput
>, <userinput
>иди_верт</userinput
>, <userinput
>нов_размер_холста</userinput
> и <userinput
>нов_ширина_пера</userinput
>.</para
></glossdef>
</glossentry>

<glossentry id="rgb">
<glossterm
>RGB комбинации (коды цветов)</glossterm>
<glossdef
><para
>RGB-комбинации используются для описания цветов. “R” отвечает за красный, “G” за зел`ный и “B” за синий цвета. Например, рассмотрим комбинацию <userinput
>255,0,0</userinput
>: первое число, отвечающее за красный, равно 255, а два остальных равны 0, это говорит о том, что данная комбинация передаёт чистейший красный цвет. Каждая составляющая комбинации лежит в диапазоне от 0 до 255. Ниже приведен пример нескольких часто используемых цветов:  <table frame="none">
<title
>Часто используемые RGB-комбинации</title>
<tgroup cols="2" colsep="5" rowsep="1">
<colspec colname="c1"/>
<tbody>
<row
><entry
><userinput
>0,0,0</userinput
></entry
><entry
>чёрный</entry
></row>
<row
><entry
><userinput
>255,255,255</userinput
></entry
><entry
>белый</entry
></row>
<row
><entry
><userinput
>255,0,0</userinput
></entry
><entry
>красный</entry
></row>
<row
><entry
><userinput
>150,0,0</userinput
></entry
><entry
>тёмно-красный</entry
></row>
<row
><entry
><userinput
>0,255,0</userinput
></entry
><entry
>залёный</entry
></row>
<row
><entry
><userinput
>0,0,255</userinput
></entry
><entry
>голубой</entry
></row>
<row
><entry
><userinput
>0,255,255</userinput
></entry
><entry
>светло-голубой</entry
></row>
<row
><entry
><userinput
>255,0,255</userinput
></entry
><entry
>розовый</entry
></row>
<row
><entry
><userinput
>255,255,0</userinput
></entry
><entry
>жёлтый</entry
></row>
</tbody>
</tgroup>
</table>
</para>
<para
>Для легкого нахождения RGB комбинаций вы можете использовать диалог выбора цвета. Он вызывается из меню <link linkend="tools-color-picker"
><menuchoice
><guimenu
>Сервис</guimenu
><guimenuitem
>Выбор цвета</guimenuitem
></menuchoice
></link
>.</para>
<para
>RGB комбинации в качестве входных параметров используются в двух командах: <userinput
>нов_цвет_холста</userinput
> и <userinput
>нов_цвет_пера</userinput
>.</para
></glossdef>
</glossentry>

<glossentry id="sprite">
<glossterm
>спрайт</glossterm>
<glossdef
><para
>Спрайт - это небольшая картинка, перемещаемая по экрану. Наша Черепашка, к слову, является спрайтом.</para>
<para
>Примечание: в данной версии &kturtle; спрайт не может быть заменён с Черепашки на что-либо другое. В следующих версиях вы обязательно сможете это делать.</para
></glossdef>
</glossentry>

<glossentry id="wrapping">
<glossterm
>обёртка</glossterm>
<glossdef
><para
>Обёртка применяется тогда, когда Черепашка рисует что-то, не умещающееся на холсте (если при этом режим обёртки включен). <screenshot
> <screeninfo
>Вот что случается если обёртки<quote
>включены</quote
></screeninfo
> <mediaobject
> <imageobject
> <imagedata fileref="wrapping.png" format="PNG"/> </imageobject
> <textobject
> <phrase
>Пример обёртки</phrase
> </textobject
> </mediaobject
> </screenshot
>Когда Черепашка выйдет за границу холста, она немедленно перенесется на его противоположную сторону и сможет продолжать движение. Таким образом, Черепашка всегда будет оставаться на экране. Так будет, пока режим обертки останется включенным.</para>
<para
>Включаться/выключаться он может командами <userinput
>обёртка_вкл</userinput
> и <userinput
>обёртка_выкл</userinput
>. При запуске &kturtle; режим обёртки включен по умолчанию.</para
></glossdef>
</glossentry>

</glosslist>

</chapter>