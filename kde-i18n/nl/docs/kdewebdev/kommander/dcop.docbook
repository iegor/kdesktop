<?xml version="1.0"  encoding="UTF-8" ?>

<sect1 id="dcop-interface">
<sect1info>
<title
>&DCOP;-functies</title>
<authorgroup>
<author
><firstname
></firstname
> <surname
></surname
> <affiliation
><address
> <email
></email>
</address
></affiliation>
</author>

&Sander.Koning; 

</authorgroup>
</sect1info>

<title
>&DCOP;-functies</title>

<para
>&DCOP; kan op diverse manieren worden aangeroepen in &kommander;. De eerste is de console-methode. </para>
<para
>dcop kmdr-executor-@pid KommanderIf changeWidgetText myWidget <quote
>nieuwe tekst</quote
> </para>
<para
>Dit neemt aan dat u zich in een &kommander;-bestand bevindt en toegang hebt tot de special @pid die het proces-ID bevat. In feite is het eenvoudiger om <quote
>kmdr-executor-@pid</quote
> door @dcopid te vervangen. Maar u kunt deze syntax (uiteraard zonder de specials) vanaf de opdrachtregel of een willekeurig extern script gebruiken om het &kommander;-venster te wijzigen. </para>
<para
>Omdat &kommander; geen volledige parser bevat in de alfa-stage, is het gecompliceerder als u de veel snellere interne &DCOP; wilt gebruiken vanuit een ander toepassingsventer (console-&DCOP; is zeer langzaam) omdat u veel informatie moet meegeven, waaronder een prototype van de aanroep. De bovenstaande aanroep zou worden: </para>
<para
>@dcop(@dcopid, KommanderIf, <quote
>enableWidget(QString, bool)</quote
>, Widget, true) </para>
<para
>Op het moment dat dit geschreven wordt, moet u erop letten dat het nesten van &DCOP;-aanroepen binnen scripttalen (zoals <application
>bash</application
>) betekent dat u de console-aanroepmethode moet gebruiken. <emphasis
>Als u interne &DCOP; gebruikt worden eerst alle &kommander;-specials uitgevoerd en daarna wordt het script uitgevoerd.</emphasis
> </para>
<para
>Er is een nieuwe vereenvoudigde manier om &DCOP; te gebruiken binnen &kommander; door gebruik te maken van een object-syntaxis. Stel dat u de tekst in een widget genaamd @LineEdit1 wilt wijzigen. Dat ziet er als volgt uit: </para>
<para
>@LineEdit1.changeWidgetText(New text) </para>
<para
>Zoals u kunt zien is de nieuwe syntaxis erg eenvoudig en visueel consistent met functiegroepen. Alle &DCOP;-beschrijvingen hier gebruiken de nieuwe objectsyntaxis zoals hierboven aangegeven. <emphasis
>Let erop dat, als u naar een widget verwijst door gebruikmaking van &DCOP; vanuit een ander venster of een andere toepassing, de eerste parameter altijd de widgetnaam is. Alle functies worden hier beschreven beginnend met de tweede parameter.</emphasis
> </para>

<sect2 id="dcop-globals">
<title
>&DCOP; voor globale variabelen</title>
<variablelist>
<varlistentry>
<term
>global(QString variableName)</term>
<listitem>
<para
>Retourneert de waarde van de opgegeven globale variabele. Als een script vanuit een &kommander;-venster wordt uitgevoerd, zullen alle (niet-globale) variabelen die in dat script zijn ingesteld, ophouden te bestaan en zullen daarom niet beschikbaar zijn in andere scriptprocessen of in een nieuwe instantie van het aanroepende proces. De globale <quote
>scope</quote
> (zichtbaarheid) betekent dat de variabele bestaat in elk proces van dat venster totdat het venster gesloten wordt. U kunt deze variabelen op elk moment wijzigen met een nieuwe aanroep naar <function
>@setGlobal</function
>. </para>
</listitem>
</varlistentry>
<varlistentry>
<term
>setGlobal(QString variableName, QString value)</term>
<listitem>
<para
>Maakt een variabele aan die globaal is voor het vensterproces en wijst de waarde eraan toe. Deze waarde kan worden opgevraagd met global(QString variableName) of opnieuw ingesteld worden. </para>
</listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="dcop-all">
<title
>&DCOP; voor alle widgets</title>

<variablelist>
<varlistentry>
<term
>changeWidgetText(QString text)</term>
<listitem>
<para
>Dit zou hernoemd moeten worden naar setWidgetText en deze naam zal mogelijk afgeraden worden. Dit verwijdert de tekst die in de widget wordt weergegeven en vervangt deze door de opgegeven tekst. </para>
</listitem>
</varlistentry>
<varlistentry>
<term
>enableWidget(bool enable)</term>
<listitem>
<para
>Schakelt een widget in of uit. </para>
</listitem>
</varlistentry>
<varlistentry>
<term
>associatedText</term>
<listitem>
<para
>Retourneert tekst die met de opgegeven widget geassocieerd is. Dit is niet hetzelfde als de weergegeven tekst. Dit zal <quote
>@widgetText</quote
> zijn of de tekst en/of scripting die gebruikt is om op de weergegeven waarde te komen. </para>
</listitem>
</varlistentry>
<varlistentry>
<term
>setAssociatedText(QString text)</term>
<listitem>
<para
>Dit stelt de standaard tekenreeks voor de &kommander; Text in. Dit is typisch <quote
>@widgetText</quote
> om weer te geven wat er in het widget is ingevoerd. Het is onwaarschijnlijk dat u dit vaak nodig hebt, maar het is er voor het geval dat u het nodig hebt. Toepasbaar op alle widgets die data kunnen bevatten. </para>
</listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="dcop-box">
<title
>&DCOP; voor ListBox- en ComboBox-widgets</title>
<variablelist>
<varlistentry>
<term
>addListItem(QString item, int index)</term>
<listitem>
<para
>Voegt een item aan een ListBox-widget toe op de opgegeven index. De lijstindex begint op nul. Om aan het einde van de lijst toe te voegen gebruikt u -1. </para>
</listitem>
</varlistentry>
<varlistentry>
<term
>addListItems(QStringList items, int index)</term>
<listitem>
<para
>Dit voegt een lijst met tekenreeksen in één keer toe. De lijst moet gescheiden zijn door <acronym
>EOL</acronym
>-tekens (\n - regeleindes). Dit is handig omdat u vrij eenvoudig bash kunt gebruiken om de lijst te verkrijgen. Bijvoorbeeld, als u @exec(ls -l ~/projecten | grep kmdr) als items gebruikt krijgt u een lijst van &kommander;-bestanden in uw projectenmap. De lijstindex begint bij nul. Gebruik -1 om aan het eind van de lijst toe te voegen. </para>
</listitem>
</varlistentry>
<varlistentry>
<term
>addUniqueItem(QString item)</term>
<listitem>
<para
>addUniqueItem voegt een item aan het einde van de lijst toe alleen als dit nog niet eerder voorkomt. </para>
</listitem>
</varlistentry>
<varlistentry>
<term
>clearList</term>
<listitem>
<para
>Verwijdert alle items. </para>
</listitem>
</varlistentry>
<varlistentry>
<term
>removeListItem(int index)</term>
<listitem>
<para
>Verwijdert het item op de opgegeven index. </para>
</listitem>
</varlistentry>
<varlistentry>
<term
>item(int index)</term>
<listitem>
<para
>Retourneert de tekst van het item op de opgegeven index. </para>
</listitem>
</varlistentry>
<varlistentry>
<term
>setCurrentListItem(int index)</term>
<listitem>
<para
>Stel het huidige (geselecteerde) item in op de opgegeven index. Toepasbaar op ListBox- en ComboBox-widgets. </para>
</listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="dcop-button">
<title
>&DCOP; voor CheckBox- en RadioButton-widgets</title>
<variablelist>
<varlistentry>
<term
>setChecked(QString widgetName, bool checked)</term>
<listitem>
<para
>Schakelt CheckBox- of RadioButton-widgets in en uit. </para>
</listitem>
</varlistentry>
</variablelist>
</sect2>

<sect2 id="dcop-tab">
<title
>&DCOP; voor TabWidget-widgets</title>
<variablelist>
<varlistentry>
<term
>setCurrentTab(QString widgetName, int index)</term>
<listitem>
<para
>Stelt het geselecteerde tabblad in voor TabWidgets. De index begint bij 0. </para>
</listitem>
</varlistentry>
</variablelist>
</sect2>


</sect1>
