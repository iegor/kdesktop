<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.2-Based Variant V1.1//EN"
"dtd/kdex.dtd" [
  <!ENTITY kappname "&ksplash;">
  <!ENTITY package "kdebase">
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % Dutch "INCLUDE">
]>

<book lang="&language;">

<bookinfo>
<title
>Het handboek van &ksplash;</title>

<authorgroup>
<author
>&Teemu.Rytilahti;&Teemu.Rytilahti.mail; </author>

<othercredit role="developer"
>&Brian.C.Ledbetter;&Brian.C.Ledbetter.mail; </othercredit>

<othercredit role="developer"
>&Ravikiran.Rajagopal;&Ravikiran.Rajagopal.mail; </othercredit>

&Rinse.Devries;&Natalie.Koning; 

</authorgroup>

<copyright>
<year
>2003</year>
<holder
>Teemu Rytilahti</holder>
</copyright>
<copyright>
<year
>2003-04</year>
<holder
>Ravikiran Rajagopal</holder>
</copyright>
<legalnotice
>&FDLNotice;</legalnotice>

<date
>2003-01-10</date>
<releaseinfo
>1.01.00</releaseinfo>

<abstract>
<para
>&ksplash; is een opstartscherm dat de voortgang toont van een programma dat aan het opstarten is.</para>
</abstract>

<keywordset>
<keyword
>KDE</keyword>
<keyword
>kdebase</keyword>
<keyword
>ksplash</keyword>
<keyword
>ksplashml</keyword>
<keyword
>opstartscherm</keyword>
<keyword
>eye candy</keyword>
</keywordset>

</bookinfo>

<chapter id="introduction">
<title
>Inleiding</title>

<para
>&ksplash; is een opstartscherm dat de voortgang toont van een programma dat aan het opstarten is. Meld elk probleem of functieverzoek aan de mailinglijsten van &kde;. De voornaamste functies van &ksplash; zijn: </para>
<simplelist>
<member
>Met thema's aan te kleden</member>
<member
>Gebruikt plugins voor complete flexibiliteit</member>
<member
>Kan worden gebruikt door elk programma dat DCOP gebruikt</member>
</simplelist>

<para
>Dit handboek vertelt u hoe u thema's kunt aanmaken om te gebruiken met de plugins die al beschikbaar zijn. Als er geen plugins aanwezig zijn die aan uw wensen voldoen, kunt u uw eigen plugins creëren. In een volgend hoofdstuk kunt u leren hoe u het uiterlijk van &ksplash; compleet kunt veranderen door een plugin in C++ te schrijven. </para>
</chapter>

<chapter id="using-themes">
<title
>Thema's gebruiken</title>

<para
>Om de thema's van <ulink url="http://www.kde-look.org"
>KDE-Look</ulink
> te gebruiken pakt u ze uit naar uw persoonlijke map <filename
>~/.kde/share/apps/ksplash/Themes/</filename
>, of naar de globale &kde;-map <filename
>$<envar
>KDEDIR</envar
>share/apps/ksplash/Themes/</filename
>.</para>

<para
>U kunt dit ook automatiseren door middel van de configuratiemodule <guilabel
>Opstartscherm</guilabel
> in de sectie <guilabel
>Uiterlijk &amp; gedrag</guilabel
> in het Configuratiecentrum van &kde;.</para>

<sect1 id="using-kcontrol-module">
<title
>De module van &kcontrol; gebruiken</title>

<para
>Met deze module kunt u &ksplash;-thema's installeren, testen en verwijderen.</para>

<para
>Aan de linkerzijde van de module ziet u een lijst met de beschikbare &ksplash;-thema's. Als u er één selecteert wordt een voorbeeld in het middengedeelte getoond. Selecteer het thema dat u wilt gebruiken en klik op <guibutton
>OK</guibutton
> of <guibutton
>Toepassen</guibutton
>. Klik op <guibutton
>Annuleren</guibutton
> of <guibutton
>Herstellen</guibutton
> om de module te verlaten zonder dat de wijzigingen worden toegepast. Klik op <guibutton
>Standaard</guibutton
> om het standaard opstartscherm terug te halen.</para>

<para
>Om nieuwe modules te installeren, klikt u op <guibutton
>Toevoegen...</guibutton
> en zoekt u het thema op uw computer op. U hoeft het thema niet uit te pakken, selecteer gewoon het gecomprimeerde themabestand. De thema's die u installeert worden niet automatisch gebruikt. Selecteer ze na de installatie in de lijst en klik op de knop <guibutton
>OK</guibutton
> of <guibutton
>Toepassen</guibutton
>.</para>

<para
>Hoewel u een voorbeeld van het opstartscherm kunt zien krijgt u pas een goede indruk als u hem live in actie ziet. Zo kunt u ook de animatie van het thema beoordelen. U kunt de thema's daarom testen door ze te selecteren in de lijst en vervolgens op de knop <guibutton
>Testen</guibutton
> te klikken.</para>

<para
>U kunt de thema's die u niet langer wilt gebruiken verwijderen. Selecteer de te verwijderen thema en klik op de knop <guibutton
>Verwijderen</guibutton
>. Opmerking: u kunt als gebruiker mogelijk geen systeemthema's verwijderen. Verder is het niet aan te raden dat u het <guilabel
>Standaard</guilabel
> opstartscherm verwijdert.</para>

</sect1>

</chapter>

<chapter id="themes">
<title
>Thema's voor &ksplash; maken</title>
<sect1 id="themes-general">
<title
>Algemeen</title>
<para
>Het maken van uw eigen thema's voor &ksplash; is eenvoudig. Nadat u klaar bent met uw thema's kunt u ze naar <ulink url="http://www.kde-look.org"
>KDE-Look</ulink
> sturen, zodat anderen ze kunnen gebruiken.</para>

<sect2 id="theme-syntax">
<title
>Uw eigen thema identificeren</title>

<para
>Laten we een thema maken met de naam <literal
>MyCoolTheme</literal
>. Om het thema te laten integreren in &ksplash; moet u het opslaan in een de submap <filename class="directory"
>MyCoolTheme</filename
> in de map <filename class="directory"
>kde/apps/ksplash/Themes/</filename
>. In deze submap moet het bestand <filename
>Theme.rc</filename
> aanwezig zijn. Dit bestand bevat de instellingen van uw thema. U kunt een hele reeks instellingen van het thema opgeven, de plugin-engine wijzigen, enzovoort. U hoeft niet alle beschikbare instellingen te gebruiken. Normaliter hebben de instellingen een acceptabele standaardwaarde. De basissyntaxis voor items in het bestand <filename
>Theme.rc</filename
> is <literal
>[optie] = [waarde]</literal
>. U kunt de definities van de verschillende opties vinden in de volgende secties.</para>

<example>
<title
>Eenvoudig <filename
>Theme.rc</filename
>-bestand</title>
<programlisting
>[KSplash Theme: MyCoolTheme]
Name = MyCoolTheme
Description = A nice theme using XpLike engine
Version = 1.0
Author = uw naam &lt;naam@email.nl&gt;
## Use the XpLike engine for this theme.
Engine = XpLike
Show Icon = false
Welcome Text = Loading KDE
</programlisting>
</example>

<para
>Nadat u de naam, beschrijving en auteur van het thema hebt opgegeven is de volgende stap het kiezen van een theme-engine (ook wel bekend als een plugin). Daarna kunt u de verschillende mogelijkheden van de theme-engine instellen door de sleutel-waarde paren toe te wijzen zoals in bovenstaand voorbeeldbestand.</para>

<important>
<para
>Het is belangrijk dat de naam van de map waarin de thema-bestanden worden opgeslagen (<filename class="directory"
>~/.kde/apps/ksplash/Themes/MyCoolTheme</filename
> in dit geval) en de identificatie van het thema (<literal
>[KSplash Theme: MyCoolTheme]</literal
> in dit geval) in het bestand <filename
>Theme.rc</filename
> identiek zijn. Anders zal &ksplash; het thema niet herkennen.</para>
</important>

</sect2>

<sect2 id="theme-files">
<title
>Achtergrondbestanden</title>

<para
>Als &ksplash; start, zoekt het als eerste naar de achtergrondafbeelding voor uw huidige schermresolutie, als de theme-engine er een gebruikt. De naam van de achtergrondafbeelding dient de volgende opmaak te hebben: <filename
>Background-<replaceable
>BBBxHHH</replaceable
>png</filename
>.</para>

<para
>U kunt bijvoorbeeld een bestand met de naam <filename
>Background-1024x768</filename
> gebruiken. Als de achtergrondafbeelding voor uw schermresolutie niet gevonden wordt, probeert de engine de grootte van het originele bestand <filename
>Background.png</filename
> of het bestand dat is opgegeven in <filename
>Theme.rc</filename
> aan te passen aan de huidige resolutie. Het veranderen van de grootte zal enige tijd in beslag nemen. U kunt daarom het beste achtergrondafbeeldingen meeleveren voor tenminste de volgende resoluties: 1280x1024, 1024x768 en 800x600.</para>
</sect2>
</sect1>

<sect1 id="theme-engines">
<title
>Opties voor theme-engines</title>

<sect2 id="default-themes">
<title
>Standaardthema</title>
<table>
<title
>Opties voor het standaardthema</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Explanation</entry>
</row>
<!-- Statusbar -->
<row>
<entry
>Always Show Progress</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of de voortgang van het opstarten wordt getoond. Standaard is true.</entry>
</row>
<row>
<entry
>Label Foreground</entry>
<entry
>[color]</entry>
<entry
>Bepaalt welke kleur voor de tekst in de statusbalk gebruikt wordt. Standaard is #FFFFFF (wit).</entry>
</row>
<!-- Misc. things -->
<row>
<entry
>Icons Flashing</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of pictogrammen knipperen. Standaard is true</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="standard-themes">
<title
>Standaardthema</title>
<table>
<title
>Opties voor het standaardthema</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Explanation</entry>
</row>
<!-- Statusbar -->
<row>
<entry
>Statusbar Position</entry>
<entry
>[top/bottom]</entry>
<entry
>Bepaalt de positie van de statusbalk. Standaard is bottom.</entry>
</row>
<row>
<entry
>Statusbar Visible</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of de statusbalk getoond wordt. Standaard is true.</entry>
</row>
<row>
<entry
>Progress Visible</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of de voortgang van het opstarten wordt getoond. Standaard is true.</entry>
</row>
<!-- Fonts -->
<row>
<entry
>Statusbar Font</entry>
<entry
>[fontname]</entry>
<entry
>Bepaalt het te gebruiken lettertype op de statusbalk. Standaard is Helvetica.</entry>
</row>
<row>
<entry
>Statusbar Font Size</entry>
<entry
>[size]</entry>
<entry
>De tekengrootte voor de statusbalk. Standaard is 16.</entry>
</row>
<row>
<entry
>Statusbar Font Bold</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of het lettertype op de statusbalk vet moet zijn. Standaard is true.</entry>
</row>
<row>
<entry
>Statusbar Font Italic</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of het lettertype op de statusbalk cursief moet zijn. Standaard is false.</entry>
</row>
<!-- Misc. things -->
<row>
<entry
>Statusbar Foreground</entry>
<entry
>[color]</entry>
<entry
>De voorgrondkleur van de statusbalk. Standaard is white (wit).</entry>
</row>
<row>
<entry
>Statusbar Background</entry>
<entry
>[color]</entry>
<entry
>De achtergrondkleur van de statusbalk. Standaard is black (zwart).</entry>
</row>
<row>
<entry
>Statusbar Icon</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of de statusbalk een pictogram krijgt.</entry>
</row>
<row>
<entry
>Icons Visible</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of de pictogrammen zichtbaar zijn. Standaard is true.</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of de pictogrammen stuiteren. Standaard is true.</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[0-3,10-13]</entry>
<entry
>De positie van de pictogrammen. Standaard is bottom-left (linksonder).</entry>
</row>
<row>
<entry
>Splash Screen</entry>
<entry
>[name]</entry>
<entry
>Verandert de naam van de opstartafbeelding die getoond wordt.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="redmond-themes">
<title
>Redmond-thema</title>
<table>
<title
>Opties voor het Redmond-thema</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Explanation</entry>
</row>
<!-- Main elements -->
<row>
<entry
>Background Image</entry>
<entry
>[filename]</entry>
<entry
>Bepaalt welke gebruikerdegefinieerde achtergrondafbeelding gebruikt wordt.</entry>
</row>
<row>
<entry
>User Icon</entry>
<entry
>[Iconname]</entry>
<entry
>Naam van het standaardpictogram dat wordt getoond. Standaard is <constant
>go</constant
>.</entry>
</row>
<row>
<entry
>Welcome Text</entry>
<entry
>[text]</entry>
<entry
>De tekst die in het opstartscherm wordt getoond. Standaard is "Welcome".</entry>
</row>
<row>
<entry
>Username Text</entry>
<entry
>[text]</entry>
<entry
>De tekst die, in plaats van de echte naam van de gebruiker, wordt getoond.</entry>
</row>
<!-- Positioning elements -->
<row>
<entry
>Welcome Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Positie op het opstartscherm waar de welkomtekst geplaatst wordt.</entry>
</row>
<row>
<entry
>Username Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Positie op het opstartscherm waar de gebruikersnaam geplaatst wordt.</entry>
</row>
<row>
<entry
>Action Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Positie op het opstartscherm waar de huidige actie geplaatst wordt.</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[x,y]</entry>
<entry
>Positie op het scherm waar het pictogram van de gebruiker geplaatst wordt.</entry>
</row>
<!-- Show to show.. -->
<row>
<entry
>Show Welcome Text</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of de welkomtekst getoond wordt. Standaard is true.</entry>
</row>
<row>
<entry
>Show Welcome Shadow</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of de welkomtekst een schaduw heeft. Standaard is true.</entry>
</row>
<row>
<entry
>Show Username</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of de gebruikersnaam getoond wordt. Standaard is true.</entry>
</row>
<row>
<entry
>Show Action</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of de actie die momenteel wordt uitgevoerd getoond wordt. Standaard is true.</entry>
</row>
<row>
<entry
>Show Icon</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of het pictogram getoond wordt. Standaard is true</entry>
</row>
<row>
<entry
>Use KDM User Icon</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of het aanmeldpictogram van de gebruiker getoond wordt. Standaard is true.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="macx-themes">
<title
>MacX-thema</title>
<table>
<title
>Opties voor het MacX-thema</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Explanation</entry>
</row>
<row>
<entry
>Icon Size Minimum</entry>
<entry
>[size]</entry>
<entry
>Minimumgrootte voor pictogrammen. Standaard is 16.</entry>
</row>
<row>
<entry
>Icon Size Maximum</entry>
<entry
>[size]</entry>
<entry
>Maximumgrootte voor pictogrammen. Standaard is 64.</entry>
</row>
<row>
<entry
>Optimized Icon Rendering</entry>
<entry
>[true/false]</entry>
<entry
>Pictogramweergave optimaliseren. Standaard is true.</entry>
</row>
<row>
<entry
>Progress Bar Visible</entry>
<entry
>[true/false]</entry>
<entry
>Voortgangsbalk zichtbaar. Standaard is true.</entry>
</row>
<row>
<entry
>Progress Bar Position</entry>
<entry
>[top/bottom]</entry>
<entry
>Bepaalt of de positie van de statusbalk bottom (onder) of top (boven) is. Standaard is bottom.</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of pictogrammen stuiteren. Standaard is false.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="mac-classic-themes">
<title
>MacClassic-thema</title>
<table>
<title
>Opties voor het MacClassic-thema</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Explanation</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[0-3,10-13]</entry>
<entry
>Positie van de pictogrammen op het opstartscherm. Standaard is bottom left.</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of pictogrammen stuiteren. Standaard is false.</entry>
</row>
<row>
<entry
>Icons Visible</entry>
<entry
>[true/false]</entry>
<entry
>Bepaalt of de pictogrammen zichtbaar zijn. Standaard is true.</entry>
</row>
<row>
<entry
>Splash Screen</entry>
<entry
>[name]</entry>
<entry
>Verandert de naam van de opstartafbeelding die getoond wordt.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="themes-2k">
<title
>2k-thema</title>
<table>
<title
>Opties voor het 2k-thema</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Explanation</entry>
</row>
<row>
<entry
>Title Background Color</entry>
<entry
>[color]</entry>
<entry
>De achtergrondkleur voor de titel. Standaard is dark blue.</entry>
</row>
<row>
<entry
>Title Foreground Color</entry>
<entry
>[color]</entry>
<entry
>De voorgrondkleur van de titel. Standaard is wit.</entry>
</row>
<row>
<entry
>Status Text Color</entry>
<entry
>[color]</entry>
<entry
>De kleur van de statusteksten. Standaard is hetzelfde als de titelachtergrondkleur.</entry>
</row>
<row>
<entry
>Rotator Color 1</entry>
<entry
>[color]</entry>
<entry
>De kleur van rotator 1. Standaard is dark blue.</entry>
</row>
<row>
<entry
>Rotator Color 2</entry>
<entry
>[color]</entry>
<entry
>De kleur van rotator 2. Standaard is cyan.</entry>
</row>
<row>
<entry
>Rotator Speed</entry>
<entry
>[waarde]</entry>
<entry
>De snelheid van de rotator. Standaard is 30.</entry>
</row>
<row>
<entry
>Window Title</entry>
<entry
>[text]</entry>
<entry
>De titeltekst van het venster.</entry>
</row>
<row>
<entry
>Logo File</entry>
<entry
>[filename]</entry>
<entry
>Het te gebruiken logo.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>
</sect1>
</chapter>

<chapter id="from-other-applications">
<title
>&ksplash; in uw eigen programma gebruiken</title>

<para
>In dit hoofdstuk beschrijven we een eenvoudige methode waarop u &ksplash; kunt gebruiken als opstartscherm voor uw &kde;-programma. Als u geen programma's voor &kde; schrijft, kunt u dit hoofdstuk overslaan.</para>

<sect1 id="basic-other-reqs">
<title
>Basisvereisten</title>

<para
>Uw &kde;-programma moet &DCOP;-aware zijn. &DCOP; is de &kde;-technologie die wordt gebruikt om te communiceren tussen programma's. Als u het standaard <ulink url="http://developer.kde.org"
>&kde; application framework</ulink
> gebruikt, dan wordt dit automatisch voor u geregeld. Meer informatie over &DCOP; en gerelateerde &kde;-technologieën kunt u vinden in de <ulink url="http://developer.kde.org"
>&kde; developers' corner</ulink
>.</para>
</sect1>

<sect1 id="other-using">
<title
>&ksplash; starten</title>

<para
>Voordat uw programma begint met het rekenintensieve werk, of voordat het begint met het laden van plugins, &etc;, roept u &ksplash; als volgt aan:</para>

<programlisting
>DCOPClient *c = kapp-&gt;dcopClient();
QString error;
QCString KSplashName;
int pid = 0;
QStringList args;
args &lt;&lt; "--theme=MyCoolTheme" &lt;&lt; "--managed";
if (kapp-&gt;startServiceByDesktopName("ksplash", args, &amp;error,
&amp;KSplashName, &amp;pid))
{
  KMessageBox::sorry(0, error, "Unable to invoke KSplash");
  // Some error processing here.
}
</programlisting>

<para
>We gaan er vanuit dat er slechts één exemplaar van &ksplash; draait. In het geval er meer draaien wordt het iets complexer. Lees voor meer informatie de documentatie van &DCOP;.</para>
</sect1>

<sect1 id="show-messages">
<title
>Berichten tonen</title>

<para
>Voordat u berichten gaat tonen moet u bepalen hoeveel stappen u wilt tonen. Bijvoorbeeld, de &kde;-opstartprocedure gebruikt 7 stappen.</para>

<programlisting
>QByteArray data;
    QDataStream arg(data,IO_WriteOnly);
    arg &lt;&lt; someNumber;
    if (!(c-&gt;send(KSplashName, "KSplashIface", "setStartupItemCount(int)",
data))
      // Some error processing here.
</programlisting>

<para
>Telkens als u een bericht, met of zonder pictogram, wilt tonen gebruikt u</para>

<programlisting
>arg &lt;&lt; QString("iconName") &lt;&lt; QString("programName") &lt;&lt;
QString("Some description");
    if (!(c-&gt;send(KSplashName, "KSplashIface",
"programStarted(QString,QString,QString)", data))
    {
      // Some error processing here.
    }
</programlisting>

<para
>Telkens als u <constant
>programStarted</constant
> aanroept, wordt het aantal voltooide stappen opgehoogd. Als uw programma klaar is met opstarten gebruikt u het volgende om het opstartscherm te laten verdwijnen:</para>

<programlisting
>if (!(c-&gt;send(KSplashName, "KSplashIface", "startupComplete()", data))
    {
      // Some error processing here.
    }
</programlisting>

<para
>Dat is alles!. U hebt verder niets nodig om gebruik te kunnen maken van alle mogelijkheden die &ksplash; u biedt.</para>

</sect1>
</chapter>

<!-- FIXME: Better to leave this out until it's written, or the translators -->
<!-- will have to still translate it ... -->

<chapter id="wrplugins">
<title
>Nieuwe &ksplash;-plugins schrijven</title>

<para
>Het schrijven van nieuwe &ksplash;-plugins is niet moeilijk. In dit hoofdstuk leert u hoe u een eenvoudige plugin kunt schrijven dat een opstartscherm van een welbekend besturingssysteem zal nabootsen. Deze uitleg gaat er vanuit dat u de basis kent van C++ en een beetje bekend bent met KDE/Qt-programmeren.</para>

<sect1 id="basic-requirements">
<title
>Basisvereisten</title>
<para
>We gaan een plugin genaamd <literal
>2k</literal
> maken. De pluginnaam zal op verschillende plaatsen worden gebruikt, en het is belangrijk dat u consequent dezelfde naam gebruikt anders zal &ksplash; de plugin niet herkennen. &ksplash;-plugins zijn in feite dynamisch laadbare bibliotheken met de volgende naamconventie: </para>
<simplelist>
<member
>De bibliotheeknaam moet de opmaak <filename
>ksplash+themanaaminkleineletters</filename
> hebben. Voor ons thema is dat dus <filename
>ksplash2k</filename
>.</member>
<member
>Vervolgens hebben we een overeenkomend desktop-bestand genaamd <filename
>ksplash+themanaaminkleineletters.desktop</filename
> nodig. Voor ons thema wordt dat dus <filename
>ksplash2k.desktop</filename
>. </member>
<member
>Tot slot moet het object dat door de bibltioheek wordt teruggegeven een klasse zijn met de naam <literal
>Theme+themanaam</literal
>. In ons voorbeeld is dat <literal
>Theme2k</literal
>.</member>
</simplelist>
<para
>Mocht u bovenstaande niet helemaal begrijpen, geen nood, we komen hier nog uitgebreid op terug. Tot slot is het erg belangrijk dat de pluginklasse kan worden afgeleid van <literal
>ThemeEngine</literal
>. </para>
</sect1>
<sect1 id="skeleton">
<title
>Het skelet-framework bouwen</title>
<para
>We gaan gebruik maken van het <foreignphrase lang="en"
>&kde; application framework</foreignphrase
>. Dit framework zal de plugin bouwen en zorgen voor platformonafhankelijkheid zonder dat wij er verder iets voor hoeven te doen. Om met het <foreignphrase lang="en"
>application framework</foreignphrase
> te kunnen werken hebt u het pakket <filename
>kdesdk</filename
> nodig. Voer het commando <literal
>kapptemplate</literal
> uit om een programma met de naam "2k" aan te maken. Het commando maakt een hoofdmap aan met generieke bestanden zoals AUTHORS, &etc;. We zijn het meest geïntereseerd in de submap <filename class="directory"
>2k</filename
>. Open deze submap en verwijder alle bestanden die er in staan. We hebben nu het skelet dat we nodig hebben. </para>
<para
>De volgende stap is het aanmaken van een <filename
>.desktop</filename
>-bestand. Dit bestand zal, wanneer het geïnstalleerd is, &ksplash; vertellen dat onze plugin beschikbaar is. Consistent met de naamconventies uit de <link linkend="basic-requirements"
>voorgaande sectie</link
> maken we in die map een bestand aan met de naam <filename
>ksplash2k.desktop</filename
>. Het bestand moet de volgende regels bevatten: </para>
<programlisting
><literal>
[Desktop Entry]
Encoding=UTF-8
Type=Service
Comment=KSplash Plugin
Name=KSplash2k
ServiceTypes=KSplash/Plugin
X-KDE-Library=ksplash2k
X-KSplash-Default=true
X-KSplash-PluginName=2k
X-KSplash-ObjectName=Theme2k
</literal
>
</programlisting>
<para
><literal
>Encoding</literal
>, <literal
>Type</literal
>, <literal
>Comment</literal
> en <literal
>Servicetypes</literal
> zijn hetzelfde bij alle plugins. De pluginnaam en bibliotheeknaam moet de eerdergenoemde naamconventies volgen. Het item <literal
>X-Splash-Default</literal
> heeft een booleaanse waarde waarmee bepaald wordt of de plugin standaard getoond zal worden in configuratiemodule of niet. Met uitzondering van enkele zeldzame gevallen moet de waarde <constant
>true</constant
> zijn. </para>
</sect1>
<sect1 id="headerfile">
<title
>Declaratie van pluginklasse</title>
<para
>Nu we het voorbereidende werk gedaan hebben, gaan we beginnen met het leuke gedeelte - het aanmaken van een klasse die het gewenste gedrag oplevert. Terwijl we vrij zijn om deze klasse bijna alles te laten doen wat we willen, zijn er enkele restricties.</para>
<orderedlist>
<listitem
><para
>De plugin moet de klasse <constant
>ThemeEngine</constant
> overerven.</para
></listitem>
<listitem
><para
>Pluginklassen moeten worden benoemd volgens de regel: <classname
>theme+pluginnaam</classname
>.</para
></listitem>
<listitem
><para
>Pluginklassen moeten een <literal
>statische</literal
> functie met de naam <function
>names</function
> aanleveren, die een lijst met namen teruggeeft die de plugin kunnen aanroepen.</para
></listitem>
<listitem
><para
>Als de plugin kan worden ingesteld in de configuratiemodule, dan moet het een op <literal
>ThemeEngineConfig</literal
>-gebaseerde klasse aanleveren voor de configuratie.</para
></listitem>
<listitem
><para
>Pluginklassen moeten tenminste één van de virtuele functies <function
>slotSetText</function
>, <function
>slotSetPixmap</function
>, <function
>slotUpdateProgress</function
> en <function
>slotUpdateSteps</function
> onderdrukken (<foreignphrase lang="en"
>override</foreignphrase
>) om het bruikbaar te maken.</para
></listitem>
<listitem
><para
>De constructor moet de vorm <literal
>ThemeEngine( QWidget *parent, const char *name, const QStringList &amp;args )</literal
> hebben, zodat het kan worden gebruikt met <classname
>KGenericFactory</classname
>.</para
></listitem>
</orderedlist>
<para
>De laatste vereiste lijkt moeilijk, maar, zoals we later zullen zien, door één regel tekst toe te voegen aan uw broncoderegels kunt u het meestal negeren.</para>
</sect1>
<sect1 id="headercode">
<title
>Code voor het header-bestand</title>
<para
>Aan de hand van voorgaande informatie ziet het header-bestand <filename
>theme2k.h</filename
> er als volgt uit:</para>
<example>
<title
>Inhoud van <filename
>theme2k.h</filename
></title>
<programlisting
>#ifndef __THEME2K_H__
#define __THEME2K_H__

#include &lt;qlabel.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kdialogbase.h&gt;
#include &lt;kpixmap.h&gt;
#include &lt;ksplash/themeengine.h&gt;

class RotWidget;

class Cfg2k: public ThemeEngineConfig
{
  Q_OBJECT
public:
  Cfg2k( KConfig * );
};

class ObjKsTheme;
class Theme2k: public ThemeEngine
{
  Q_OBJECT
public:
  Theme2k( QWidget *, const char *, const QStringList&amp; );

  inline const QString name()
  {
    return( QString("KSplash2k") );
  }
  inline const KDialogBase *config( KConfig *kc )
  {
    return new Cfg2k( kc );
  }
  static QStringList names()
  {
    QStringList Names;
    Names &lt;&lt; "KSplash2k";
    Names &lt;&lt; "ks2k";
    Names &lt;&lt; "2k";
    Names &lt;&lt; "2000";
    return( Names );
  };

public slots:
  inline void slotSetText( const QString&amp; s )
  {
    if( mText &amp;&amp; mText-&gt;text() != s ) mText-&gt;setText( s );
  };

private:
  void initUi();
  void readSettings();

  QLabel *mText;
  RotWidget *mRotator;
  QColor mTBgColor, mTFgColor, mRotColor1, mRotColor2, mStatusColor;
  int mRotSpeed;
  QString mWndTitle, mLogoFile;
};

#endif
</programlisting>
</example>
<para
>Laten we de bovenstaande inhoud analyseren. De klasse <classname
>Theme2k</classname
> voldoet aan de naamconventies en is overgeërfd van <classname
>ThemeEngine</classname
>. De klasse levert een <methodname
>Theme2k::names()</methodname
>, en heeft een constructor die de vereiste paramaters pakt: <function
>Theme2k( QWidget *, const char *, const QStringList&amp; );</function
> en ook een eenvoudige methode <methodname
>Theme2k::slotSetText()</methodname
>levert. Maak u op dit moment niet druk over de klasse <classname
>RotWidget</classname
>. Het is een kleine widget die wat eye candy voor de gebruiker aanlevert. Onze plugin is erg eenvoudig en toont geen pictogrammen of voortgangsbalk. Als u pictogrammen wilt gebruiken, onderdruk (<foreignphrase lang="en"
>override</foreignphrase
>) dan de functie <function
>slotSetPixmap</function
>. Vergelijkbare functies bestaan voor het instellen van de voorgangsbalkbereik (<function
>slotUpdateSteps</function
> en het ophogen van de huidige stap (<function
>slotUpdateProgress</function
>). </para>
</sect1>
<sect1 id="Implementation">
<title
>Implementatie van de plugin</title>
<para
>We gaan alleen de relevante onderdelen van de implementatie doornemen. Voor een overzicht van de volledige implementatie kunt u terecht in de bijlage. Het eerste dat we zullen doen is de bibliotheekvereiste uit de weg ruimen:</para>
<example>
<title
>Bibliotheekvereiste</title>
<programlisting
>K_EXPORT_COMPONENT_FACTORY( ksplash2k, KGenericFactory&lt;Theme2k&gt; );
</programlisting>
</example>
<para
>De macro <constant
>K_EXPORT_COMPONENT_FACTORY</constant
> is gedeclareerd in <filename
>kgenericfactory.h</filename
>. Nu naar de constructor! Omdat het een eenvoudige plugin is, is de constructor vrij rechtlijnig.</para>
<example>
<title
>Pluginconstructor</title>
<programlisting
>Theme2k::Theme2k( QWidget *parent, const char *name, const QStringList &amp;args
 )
    :ThemeEngine( parent, name, args )
{
  readSettings();
  initUi();
}
</programlisting>
</example>
<para
>De methode <function
>readSettings()</function
> beschrijft de juiste manier om uw thema-instellingen te verkrijgen. (U wilt immers dat gebruikers uw plugins in hun thema's gaan gebruiken, of niet?)</para>
<example>
<title
>Thema-instellingen verkrijgen</title>
<programlisting
>void Theme2k::readSettings()
{
  if( !mTheme )
    return;

  KConfig *cfg = mTheme-&gt;themeConfig();
  if( !cfg )
    return;

  cfg-&gt;setGroup( QString("KSplash Theme: %1").arg(mTheme-&gt;theme()) );

  QColor DefaultTBgColor( Qt::darkBlue );
  QColor DefaultTFgColor( Qt::white );

  mTBgColor = cfg-&gt;readColorEntry( "Title Background Color",
&amp;DefaultTBgColor );
  mTFgColor = cfg-&gt;readColorEntry( "Title Foreground Color",
&amp;DefaultTFgColor );
  mStatusColor = cfg-&gt;readColorEntry("Status Text Color", &amp;mTBgColor );

  QColor DefaultRot1( Qt::darkBlue );
  QColor DefaultRot2( Qt::cyan );
  mRotColor1 = cfg-&gt;readColorEntry( "Rotator Color 1", &amp;DefaultRot1 );
  mRotColor2 = cfg-&gt;readColorEntry( "Rotator Color 2", &amp;DefaultRot2 );

  mRotSpeed = cfg-&gt;readNumEntry( "Rotator Speed", 30 );
  mWndTitle = cfg-&gt;readEntry( "Window Title", i18n("Please wait...") );
  mLogoFile = cfg-&gt;readEntry( "Logo File", QString::null );
}
</programlisting>
</example>
<para
>Omdat we onze gebruikers aardig vinden leveren we bruikbare standaardwaarden aan voor parameters die niet in het themabestand staan. Merk op dat we altijd onze groep moeten instellen op "KSplash Theme: themanaam" om compatible te blijven met toekomstige themaspecificaties. De methode <function
>initUI()</function
> is niet echt interessant, ze bouwt enkel de widgets. Zie de bijlage voor meer details. </para>
</sect1>
<sect1 id="compilingfile">
<title
>De plugin compileren</title>
<para
>Omdat we gebruik maken van het &kde;-framework voor het compileren van de plugin hebben we het bestand <filename
>Makefile.am</filename
> nodig. Dit bestand hoort er als volgt uit te zien:</para>
<example>
<title
>Inhoud van <filename
>Makefile.AM</filename
></title>
<programlisting
>INCLUDES = $(all_includes)

kde_module_LTLIBRARIES = ksplash2k.la

ksplash2k_la_SOURCES = theme2k.cpp rotwidget.cpp
ksplash2k_la_LDFLAGS = $(all_libraries) $(KDE_RPATH)
ksplash2k_la_LIBADD = $(LIB_KDEUI) -lksplashthemes

METASOURCES = AUTO

noinst_HEADERS        = theme2k.h rotwidget.h

servicesdir = $(kde_servicesdir)
services_DATA = ksplash2k.desktop

themedir = $(kde_datadir)/ksplash/Themes/2k
theme_DATA = Theme.rc Preview.png
</programlisting>
</example>
<para
>Meer informatie over het schrijven van <filename
>Makefile.am</filename
>-bestanden voor &kde; kunt u vinden op de website van de <ulink url="http://developer.kde.org/documentation/other/makefile_am_howto.html"
>&kde;-ontwikkelaars</ulink
>. De enige kanttekening is dat we een standaardthema aanleveren dat is gebaseerd op deze plugin, en dat we een voorbeeldafbeelding van dit thema aanleveren. Om het onze gebruikers te vergemakkelijken leveren we een voorbeeld <filename
>Theme.rc</filename
>-bestand aan om een idee te geven van de verschillende opties.</para>
</sect1>
</chapter>

<chapter id="faq">
<title
>Vragen en antwoorden</title>
&reporting.bugs; &updating.documentation; <qandaset id="faqlist">
<qandaentry>
<question>
<para
>Ik kan geen enkel thema vinden dat werkt in &ksplash;. Hoe komt dat?</para>
</question>
<answer>
<para
>U hebt waarschijnlijk niet de juiste plugins voor het thema. De plugins bevinden zich in het pakket <literal
>kdeartwork</literal
>. Download en installeer dit pakket, en probeer het opnieuw.</para>
</answer>
</qandaentry>
<qandaentry>
<question>
<para
>Wat is <filename
>Theme.rc</filename
> voor bestand, en hoe maak ik er één aan?</para>
</question>
<answer>
<para
><filename
>Theme.rc</filename
> is het bestand waarin u de instellingen van een thema kunt opgeven. Meer informatie kunt u in de sectie <link linkend="themes"
>Thema's voor &ksplash; maken</link
> vinden. </para>
</answer>
</qandaentry>
</qandaset>
</chapter>

<chapter id="credits">
<title
>Dankbetuigingen en licentie</title>

<para
>&ksplash;</para>

<para
>Programma copyright &copy; 2003 &Ravikiran.Rajagopal; &Ravikiran.Rajagopal.mail;</para>

<itemizedlist>
<title
>Met bijdragen van</title>
<listitem
><para
>&Brian.C.Ledbetter; &Brian.C.Ledbetter.mail;</para>
</listitem>
</itemizedlist>

<para
>Documentatie copyright &copy; 2003 &Teemu.Rytilahti; &Teemu.Rytilahti.mail;</para>
&underFDL; &underGPL; </chapter>

<appendix id="installation">
<title
>Installatie</title>

<sect1 id="requirements">
<title
>Benodigdheden</title>

<para
>Om &ksplash; te kunnen gebruiken hebt u &kde; versie 3.2 of hoger nodig. Sommige thema's hebben specifieke plugins nodig. Als een thema niet werkt, neem dan contact op met de auteur ervan om er achter te komen waar u de benodigde plugin vandaan kunt halen.</para>

</sect1>

<sect1 id="compilation">
<title
>Compilatie en installatie</title>
&install.compile.documentation; </sect1>
</appendix>
<appendix id="srccode">
<title
>Broncode</title>
<sect1 id="theme2kcpp">
<title
>Inhoud van <filename
>theme2k.cpp</filename
></title>
<programlisting
>#include &lt;qlabel.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kapplication.h&gt;
#include &lt;kconfig.h&gt;
#include &lt;kdebug.h&gt;
#include &lt;kdialogbase.h&gt;
#include &lt;kgenericfactory.h&gt;
#include &lt;kglobalsettings.h&gt;
#include &lt;klocale.h&gt;
#include &lt;ksplash/objkstheme.h&gt;
#include &lt;kstandarddirs.h&gt;

#include "rotwidget.h"
#include "theme2k.h"
#include "theme2k.moc"

K_EXPORT_COMPONENT_FACTORY( ksplash2k, KGenericFactory&lt;Theme2k&gt; );

Cfg2k::Cfg2k( KConfig * )
{}

Theme2k::Theme2k( QWidget *parent, const char *name, const QStringList &amp;args
 )
    :ThemeEngine( parent, name, args )
{
  readSettings();
  initUi();
}

void Theme2k::initUi()
{
  QVBox *vbox = new QVBox( this );
  vbox-&gt;setFrameShape( QFrame::WinPanel );
  vbox-&gt;setFrameShadow( QFrame::Raised );

  QHBox *labelBox = new QHBox( vbox );
  labelBox-&gt;setPalette( mTBgColor );
  labelBox-&gt;setMargin( 1 );
  QLabel *lbl = new QLabel( mWndTitle, labelBox );
  lbl-&gt;setFont( QFont( "Arial", 12, QFont::Bold ) );
  lbl-&gt;setPaletteForegroundColor( mTFgColor );

  QLabel *logo = new QLabel( vbox );
  logo-&gt;setPalette( Qt::white );

  QString px( locate( "appdata", mTheme-&gt;themeDir() +
(mLogoFile.isNull()?QString("/Logo.png"):mLogoFile) ) );
  if (px.isNull())
    px = locate("appdata","Themes/Default/splash_top.png");
  if( !px.isNull() )
  {
    QPixmap pix( px );
    logo-&gt;setPixmap( pix );
  }
  else
  {
    logo-&gt;setText( "&lt;B&gt;KDE&lt;/B&gt;2000" );
    logo-&gt;setAlignment( AlignCenter|AlignVCenter );
  }

  mRotator = new RotWidget( vbox, mRotColor1, mRotColor2, mRotSpeed );

  QHBox *hbox = new QHBox( vbox );
  labelBox-&gt;setSpacing( 4 );
  labelBox-&gt;setMargin( 4 );

  mText = new QLabel( hbox );
  mText-&gt;setPaletteForegroundColor( mStatusColor );
  mText-&gt;setPaletteBackgroundColor( mTFgColor );
  mText-&gt;setText( mWndTitle );
  mText-&gt;setFixedHeight( 48 );

  setFixedSize( vbox-&gt;sizeHint() );
  QRect rect(KGlobalSettings::splashScreenDesktopGeometry());
  move( rect.x() + (rect.width() - size().width())/2,
        rect.y() + (rect.height() - size().height())/2 );
}

void Theme2k::readSettings()
{
  if( !mTheme )
    return;

  KConfig *cfg = mTheme-&gt;themeConfig();
  if( !cfg )
    return;

  cfg-&gt;setGroup( QString("KSplash Theme: %1").arg(mTheme-&gt;theme()) );

  QColor DefaultTBgColor( Qt::darkBlue );
  QColor DefaultTFgColor( Qt::white );

  mTBgColor = cfg-&gt;readColorEntry( "Title Background Color",
&amp;DefaultTBgColor );
  mTFgColor = cfg-&gt;readColorEntry( "Title Foreground Color",
&amp;DefaultTFgColor );
  mStatusColor = cfg-&gt;readColorEntry("Status Text Color", &amp;mTBgColor );

  QColor DefaultRot1( Qt::darkBlue );
  QColor DefaultRot2( Qt::cyan );
  mRotColor1 = cfg-&gt;readColorEntry( "Rotator Color 1", &amp;DefaultRot1 );
  mRotColor2 = cfg-&gt;readColorEntry( "Rotator Color 2", &amp;DefaultRot2 );

  mRotSpeed = cfg-&gt;readNumEntry( "Rotator Speed", 30 );
  mWndTitle = cfg-&gt;readEntry( "Window Title", i18n("Please wait...") );
  mLogoFile = cfg-&gt;readEntry( "Logo File", QString::null );
}
</programlisting>
</sect1>
<sect1 id="rotwidgeth">
<title
>Inhoud van <filename
>rotwidget.h</filename
></title>
<programlisting
>#ifndef         __ROTWIDGET_H__
#define         __ROTWIDGET_H__

#include &lt;qlabel.h&gt;
#include &lt;qtimer.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kdialogbase.h&gt;
#include &lt;kpixmap.h&gt;

/**
 * @short Display a rotating-gradient widget.
 */
class         RotWidget: public QWidget
{
  Q_OBJECT
public:
  RotWidget( QWidget *, const QColor&amp;, const QColor&amp;, int );
  ~RotWidget();

private slots:
  void stepEvent();

protected:
  void        preparePixmap( int );
  void        paintEvent( QPaintEvent * );
  void        resizeEvent( QResizeEvent * );

  QColor m_color1, m_color2;
  int m_step, m_speed;
  QTimer *m_stepTimer;

  QList&lt;KPixmap&gt; m_stepPixmap;
};

#endif
</programlisting>
</sect1>
<sect1 id="rotwidgetcpp">
<title
>Inhoud van <filename
>rotwidget.cpp</filename
></title>
<programlisting
>#include &lt;kdebug.h&gt;
#include &lt;kdialogbase.h&gt;
#include &lt;kpixmapeffect.h&gt;

#include &lt;qlabel.h&gt;
#include &lt;qpainter.h&gt;
#include &lt;qwidget.h&gt;

#include "rotwidget.h"
#include "rotwidget.moc"

RotWidget::RotWidget( QWidget *parent, const QColor&amp; c1, const QColor&amp;
c2, int sp )
    :QWidget(parent), m_color1(c1), m_color2(c2), m_step(0), m_speed(sp)
{
  if( (m_speed &lt;= 0) || (m_speed &gt; 20) )
    m_speed = 1;
  setFixedHeight( 6 );

  for( int i = 0; i &lt;= width(); i++ )
    preparePixmap( i );

  m_stepTimer = new QTimer( this );
  connect(m_stepTimer, SIGNAL(timeout()), this, SLOT(stepEvent()));
  m_stepTimer-&gt;start( 50 );
}

RotWidget::~RotWidget()
{
}

void RotWidget::stepEvent()
{
  // This is inefficient as we create too many pixmaps, optimize later.
  m_step += m_speed;
  if( m_step &gt; width() )
    m_step = 0;
  repaint( true );
}

// Todo: Optimize drawing.
void RotWidget::paintEvent( QPaintEvent *pe )
{
  QPainter p;
  p.begin( this );

  QRect r = pe-&gt;rect();

  if( m_stepPixmap.at( m_step ) )
    bitBlt( this, r.x(), r.y(), m_stepPixmap.at( m_step ), r.x(), r.y(),
r.width(), r.height() );
  else
    p.fillRect( rect(), Qt::black );
  p.end();
}

void RotWidget::resizeEvent( QResizeEvent *re )
{
  m_stepPixmap.clear();
  for( int i = 0; i &lt;= re-&gt;size().width(); i++ )
    preparePixmap( i );
}

void RotWidget::preparePixmap( int step )
{
  if( step &lt; 0 )
    return;

  // Explicitly draw our first pixmap. The rest we will bitBlt() from here.
  if( step == 0 )
  {
    KPixmap tmp; tmp.resize( size().width() / 2, size().height() );
    KPixmap tmp2(tmp);
    KPixmapEffect::gradient( tmp, m_color1, m_color2,
KPixmapEffect::HorizontalGradient );
    KPixmapEffect::gradient( tmp2, m_color2, m_color1,
KPixmapEffect::HorizontalGradient );
    KPixmap *px = new KPixmap( size() );
    QPainter p;
    p.begin( px );
    p.drawPixmap( 0, 0, tmp );
    p.drawPixmap( size().width()/2, 0, tmp2 );
    p.end();
    m_stepPixmap.append( px );
  }
  else if( m_stepPixmap.at( step-1 ) )
  {
    QPixmap *prev = m_stepPixmap.at( step-1 );
    QPixmap next; next.resize( size() );
    // convert
    // prev = "[------------]"
    // to
    // next = "------------]["
    bitBlt( &amp;next, 0, 0, prev, 1, 0, prev-&gt;width()-1, prev-&gt;height()
);
    bitBlt( &amp;next, width()-1, 0, prev, 0, 0, 1, prev-&gt;height() );
    KPixmap *n = new KPixmap( next );
    m_stepPixmap.append( n );
  }
}
</programlisting>
</sect1>
</appendix>

&documentation.index;
</book>

<!--
Local Variables:
mode: xml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:

vim:tabstop=2:shiftwidth=2:expandtab
-->
