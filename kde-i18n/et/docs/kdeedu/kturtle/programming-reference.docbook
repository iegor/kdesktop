<!--Dear translator: please NEVER translate the id or anything inside the tags as they are needed in english by the application
     Thanks a lot in advance.-->
<chapter id="reference">
<title
>&kturtle;'i &logo; käskude seletused</title>
<para
>Käesolev osa selgitab &kturtle;'i &logo; keelt. Esmalt puudutame lühidalt <link linkend="different-instructions"
>erinevaid instruktsioonide tüüpe</link
>. Seejärel selgitame ükshaaval kõiki <link linkend="commands"
>käske</link
>. Sellele järgnevad <link linkend="containers"
>konteinereid</link
>, <link linkend="math"
>matemaatikat</link
>, <link linkend="questions"
>küsimusi</link
> ja <link linkend="controlling-execution"
>täitmise kontrollereid</link
> puudutavad selgitused. Lõpuks aga näitame, kuidas on võimalik luua omaenda käske käsuga <link linkend="learn"
>learn</link
>.</para>

<sect1 id="different-instructions">
<title
>Instruktsioonide tüübid</title>
<para
>Nagu igal keelel, nii on ka LOGO-l mitut laadi sõnu ja sümboleid. Järgnevalt selgitame lühidalt nende tüüpide erinevusi.</para>

<sect2 id="command">
<title
>Käsud</title>
<para
>Just käskudega saab panna kilpkonna või &kturtle;'i midagi tegema. Osa käske eeldab sisendit, osa annab väljundi. <screen
># forward on käsk, mis vajab sisendit, antud juhul on selleks arv 100:
forward 100
</screen>
</para>
<para
>Täpsemalt kirjeldatakse kõiki käske, mida &kturtle; toetab, <link linkend="commands"
>siin</link
>.</para>
</sect2>

<sect2 id="number">
<title
>Arvud</title>
<para
>Arvatavasti oled juba koolis õppinud, mis asjad on arvud või mingil muul moel osanud selle välja uurida. &kturtle; kasutab arve üsna sarnaselt sellele, kuidas kasutatakse neid matemaatikas või kas või tavalises kõnepruugis. </para>
<para
>Me kasutamine niinimetatud naturaalarve: <userinput
>0</userinput
>, <userinput
>1</userinput
>, <userinput
>2</userinput
>, <userinput
>3</userinput
>, <userinput
>4</userinput
>, <userinput
>5</userinput
> jne. Samuti negatiivseid arve: <userinput
>-1</userinput
>, <userinput
>-2</userinput
>, <userinput
>-3</userinput
> jne. Aga ka murdarve, näiteks: <userinput
>0.1</userinput
>, <userinput
>3,14</userinput
>, <userinput
>33,3333</userinput
>, <userinput
>-5,05</userinput
>, <userinput
>-1,0</userinput
>. </para>
<para
>Arve saab pruukida <link linkend="math"
>matemaatilistes arvutustes</link
> ja <link linkend="questions"
>küsimustes</link
>. Neid saab lisada ka <link linkend="containers"
>konteineritesse</link
>.</para>
<para
>Arvud on <link linkend="the-code-editor"
>koodiredaktoris</link
> <glossterm
>esile tõstetud</glossterm
> sinise värviga.</para>
</sect2>

<sect2 id="string">
<title
>Stringid</title>
<para
>Kõigepealt näide: <screen>
print "Hei, mina olen string."
</screen
> Selles näites on <userinput
>print</userinput
> käsk, <userinput
>"Hei, mina olen string."</userinput
> aga string. Stringide alguses ja lõpus seisab <userinput
>"</userinput
>, mille järgi &kturtle; tunneb ära, et tegemist on stringiga.</para>
<para
>Stringe saab lisada <link linkend="containers"
>konteineritele</link
>, kuid neid ei saa kasutada <link linkend="math"
>matemaatilistes arvutustes</link
> ega <link linkend="questions"
>küsimustes</link
>.</para>
<para
>Stringid on <link linkend="the-code-editor"
>koodiredaktoris</link
> <glossterm
>esile tõstetud</glossterm
> tumepunase värviga.</para>
</sect2>


<sect2 id="name">
<title
>Nimed</title>
<para
>Programmeerimiskeelt &logo; kasutades on sul võimalik luua uusi asju. Mõnda programmi kirjutades läheb sageli tarvis <link linkend="containers"
>konteinereid</link
> ning mõnigi kord tuleb uute käskude loomiseks tarvitada käsku <link linkend="learn"
>learn</link
>. Luues <link linkend="containers"
>konteinerit</link
> või uut käsku käsuga <link linkend="learn"
>learn</link
>, tuleb määrata ka nimi.</para>
<para
>Nime võib valida just sellise, nagu tahad - peaasi, et sel ei oleks juba tähendust. Nii ei saa näiteks anda konteinerile nimeks <link linkend="forward"
>forward</link
>, sest seda kasutab juba üks käsk ja sellel on niisiis tähendus olemas. <screen>
# siin on forward kasutusel konteinerina, aga sel on juba tähendus,
# mistõttu tulemuseks on viga:
forward = 20

# aga nii läheb küll:
forward 20
</screen
> Nimed tohivad sisaldada ainult tähti, arve ja alakriipse (_), sealjuures peavad nad algama tähega. </para>
<para
>Täpsemalt ja põhjalikumalt ning näidetega tutvu <link linkend="containers"
>konteineritest</link
> ja käsust <link linkend="learn"
>learn</link
> rääkivates osades. </para>
</sect2>

<sect2 id="assignment">
<title
>Omistamised</title>
<para
>Omistamiseks kasutatakse sümbolit <userinput
>=</userinput
>. Programmeerimiskeeles ei ole ühekordne <userinput
>=</userinput
> mitte 'võrdub', vaid pigem 'saab'. Sõnale 'võrdub' vastab paremini sümbol <userinput
>==</userinput
>, mis kujutab endast <link linkend="questions"
>küsimust</link
>.</para>
<para
>Omistamist kasutatakse peamiselt kahel eesmärgil: (1) sisu lisamiseks <link linkend="containers"
>konteineritele</link
> ja (2) konteineri sisu muutmiseks. Näide: <screen
>x = 10
# konteiner x sisaldab nüüd arvu 10
W = "Minu vanus on: "
# konteiner W sisaldab nüüd stringi "Minu vanus on: "
# järgmine käsk näitab konteinerite 'W' ja 'x' sisu lõuendil
print W + x
</screen>
</para>
<para
>Rohkem näiteid leiab <link linkend="containers"
>konteineritest</link
> kõnelevas osas.</para>
</sect2>

<sect2 id="math-symbols">
<title
>Matemaatikasümbolid</title>
<para
>&kturtle; toetab kõiki põhilisi matemaatikasümboleid: liitmine (<userinput
>+</userinput
>), lahutamine (<userinput
>-</userinput
>), korrutamine (<userinput
>*</userinput
>), jagamine (<userinput
>/</userinput
>) ja sulud <userinput
>(</userinput
> ning <userinput
>)</userinput
>.</para>
<para
>Põhjalikuma seletuse ja rohkem näiteid leiab <link linkend="math"
>matemaatikast</link
> kõnelevas osas.</para>
</sect2>

<sect2 id="question">
<title
>Küsimused</title>
<para
>Me võime esitada lihtsaid küsimusi, mille vastus saab olla kas 'tõene' või 'väär'.</para>
<para
>Küsimuste kasutamist selgitab põhjalikult <link linkend="questions"
>küsimustele</link
> pühendatud osa.</para>
</sect2>

<sect2 id="questions-glue">
<title
>Küsimuste ühendussõnad</title>
<para
>Küsimusi saab ühendada niinimetatud ühendussõnadega. Sellisteks sõnadeks on <userinput
>and</userinput
>, <userinput
>or</userinput
> ja spetsiaalne ühendussõna <userinput
>not</userinput
>.</para>
<para
>Küsimuste ühendussõnade kasutamist selgitab <link linkend="question-glue"
>ühendussõnadele</link
> pühendatud osa.</para>
</sect2>


<sect2 id="comment">
<title
>Kommentaarid</title>
<para
>Kommentaarid on sellised read, mille alguses seisab <userinput
>#</userinput
>. Näide: <screen>
# see on kommentaar!
print "see ei ole kommentaar"
# eelmine rida ei olnud kommentaar, aga järgmine on:
# print "see ei ole kommentaar"
</screen
> Kommentaarireaga saame lisada kommentaare koodile iseenda või ka teiste jaoks, kes vähegi seda loevad. Kommentaare kasutatakse (1) programmile väikese kirjelduse lisamiseks, (2) koodiosa toimimise selgitamiseks, kui see võib tunduda veidi segasena, ning (3) selliste koodiridade 'väljakommenteerimiseks', mida tuleks (ajutiselt) ignoreerida (vaata toodud näite viimast rida).</para>
<para
>Kommenteeritud read on <link linkend="the-code-editor"
>koodiredaktoris</link
> <glossterm
>esile tõstetud</glossterm
> tumekollase värviga.</para>
</sect2>

</sect1>


<sect1 id="commands">
<title
>Käsud</title>
<para
>Just käskudega saab panna kilpkonna või &kturtle;'i midagi tegema. Osa käske eeldab sisendit, osa annab väljundi. Selles osas kirjeldame kõiki käske, mida saab &kturtle;'is kasutada. Pane tähele, et kõik rakenduse poolt pakutavad käsud, mida me siin tutvustame, on <link linkend="the-code-editor"
>koodiredaktoris</link
> <glossterm
>esile tõstetud</glossterm
> tumerohelise värviga, mis aitab neid paremini eristada.</para>

<sect2 id="moving-the-turtle">
<title
>Kilpkonna liigutamine</title>
<para
>Kilpkonna saab lõuendil liigutada mitme käsuga.</para>
  
<sect3 id="forward">
  <title
>forward (fw)</title>
  <variablelist>
    <varlistentry
> 
      <term
>forward</term>
      <listitem
><para
><screen
>forward X</screen>
<userinput
>forward</userinput
> paneb kilpkonna otse edasi liikuma X piksli võrra. Kui pliiats on sees, jätab kilpkonna ka jälje maha. <userinput
>forward</userinput
> asemel võib kasutada lühendit <userinput
>fw</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="backward">
  <title
>backward (bw)</title>
  <variablelist>
    <varlistentry
>  
      <term
>backward</term>
      <listitem
><para
><screen
>backward X</screen>
<userinput
>backward</userinput
> paneb kilpkonna otse tagasi liikuma X piksli võrra. Kui pliiats on sees, jätab kilpkonna ka jälje maha. <userinput
>backward</userinput
> asemel võib kasutada lühendit <userinput
>bw</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="turnleft">
  <title
>turnleft (tl)</title>
  <variablelist>
    <varlistentry
> 
      <term
>turnleft</term>
      <listitem
><para
><screen
>turnleft X</screen>
<userinput
>turnleft</userinput
> paneb kilpkonna X kraadi võrra vasakule pöörama. <userinput
>turnleft</userinput
> asemel võib kasutada lühendit <userinput
>tl</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="turnright">
  <title
>turnright (tr)</title>
  <variablelist>
    <varlistentry
> 
      <term
>turnright</term>
      <listitem
><para
><screen
>turnright X</screen>
<userinput
>turnright</userinput
> paneb kilpkonna X kraadi võrra paremale pöörama. <userinput
>turnright</userinput
> asemel võib kasutada lühendit <userinput
>tr</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="direction">
  <title
>direction (dir)</title>
  <variablelist>
    <varlistentry
> 
      <term
>direction</term>
      <listitem
><para
><screen
>direction X</screen>
<userinput
>direction</userinput
> määrab kilpkonna suunaks X kraadi arvestades nullist, see ei ole seotud kilpkonna varasema suunaga. <userinput
>direction</userinput
> asemel võib kasutada lühendit <userinput
>dir</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="center">
  <title
>center</title>
  <variablelist>
    <varlistentry
> 
      <term
>center</term>
      <listitem
><para
><screen
>center</screen>
<userinput
>center</userinput
> sunnib kilpkonna liikuma lõuendi keskpunkti.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="go">
  <title
>go</title>
  <variablelist>
    <varlistentry
> 
      <term
>go</term>
      <listitem
><para
><screen
>go X,Y</screen>
<userinput
>go</userinput
> paneb kilpkonna liikuma lõuendi konkreetsesse punkti. See asub X <glossterm linkend="pixels"
>piksli</glossterm
> kaugusel lõuendi vasakust servast ja Y <glossterm linkend="pixels"
>piksli</glossterm
> kaugusel lõuendi ülaservast. Pane tähele, et käsu <userinput
>go</userinput
> kasutamisel kilpkonn joont ei tõmba.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="gox">
  <title
>gox</title>
  <variablelist>
    <varlistentry
> 
      <term
>gox</term>
      <listitem
><para
><screen
>gox X</screen>
<userinput
>gox</userinput
> paneb kilpkonna samal kõrgusel liikuma X <glossterm linkend="pixels"
>piksli</glossterm
> kaugusele lõuendi vasakust servast.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="goy">
  <title
>goy</title>
  <variablelist>
    <varlistentry
> 
      <term
>goy</term>
      <listitem
><para
><screen
>goy Y</screen>
<userinput
>goy</userinput
> paneb kilpkonna samal laiusel (kaugusel vasakust servast) liikuma Y <glossterm linkend="pixels"
>piksli</glossterm
> kaugusele lõuendi ülaservast.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="pen">
<title
>Kilpkonn pliiatsiga</title>
<para
>Kilpkonnal on pliiats, millega ta liikudes joont veab. Pliiatsit saab juhtida mitme käsuga, mida siin tutvustamegi.</para>
<sect3 id="penup">
  <title
>penup (pu)</title>
  <variablelist>
    <varlistentry
> 
      <term
>penup</term>
      <listitem
><para
><screen
>penup</screen>
<userinput
>penup</userinput
> tõstab pliiatsi lõuendilt ja kuni see on <quote
>üleval</quote
>, ei tõmba kilpkonn liikudes ühtki joont. Vaata ka <userinput
>pendown</userinput
>. <userinput
>penup</userinput
> asemel võib kasutada lühendit <userinput
>pu</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="pendown">
  <title
>pendown (pd)</title>
  <variablelist>
    <varlistentry
> 
      <term
>pendown</term>
      <listitem
><para
><screen
>pendown</screen>
<userinput
>pendown</userinput
> surub pliiatsi lõuendi vastu ja kuni see on <quote
>all</quote
>, tõmbab kilpkonn liikudes joone. Vaata ka <userinput
>penup</userinput
>. <userinput
>pendown</userinput
> asemel võib kasutada ka lühendit <userinput
>pd</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="setpenwidth">
  <title
>penwidth (pw)</title>
  <variablelist>
    <varlistentry
> 
      <term
>penwidth</term>
      <listitem
><para
><screen
>penwidth X</screen>
<userinput
>penwidth</userinput
> määrab pliiatsi tõmmatava joone laiuseks X <glossterm linkend="pixels"
>pikslit</glossterm
>. <userinput
>penwidth</userinput
> asemel võib kasutada ka lühendit <userinput
>pw</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="setfgcolor">
  <title
>pencolor (pc)</title>
  <variablelist>
    <varlistentry
> 
      <term
>pencolor</term>
      <listitem
><para
><screen
>pencolor R,G,B</screen>
<userinput
>pencolor</userinput
> määrab pliitsi tõmmatava joone värvi. <userinput
>pencolor</userinput
> tahab saada sisendina <glossterm linkend="rgb"
>RGB värvikoodi</glossterm
>. <userinput
>pencolor</userinput
> asemel võib kasutada ka lühendit <userinput
>pc</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="canvas">
<title
>Lõuendiga seotud käsud</title>
<para
>Lõuendi omadusi saab muuta mitme käsuga.</para>
<sect3 id="resizecanvas">
  <title
>canvassize (cs)</title>
  <variablelist>
    <varlistentry>
      <term
>canvassize</term>
      <listitem
><para
><screen
>canvassize X,Y</screen>
Käsk <userinput
>canvassize</userinput
> määrab lõuendi suuruse. Käsu sisendiks on X ja Y, kus X on uue lõuendi laius <glossterm linkend="pixels"
>pikslites</glossterm
> ja Y uue lõuendi kõrgus samuti <glossterm linkend="pixels"
>pikslites</glossterm
>. <userinput
>canvassize</userinput
> asemel võib kasutada lühendit <userinput
>cs</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="setbgcolor">
  <title
>canvascolor (cc)</title>
  <variablelist>
    <varlistentry
> 
      <term
>canvascolor</term>
      <listitem
><para
><screen
>canvascolor R,G,B</screen>
Käsk <userinput
>canvascolor</userinput
> määrab lõuendi värvi. <userinput
>canvascolor</userinput
> tahab saada sisendina <glossterm linkend="rgb"
>RGB värvikoodi</glossterm
>. <userinput
>canvascolor</userinput
> asemel võib kasutada ka lühendit <userinput
>cc</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="wrapon">
  <title
>wrapon</title>
  <variablelist>
    <varlistentry
> 
      <term
>wrapon</term>
      <listitem
><para
><screen
>wrapon</screen>
Käsk <userinput
>wrapon</userinput
> lubab lõuendil kasutada <glossterm linkend="wrapping"
>murdmist</glossterm
>. Kui soovid täpsemalt teada, mis on <glossterm linkend="wrapping"
>murdmine</glossterm
>, vaata sõnastikku.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="wrapoff">
  <title
>wrapoff</title>
  <variablelist>
    <varlistentry
> 
      <term
>wrapoff</term>
      <listitem
><para
><screen
>wrapoff</screen>
Käsk <userinput
>wrapoff</userinput
> keelab lõuendil kasutada <glossterm linkend="wrapping"
>murdmist</glossterm
>. See tähendab, et kilpkonn võib minna üle lõuendi piiri ja <quote
>kaduda</quote
>. Kui soovid täpsemalt teada, mis on <glossterm linkend="wrapping"
>murdmine</glossterm
>, vaata sõnastikku.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="clean">
<title
>Puhastamiskäsud</title>
<para
>Kahe käsuga saab lõuendi puhastada sellest, mida sa sinna oled valmis meisterdanud.</para>
<sect3 id="clear">
  <title
>clear (cr)</title>
  <variablelist>
    <varlistentry
> 
      <term
>clear</term>
      <listitem
><para
><screen
>clear</screen>
Käsk <userinput
>clear</userinput
> puhastab lõuendilt kogu joonistatu. Muud asjad jäävad püsima: kilpkonna asukoht ja nurk, lõuendivärv, kilpkonna nähaolek ja lõuendi suurus. <userinput
>clear</userinput
> asemel võib kasutada ka lühendit <userinput
>cr</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="reset">
  <title
>reset</title>
  <variablelist>
    <varlistentry
> 
      <term
>reset</term>
      <listitem
><para
><screen
>reset</screen>
Käsk <userinput
>reset</userinput
> puhastab palju rohkem asju kui <userinput
>clear</userinput
>. Pärast käsku <userinput
>reset</userinput
> on kõik taas selline, nagu &kturtle;'i käivitamisel: kilpkonn on lõuendi keskel, lõuendi värv on valge ja kilpkonn hakkab liikudes vedama musta joont.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="sprites">
<title
>Kilpkonn on sprait</title>
<para
>Vaevalt et paljud teavad, mis õieti on sprait, nii et ütleme siis saladuse välja: sprait on väike pilt, mida saab ekraanil liigutada. Täpsemalt vaata sõnastikust mõiste <glossterm linkend="sprites"
>sprait</glossterm
> kirjeldust. See tähendab, et meie kilpkonn on sprait! </para>
<para
>Toome siin ära kõik käsud, mida saab spraidi puhul kasutada.</para>
<para
>[&kturtle;'i praegune versioon toetab spraidina ainult kilpkonna kasutamist. Aga tulevikus võib olla vägagi võimalik, et võid kilpkonna oma soovi kohaselt millegi muuga asendada.]</para>
<sect3 id="spriteshow">
  <title
>show</title>
  <variablelist>
    <varlistentry
> 
      <term
>show (ss)</term>
      <listitem
><para
><screen
>show</screen>
Käsk <userinput
>show</userinput
> muudab kilpkonna uuesti nähtavaks pärast tema peitmist. <userinput
>show</userinput
> asemel võib kasutada ka lühendit <userinput
>ss</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="spritehide">
  <title
>hide (sh)</title>
  <variablelist>
    <varlistentry
> 
      <term
>hide</term>
      <listitem
><para
><screen
>hide</screen>
<userinput
>hide</userinput
> peidab kilpkonna. Seda on mõtet kasutada siis, kui kilpkonn kohe kuidagi ei taha sinu joonistusele sobida. <userinput
>hide</userinput
> asemel võib kasutada ka lühendit <userinput
>sh</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="writing">
<title
>Kas kilpkonnad oskavad ka kirjutada?</title>
<para
>Õige vastus: <quote
>jah, muidugi</quote
>. Kilpkonn võib kirjutada küll, aga mõistagi pead sina talle ütlema, mida kirjutada.</para>
<sect3 id="print">
  <title
>print</title>
  <variablelist>
    <varlistentry
> 
      <term
>print</term>
      <listitem
><para
><screen
>print X</screen>
<userinput
>print</userinput
> annab kilpkonnale käsu midagi lõuendile kirjutada. <userinput
>print</userinput
> sisendiks võivad olla nii numbrid kui stringid. Sümbolit <quote
>+</quote
> kasutades saab käsuga <userinput
>print</userinput
> lasta kirjutada mitmesuguseid numbreid ja stringe. Toome siin väikese näite: <screen
>year = 2003
author = "Cies"
print author + " alustas KTurtle'i projekti aastal " + year + "  ja ta töötab endiselt rõõmuga selle kallal!"
</screen>
      </para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="fontsize">
  <title
>fontsize</title>
  <variablelist>
    <varlistentry
> 
      <term
>fontsize</term>
      <listitem
><para
><screen
>fontsize X</screen>
<userinput
>fontsize</userinput
> määrab fondi suuruse, mida <userinput
>print</userinput
> kirjutamisel kasutab. <userinput
>fontsize</userinput
> sisend peab olema number. Suurus määratakse <glossterm linkend="pixels"
>pikslites</glossterm
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="random">
<title
>Õnnemängukäsk</title>
<para
>Üks käsk nii-öelda veeretab sinu eest täringut. Selle nimi on <userinput
>random</userinput
> ja sellega saab igasuguseid vahvaid ning ootamatuid asju teha.</para>
  <variablelist>
    <varlistentry
> 
      <term
>random</term>
      <listitem
><para
><screen
>random X,Y</screen>
<userinput
>random</userinput
> on käsk, mis tahab saada sisendit ja annab kohe ka väljundi. Sisendiks on kaks arvu, milles üks (X) määrab minimaalse ja teine (Y) maksimaalse väljundi. Väljund on juhuslik arv, mis on miinimumiga võrdne või suurem ning maksimumiga võrdne või väiksem. Üks väike näide: <screen>
repeat 500 [
  x = random 1,20
  forward x
  turnleft 10 - x
]
</screen
> Selle käsuga saab oma programmi veidi kaootilisemaks muuta.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="dialogs">
<title
>Sisendi- ja tagasisidedialoogid</title>
<para
>Dialoog on väike hüpikaken, mis annab teatud tagasisidet või soovib saada mingit sisendit. &kturtle; kasutab dialoogidele kaht käsku: <userinput
>message</userinput
> ja <userinput
>inputwindow</userinput
>.</para>
<sect3 id="message">
  <title
>message</title>
  <variablelist>
    <varlistentry
> 
      <term
>message</term>
      <listitem
><para
><screen
>message X</screen>
Käsk <userinput
>message</userinput
> vajab sisendina <link linkend="string"
>stringi</link
>. See näitab hüpikdialoogi, mis sisaldab <link linkend="string"
>stringi</link
> teksti. <screen
>year = 2003
author = "Cies"
print author + " alustas KTurtle'i projekti aastal " + year + "  ja ta töötab endiselt rõõmuga selle kallal!"
</screen>
      </para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="inputwindow">
  <title
>inputwindow</title>
  <variablelist>
    <varlistentry
> 
      <term
>inputwindow</term>
      <listitem
><para
><screen
>inputwindow X</screen>
Käsk <userinput
>inputwindow</userinput
> vajab sisendina <link linkend="string"
>stringi</link
>. See näitab hüpikdialoogi, mis sisaldab stringi nagu ka <link linkend="message"
>message</link
>. Kuid lisaks sellele on dialoogis ka sisendiväli. Selle abil saab kasutaja sisestada <link linkend="number"
>arvu</link
> või <link linkend="string"
>stringi</link
>, mis on võimalik salvestada <link linkend="containers"
>konteinerisse</link
>. Näide: <screen>
in = inputwindow "Kui vana sa oled?"
out = 2003 - in
print "Aastal 2003 olid sa " + out + " aastat vana."
</screen
> Kui kasutaja sulgeb sisenddialoogi või ei sisesta midagi, tühjendatakse vastav <link linkend="containers"
>konteiner</link
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

</sect1>



<sect1 id="containers">
<title
>Konteinerid</title>
<para
>Konteinerid on tähed või sõnad, mida programmeerija saab tarvitada arvu või teksti mahutamiseks. Arve sisaldavaid konteinereid nimetatakse <link linkend="variables"
>muutujateks</link
>, teksti sisaldavaid <link linkend="strings"
>stringideks</link
>.</para>

<para
>Konteinerid, mida veel ei kasutata, tähendavad vaikimisi 0. Näide: <screen>
print N
</screen
> See ei näita mitte midagi. Kui me püüame <link linkend="math"
>matemaatikas</link
> kasutada tühje konteinereid, on tulemuseks vead. </para>

<sect2 id="variables">
<title
>Muutujad: arvukonteinerid</title>
<para
>Toome taas näite: <screen>
x = 3
print x
</screen
> Esimesel real muudetakse täht <userinput
>x</userinput
> muutujaks (numbrikonteineriks). Nagu näed, antakse muutujale <userinput
>x</userinput
> väärtuseks 3. Teisel real antakse korraldus see väärtus kirja panna.</para>
<para
>Pane tähele, et soovi korral panna kirja <quote
>x</quote
>, pidanuks me seda tegema nii: <screen
>print "x"
</screen>
</para>
<para
>See oli lihtne, aga võtame kohe raskema näite: <screen>
A = 2004
B = 25
C = A + B

# järgmine käsk kirjutab "2029"
print C
backward 30
# järgmine käsk kirjutab "2004 pluss 25"
print A + " plus " + B
backward 30
# järgmine käsk kirjutab  "1979"
print A - B
</screen
> Esimesel kahel real määratakse muutujate <userinput
>A</userinput
> ja <userinput
>B</userinput
> väärtuseks 2004 ja 25. Kolmandal real määratakse muutuja <userinput
>C</userinput
> väärtuseks <userinput
>A + B</userinput
> ehk siis 2029. Ülejäänud osa näitest koosneb kolmest käsust <userinput
>print</userinput
>, mida eraldab käsk <userinput
>backward 30</userinput
>. <userinput
>backward 30</userinput
> on siin selleks, et iga väljund oleks ikka uuel real. Toodud näites on ka näha, et muutujaid saab kasutada <link linkend="math"
>matemaatilisteks teheteks</link
>.</para>
</sect2>

<sect2 id="strings">
<title
>Teksti (stringe) sisaldavad konteinerid</title>
<para
>Programmeerimiskoodis algab ja lõpeb tavaline tekst enamasti jutumärkidega. Me juba nägime seda: <screen>
print "Hei programmeerija!"
</screen
> Tavaline tekst on piiratud jutumärkidega. Sellist tavalise teksti juppi nimetamegi <link linkend="strings"
>stringiks</link
>.</para>
<para
>Stringe võib salvestada <link linkend="containers"
>konteinerites</link
> täpselt samamoodi nagu <link linkend="number"
>arve</link
>. Stringid sarnanevad tublisti muutujatega. Suurim erinevus on see, et stringe ei saa kasutada <link linkend="math"
>matemaatilistes tehetes</link
> ega <link linkend="questions"
>küsimustes</link
>. Näide stringide kasutamise kohta: <screen>
x = "Tere "
name = inputwindow "Palun sisesta oma nimi..."
print x + name + ", kuidas läheb?
</screen
> Esimesel real määratakse stringi <userinput
>x</userinput
> väärtuseks <quote
>Tere </quote
>. Teisel real määratakse stringi <userinput
>name</userinput
> väärtuseks käsu <userinput
>inputwindow</userinput
> väljund. Kolmanda reaga antakse korraldus kirjutada lõuendile kolme stringi kombinatsioon.</para>
<para
>Programm palub sul sisestada oma nime. Kui sa näiteks annad oma nimeks <quote
>Paul</quote
>, kirjutab programm <quote
>Tere Paul, kuidas läheb?</quote
> Pane tähele, et plussmärk (+) on ainus matemaatiline sümbol, mida saab stringide puhul kasutada.</para>
</sect2>
</sect1>

<sect1 id="math">
<title
>Kas Kilpkonn ka matemaatikat oskab?</title>
<para
>&kturtle;? Ikka oskab. Ta võib liita (+), lahutada (-), korrutada (*) ja jagada (/). Toome siin näite kõigi nende tehetega: <screen>
a = 20 - 5
b = 15 * 2
c = 30 / 30
d = 1 + 1
print "a: "+a+", b: "+b+", c: "+c+", d: "+d 
</screen
> Tead sa ikka, mis on a, b, c ja d väärtus? Pane tähele ka <link linkend="assignment"
>omistamise</link
> sümboli <userinput
>=</userinput
> kasutamist.</para>
<para
>Kui soovid väga lihtsat tehet teha, siis see käib umbes nii: <screen
>print 2004-12
</screen
></para>
<para
>Ja nüüd näide sulgudega: <screen>
print ( ( 20 - 5 ) * 2 / 30 ) + 1
</screen
> Sulgudes olevad tehted sooritatakse esimestena.</para>
</sect1>

<sect1 id="questions">
<title
>Küsid küsimuse, saad vastuse...</title>
<para
><link linkend="if"
><userinput
>if</userinput
></link
> ja <link linkend="while"
><userinput
>while</userinput
></link
> on <link linkend="controlling-execution"
>täitmise kontrollerid</link
>, mida me käsitleme järgmises osas. Siin kasutame käsku <userinput
>if</userinput
> küsimuste selgitamiseks.</para>
<sect2 id="q">
<title
>Küsimused</title>
<para
>Lihtne näide küsimuse kohta: <screen>
x = 6
if x &gt; 5 [
  print "tere"
]
</screen
> Selles näites on küsimuseks <userinput
>x &gt; 5</userinput
>. Kui vastus sellele küsimusele on 'tõene', täidetakse nurksulgudes olev kood. Küsimused on programmeerimises päris tähtsal kohal ning neid kasutataksegi tihtipeale koos <link linkend="controlling-execution"
>täitmise kontrolleritega</link
>, näiteks <link linkend="if"
><userinput
>if</userinput
></link
>. Kõiki arve ja <link linkend="variables"
>muutujaid</link
> (arvukonteinereid) saab omavahel võrrelda küsimusi kasutades.</para>
<para
>Toome siin ära kõik võimalikud küsimused: <table>
<title
>Küsimuste tüübid</title>
<tgroup cols="3">
<tbody>
<row>
<entry
><userinput
>a == b</userinput
></entry>
<entry
>võrdub</entry>
<entry
>vastus on <quote
>tõene</quote
>, kui <userinput
>a</userinput
> võrdub <userinput
>b</userinput
></entry>
</row>
<row>
<entry
><userinput
>a != b</userinput
></entry>
<entry
>ei võrdu</entry>
<entry
>vastus on <quote
>tõene</quote
>, kui <userinput
>a</userinput
> ei võrdu <userinput
>b</userinput
></entry>
</row>
<row>
<entry
><userinput
>a &gt; b</userinput
></entry>
<entry
>suurem kui</entry>
<entry
>vastus on <quote
>tõene</quote
>, kui <userinput
>a</userinput
> on suurem kui <userinput
>b</userinput
></entry>
</row>
<row>
<entry
><userinput
>a &lt; b</userinput
></entry>
<entry
>väiksem kui</entry>
<entry
>vastus on <quote
>tõene</quote
>, kui <userinput
>a</userinput
> on väiksem kui <userinput
>b</userinput
></entry>
</row>
<row>
<entry
><userinput
>a &gt;= b</userinput
></entry>
<entry
>suurem kui või võrdub</entry>
<entry
>vastus on <quote
>tõene</quote
>, kui <userinput
>a</userinput
> on suurem kui või võrdub <userinput
>b</userinput
></entry>
</row>
<row>
<entry
><userinput
>a &lt;= b</userinput
></entry>
<entry
>väiksem kui või võrdub</entry>
<entry
>vastus on <quote
>tõene</quote
>, kui <userinput
>a</userinput
> on väiksem  kui või võrdub <userinput
>b</userinput
></entry>
</row>
</tbody>
</tgroup>
</table>
</para>
<para
>Küsimused on <link linkend="the-code-editor"
>koodiredaktoris</link
> <glossterm
>esile tõstetud</glossterm
> sinise värviga.</para
> 
</sect2>

<sect2 id="question-glue">
<title
>Küsimuste ühendussõnad</title>
<para
>Küsimusi saab ka üksteisega siduda niinimetatud küsimusliimiga. Sellisel moel saab mitmest küsimusest luua ühe suure küsimuse. <screen>
a = 1
b = 5
if a &lt; 5 and b == 5 [
  print "tere"
]
</screen
> Selles näites kasutatakse ühendussõna <userinput
>and</userinput
> kahe küsimuse 'liimimiseks' (<userinput
>a &lt; 5</userinput
>, <userinput
>b == 5</userinput
>). Kui üks <userinput
>and</userinput
> pooltest on <quote
>väär</quote
>, on kogu küsimuse vastus <quote
>väär</quote
>, sest ühendussõna <userinput
>and</userinput
> korral peab mõlema poole vastus olema <quote
>tõene</quote
>, et kogu vastus oleks <quote
>tõene</quote
>. Ja ära unusta panna küsimuste ümber sulge!</para>

<para
>Põgus ülevaade, millele järgneb põhjalikum seletus: <table>
<title
>Küsimuste ühendussõnad</title>
<tgroup cols="2">
<tbody>
<row>
<entry
><userinput
>and</userinput
></entry>
<entry
>Mõlemad pooled peavad olema 'tõesed', et vastus oleks 'tõene'</entry>
</row>
<row>
<entry
><userinput
>or</userinput
></entry>
<entry
>Kui üks pool on 'tõene', on vastus 'tõene'</entry>
</row>
<row>
<entry
><userinput
>not</userinput
></entry>
<entry
>Erijuhtum: kasutada ainult ühe küsimusega! Sooritab teisenduse 'tõene' -> 'väär' või 'väär' -> 'tõene'.</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
<para
>Küsimuste ühendussõnad on <link linkend="the-code-editor"
>koodiredaktoris</link
> <glossterm
>esile tõstetud</glossterm
> purpurse värviga.</para>

<sect3 id="and">
<title
>and</title>
<para
>Kui küsimused seotakse kokku sõnaga <userinput
>and</userinput
>, peavad mõlemad <userinput
>and</userinput
> pooled olema 'tõesed', et kogu tulemus oleks tõene. Näide: <screen>
a = 1
b = 5
if ((a &lt; 10) and (b == 5)) and (a &lt; b) [
  print "tere"
]
</screen
> Toodud näites on kaks ühendatud küsimust koos ühendatud kolmandaga.</para>
</sect3>

<sect3 id="or">
<title
>or</title>
<para
>Kui vähemalt üks sõnaga <userinput
>or</userinput
> ühendatud küsimustest on 'tõene', on 'tõene' ka tulemus. Näide: <screen>
a = 1
b = 5
if ((a &lt; 10) or (b == 10)) or (a == 0) [
  print "tere"
]
</screen
> Toodud näites on kaks ühendatud küsimust koos ühendatud kolmandaga.</para>
</sect3>

<sect3 id="not">
<title
>not</title>
<para
><userinput
>not</userinput
> on spetsiaalne ühendussõna, sest see käib korraga ainult ühe küsimuse kohta. <userinput
>not</userinput
> sooritab teisenduse 'tõene' -> 'väär' või 'väär' -> 'tõene'. Näide: <screen>
a = 1
b = 5
if not ((a &lt; 10) and (b == 5)) [
  print "tere"
]
else
[
  print "ei ütle tere ;-)"
]
</screen
> Toodud näites on ühendatud küsimus 'tõene', kuid <userinput
>not</userinput
> muudab selle 'vääraks'. Seepärast kirjutatakse <link linkend="the-canvas"
>lõuendile</link
> lõpuks <userinput
>"ei ütle tere ;-)"</userinput
>.</para>
</sect3>

</sect2>

</sect1>

<sect1 id="controlling-execution">
<title
>Täitmise kontrollimine</title>
<para
>Täitmise kontrollerid lubavad &mdash; nagu nimetuski ütleb &mdash; kontrollida käsu täitmist.</para>
<para
>Täitmise kontrollimise käsud on <glossterm
>esile tõstetud</glossterm
> tumerohelise rasvase kirjaga. Nurksulud, mida väga sageli koos täitmise kontrolleritega pruugitakse, on <glossterm
>esile tõstetud</glossterm
> helerohelise värviga.</para>

<sect2 id="wait">
<title
>Kilpkonna ootelejätmine</title>
<para
>Kui oled juba natuke &kturtle;'iga harjutanud, paned tähele, et kilpkonn võib päris kiiresti joonistada. See käsk muudab tema tegevuse aga veidi aeglasemaks.</para>
  <variablelist>
    <varlistentry>
      <term
>wait</term>
      <listitem
><para
><screen
>wait X</screen>
<userinput
>wait</userinput
> paneb kilpkonna X sekundiks ootama. <screen>
repeat 36 [
  forward 5
  turnright 10
  wait 0.5
]
</screen
> Selle koodiga joonistatakse ringjoon, aga kilpkonn ootab igal sammul pool sekundit. See jätab mulje nii enam-vähem normaalse kiirusega liikuvast kilpkonnast - vähemalt kilpkonna kohta...</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="if">
<title
>Tingimuse "kui" (if) täitmine</title>
  <variablelist>
    <varlistentry>
      <term
>if</term>
      <listitem
><para
><screen
>if <link linkend="questions"
>küsimus</link
> [ ...]</screen>
Kood, mis seisab <quote
>...</quote
> asemel, täidetakse ainult siis, kui (<userinput
>if</userinput
>) vastus <link linkend="questions"
>küsimusele</link
> on <quote
>tõene</quote
>. Loe palun <link linkend="questions"
>küsimuste</link
> kohta täpsemalt <link linkend="questions"
>küsimusi käsitlevast osast</link
>. <screen>
x = 6
if x &gt; 5 [
  print "x on suurem kui viis!"
]
</screen
> Esimesel real määratakse <userinput
>x</userinput
> väärtuseks 6. Teisel real esitatakse <link linkend="questions"
>küsimus</link
> <userinput
>x &gt; 5</userinput
>. Et vastus sellele küsimusele on <quote
>tõene</quote
>, lubab täitmise kontroller <userinput
>if</userinput
> nurksulgudes oleva koodi täita.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="while">
<title
>Silmus "while"</title>
  <variablelist>
    <varlistentry>
      <term
>while</term>
      <listitem
><para
><screen
>while <link linkend="questions"
>küsimus</link
> [ ... ]</screen>
Täitmise kontroller <userinput
>while</userinput
> on üsna sarnane kontrolleriga <link linkend="if"
><userinput
>if</userinput
></link
>. Nende peamine erinevus seisab selles, et <userinput
>while</userinput
> kordab nurksulgudes olevat koodi seni, kuni vastus <link linkend="questions"
>küsimusele</link
> on lõpuks <quote
>väär</quote
>. <screen>
x = 1
while x &lt; 5 [
  forward 10
  wait 1
  x = x + 1
]
</screen
> Esimesel real määratakse <userinput
>x</userinput
> väärtuseks 1. Teisel real esitatakse <link linkend="questions"
>küsimus</link
> <userinput
>x &lt; 5</userinput
>. Et vastus sellele küsimusele on <quote
>tõene</quote
>, alustab täitmise kontroller <userinput
>while</userinput
> nurksulgudes oleva koodi täitmist ja teeb seda seni, kuni vastus <link linkend="questions"
>küsimusele</link
> on lõpuks <quote
>väär</quote
>. Antud juhul täidetakse nurksulgudes olev kood neli korda, sest iga viienda rea täitmisega suureneb <userinput
>x</userinput
> ühe võrra.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="else">
<title
>Vastasel juhul ehk "else"</title>
  <variablelist>
    <varlistentry>
      <term
>else</term>
      <listitem
><para
><screen
>if küsimus [ ... ] else [ ... ]</screen>
Kontrollerit <userinput
>else</userinput
> saab kasutada koos kontrolleriga <link linkend="if"
><userinput
>if</userinput
></link
>. Kood, mis seisab nurksulgudes <userinput
>else</userinput
> järel, täidetakse ainult siis, kui vastus esitatud <link linkend="questions"
>küsimusele</link
> on <quote
>väär</quote
>. <screen>
reset
x = 4
if x &gt; 5 [
  print "x on suurem kui viis!"
] else [
  print "x on väiksem kui kuus!"
]
</screen
> <link linkend="questions"
>Küsimus</link
> ootab vastuseks, kas <userinput
>x</userinput
> on suurem kui 5. Et <userinput
>x</userinput
> väärtuseks on esimesel real määratud 4, on vastuseks <quote
>väär</quote
>. See tähendab, et täidetakse kood, mis seisab nurksulgudes <userinput
>else</userinput
> järel.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="for">
<title
>Arvestussilmus "for"</title>
  <variablelist>
    <varlistentry>
      <term
>for</term>
      <listitem
><para
><screen
>for <userinput
>alguspunkt</userinput
> to <userinput
>lõpp-punkt</userinput
> [ ... ]</screen>
<userinput
>for</userinput
> on <quote
>arvestussilmus</quote
>, mis teeb midagi teatud arv kordi. <screen>
for x = 1 to 10 [
  print x * 7
  forward 15
]
</screen
> Igal nurksulgudes oleva koodi täitmisel antakse <userinput
>x</userinput
> väärtus ühe võrra suuremana, kuni x võrdub lõpuks 10. Nurksulgudes olev kood antud juhul kirjutab tehte '<userinput
>x</userinput
> korda 7' tulemuse. Kui programm on töö lõpetanud, on tulemuseks lõuendil ilutsev numbri 7 korrutustabelike.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

</sect1>


<sect1 id="learn">
<title
>Omaenda käskude loomine käsuga <quote
>learn</quote
></title>
<para
>Käsk <userinput
>learn</userinput
> on väga eriline, sest selle abil saab luua omaenda käske. Sinu loodud käsk võib kasutada nii <glossterm linkend="input-output"
>sisendit</glossterm
> kui anda <glossterm linkend="input-output"
>väljundit</glossterm
>. Vaatamegi nüüd, kuidas uus käsk luua. <screen>
learn ringjoon (x) [
  repeat 36 [
    forward x
    turnleft 10
  ]
]
</screen
> Uus käsk kannab nime <userinput
>ringjoon</userinput
>. <userinput
>ringjoon</userinput
> kasutab <glossterm linkend="input-output"
>sisendina</glossterm
> numbrit, mis määrab ringjoone suuruse. <userinput
>ringjoon</userinput
> ei tagasta mingit <glossterm linkend="input-output"
>väljundit</glossterm
>. Nüüd võime käsku <userinput
>ringjoon</userinput
> kasutada täiesti tavalise käsuna, nagu selles näites: <screen
>learn ringjoon X [
  repeat 36 [ 
    forward X 
    turnleft 10 
  ] 
] 

go 30,30 
ringjoon 20

go 40,40 
ringjoon 50  
</screen>
</para>
<para
>Järgmises näites aga loome väljundväärtusega käsu. <screen>
reset

learn korrutaIseendaga n [
  r = n * 1
  r = n * n
  return r
]
i = inputwindow "Palun sisesta arv ja vajuta OK"
print i + " korrutatud iseendaga on: " + korrutaIseendaga (i)
</screen
> Selles näites on uue käsu nimeks <userinput
>korrutaIseendaga</userinput
>. Käsu sisend korrutatakse iseendaga ja tagastatakse käsuga <anchor id="return"/><userinput
>return</userinput
>. Käsk <userinput
>return</userinput
> on meetod omaloodud funktsiooni väljundväärtuse saamiseks. </para>
</sect1>

</chapter>
