<?xml version="1.0"  encoding="UTF-8" ?>

<chapter id="introduction">
<chapterinfo>
<title
>Introduzione</title>
<authorgroup>
<author
><firstname
>Eric</firstname
> <surname
>Laffoon</surname
> <affiliation
> <address
><email
>sequitur@kde.org</email
></address>
</affiliation>
</author>

<othercredit role="translator"
><firstname
>Samuele</firstname
><surname
>Kaplun</surname
><affiliation
><address
><email
>kaplun@aliceposta.it</email
></address
></affiliation
><contrib
>Traduzione del documento</contrib
></othercredit
> 

</authorgroup>
</chapterinfo>

<title
>Introduzione</title>

<para
>&kommander; è uno strumento di sviluppo visuale di finestre di dialogo che possono essere espanse fino a creare applicazioni dotate di finestre principali complete. L'obiettivo primario è di creare software nella maniera più efficace senza l'utilizzo di alcun linguaggio di scripting. Ciò si realizza grazie alle seguenti funzionalità: </para>

<itemizedlist>


  <listitem
><para
>I comandi speciali sono prefissati da una <quote
>@</quote
> come in @widgetText. Sono così fornite caratteristiche speciali come il valore di un widget, le funzioni, gli alias, le variabili globali e così via.</para
></listitem>


<listitem
><para
>L'integrazione con &DCOP; permette alle finestre di dialogo create con &kommander; di controllare ed essere controllate nella loro interazione con le altre applicazioni di &kde;. È una funzionalità molto potente!</para
></listitem>

<listitem
><para
>I segnali e gli Slot sono un po' meno intuitivi per un nuovo utente. Stiamo revisionando per il prossimo rilascio la maniera in cui vengono gestiti. Offrono un limitato modello ad eventi per quando un pulsante viene premuto od un widget viene cambiato. Sono piuttosto potenti se combinati con <quote
>Population Text</quote
>.</para
></listitem>
</itemizedlist>

<para
>La caratteristica principale delle finestre di dialogo di &kommander; è che puoi collegare del testo (Testo &kommander;) ad un widget. Se hai, per esempio, @widget1 e @widget2 che sono delle caselle di testo puoi impostare &kommander; in maniera tale che visualizzi il loro contenuto inserendo @widgetText nella loro area Testo &kommander;. Potrai poi digitare "ciao" in @widget1 e "mondo" in @widget2. Un pulsante potrà poi avere la stringa "Il mio primo programma @widget1 @widget2 in &kommander;". Se lanci questa finestra di dialogo da un terminale stamperà "Il mio primo programma ciao mondo in &kommander;" </para>

<para
>Con qualche speranza stai colo cominciando a scoprire un barlume del potenziale di &kommander;. &kommander; permette un modello di progettazione molto più rapido per semplici applicazioni perché ti costringe più a pensare al linguaggio, ma ti riporta al molto più semplice e naturale modello a concetti. Nei computer il linguaggio è un mezzo per definire concetti e in quanto tale è uno strato tra i concetti e la loro implementazione che può quindi ostacolare il progresso con tutti i suoi dettagli. &kommander; cerca di minimizzare questo strato. </para>

<para
>&kommander;, inoltre, cerca di basarsi sugli standard. È costruito a partire dell'infrastruttura del Designer di &Qt; e crea dei file *.ui che rinomina in *.kmdr. Può facilmente importare qualsiasi widget di &kde; e ciò può avvenire senza dover ricompilare &kommander;, grazie ai plugin. </para>

<para
>L'altro fattore significativo di &kommander; è come indirizza le richieste del linguaggio. I linguaggi dei computer possono essere meravigliosi ma tendono ad avere i propri dogmi e i propri zeloti che cercano, spesso, di fornire un progresso alla progettazione &GUI; in un ambiente integrato di sviluppo. L'accettazione di questo tipo di &IDE; è ironicamente limitata dal numero di persone che vogliono adottare un nuovo linguaggio per guadagnare l'accesso alle funzionalità desiderate. È veramente poco ragionevole aspettarsi dalle persone il bisogno di passare attraverso una dozzina di linguaggi diversi per accedere ai diversi insiemi di funzionalità. Rimanendo neutrale ai linguaggi e permettendo ad una finestra di dialogo di &kommander; di essere estesa utilizzando qualsiasi linguaggio di scripting, &kommander; si colloca in una posizione unica per l'adozione a larga scala. Diversi linguaggi di scripting possono essere usati in una singola finestra di dialogo e altre persone possono prendere il controllo di una applicazione utilizzano un differente linguaggio rispetto a quello originale dello sviluppatore e gradualmente convertirla ed estenderla. Nuovi widget e funzionalità possono istantaneamente essere controllate da tutti i linguaggi disponibili. </para>

<para
>Speriamo che &kommander; inizi ad avere il supporto degli sviluppatori e il riconoscimento necessario per raggiungere il potenziale che vuole offre. Il nostro obiettivo finale è quello di rendere &kommander; utile agli utenti principianti nell'estendere ed unire le loro applicazioni. Contemporaneamente, dovrebbe diventare un buono strumento per creare prototipi. Inoltre apre le porte alle promesse dell'open source in una nuova maniera. Sappiamo che le tutte persone possono estendere i nostri programmi GPL, ma in pratica ben poche ne hanno la capacità. Con &kommander; questo numero vedrà un grandissimo incremento! Alcune applicazioni possono essere molto più logiche se pensate come applicazioni di &kommander;. Lo usiamo già in quelle aree di &quantaplus; dove vogliamo permettere l'estensibilità. </para>

<para
>Speriamo che ti diverta con &kommander;. Per favore, aiutaci con la segnalazione degli errori e con finestre di dialogo di esempio, così come con qualsiasi richiesta tu possa avere. Puoi unirti alla nostra lista per utenti per aiutare lo sviluppo di applicazioni con &kommander; su http://mail.kdewebdev.org/mailman/listinfo/kommander </para>

<para
>I più cordiali saluti dalla squadra di sviluppo di &kommander;!</para>

</chapter>
