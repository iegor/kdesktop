<!--Dear translator: please NEVER translate the id or anything inside the tags as they are needed in english by the application
     Thanks a lot in advance.-->
<chapter id="reference">
<title
>&kturtle;s &logo;-programmeringsreferens</title>
<para
>Det här är en referens till &kturtle;s &logo;. I det här kapitlet nämner vi kort alla <link linkend="different-instructions"
>olika instruktionstyper</link
>. Därefter förklaras alla <link linkend="commands"
>kommandon</link
> i tur och ordning. Härnäst följer förklaringar av <link linkend="containers"
>behållare</link
>, <link linkend="math"
>matematiska beräkningar</link
>, <link linkend="questions"
>frågor</link
> och <link linkend="controlling-execution"
>kommandon för att styra körningen</link
>. Till sist visas hur du kan skapa dina egna kommandon med <link linkend="learn"
>lär</link
>.</para>

<sect1 id="different-instructions">
<title
>Olika instruktionstyper</title>
<para
>Som alla språk har Logo olika typer av ord och symboler. Här förklaras kortfattat skillnaden mellan typerna.</para>

<sect2 id="command">
<title
>Kommandon</title>
<para
>Du talar om för sköldpaddan eller &kturtle; att göra något med kommandon. Vissa kommandon behöver indata, andra ger utdata. <screen
># framåt är ett kommando som behöver indata, i det här fallet talet 100:
framåt 100
</screen>
</para>
<para
>För en detaljerad översikt av alla kommandon som &kturtle; stöder, titta <link linkend="commands"
>här</link
>.</para>
</sect2>

<sect2 id="number">
<title
>Tal</title>
<para
>Troligen kan du redan en hel del om tal. Sättet som tal används i &kturtle; är inte särskilt annorlunda än ett talat språk eller matematik. </para>
<para
>Vi har de så kallade naturliga talen: <userinput
>0</userinput
>, <userinput
>1</userinput
>, <userinput
>2</userinput
>, <userinput
>3</userinput
>, <userinput
>4</userinput
>, <userinput
>5</userinput
>, etc. De negativa talen: <userinput
>-1</userinput
>, <userinput
>-2</userinput
>, <userinput
>-3</userinput
>, etc. Och talen med decimaler eller kommatalen, till exempel: <userinput
>0,1</userinput
>, <userinput
>3,14</userinput
>, <userinput
>33,3333</userinput
>, <userinput
>-5,05</userinput
>, <userinput
>-1,0</userinput
>. </para>
<para
>Tal kan användas i <link linkend="math"
>matematiska beräkningar</link
> och <link linkend="questions"
>frågor</link
>. De kan också placeras i <link linkend="containers"
>behållare</link
>.</para>
<para
>Tal är <glossterm
>färglagda</glossterm
> med blått i <link linkend="the-code-editor"
>kodeditorn</link
>.</para>
</sect2>

<sect2 id="string">
<title
>Strängar</title>
<para
>Först ett exempel: <screen>
skriv "Hej, jag är en sträng."
</screen
> I det här exemplet är <userinput
>skriv</userinput
> ett kommando, medan <userinput
>"Hej, jag är en sträng."</userinput
> är en sträng. Strängar börjar och slutar med tecknet <userinput
>"</userinput
>. Det är dessa tecken som gör att &kturtle; vet att det är en sträng.</para>
<para
>Strängar kan placeras i <link linkend="containers"
>behållare</link
>, men de kan inte användas i <link linkend="math"
>matematiska beräkningar</link
> eller i <link linkend="questions"
>frågor</link
>.</para>
<para
>Strängar <glossterm
>färgläggs</glossterm
> med mörkrött i <link linkend="the-code-editor"
>kodeditorn</link
>.</para>
</sect2>


<sect2 id="name">
<title
>Namn</title>
<para
>När du använder programspråket &logo; skapar du nya saker. Om du skriver ett program behöver du ofta <link linkend="containers"
>behållare</link
> och ibland behöver du <link linkend="learn"
>lär</link
> för att skapa nya kommandon. När du skapar en <link linkend="containers"
>behållare</link
> eller ett nytt kommando med <link linkend="learn"
>lär</link
> måste du ange ett namn.</para>
<para
>Du kan välja vilket namn som helst, under förutsättning att det inte redan har en betydelse. Du kan till exempel inte namnge en behållare <link linkend="forward"
>framåt</link
>, eftersom det namnet redan används för ett kommando, och redan har en betydelse. <screen>
# Här används framåt som en behållare, men det har redan en betydelse,
# alltså orsakar det här ett fel:
framåt = 20

# Det här fungerar:
framåt 20
</screen
> Namn kan bara innehålla bokstäver, siffror och understreck (_), och de måste börja med en bokstav. </para>
<para
>Läs gärna dokumentationen om <link linkend="containers"
>behållare</link
> och kommandot <link linkend="learn"
>lär</link
> för en bättre förklaring och fler exempel. </para>
</sect2>

<sect2 id="assignment">
<title
>Tilldelningar</title>
<para
>Tilldelning görs med tecknet <userinput
>=</userinput
>. I programmeringsspråk är det bättre att inte uttala ett ensamt <userinput
>=</userinput
> som 'är lika med' utan som 'blir'. Uttrycket 'är lika med' är lämpligare för <userinput
>==</userinput
>, som är en <link linkend="questions"
>fråga</link
>.</para>
<para
>Tilldelningar används i allmänhet av två orsaker: (1) för att lägga till innehåll i <link linkend="containers"
>behållare</link
>, och (2) för att ändra innehållet i en behållare. Till exempel: <screen
>x = 10
# Behållaren x innehåller nu talet 10.
W = "Min ålder är: "
# Behållaren W innehåller nu "Min ålder är: ".
# Det här skriver ut behållarna 'W' och 'x' på duken
skriv W + x
</screen>
</para>
<para
>För fler exempel, se avsnittet om <link linkend="containers"
>behållare</link
>.</para>
</sect2>

<sect2 id="math-symbols">
<title
>Matematiska symboler</title>
<para
>&kturtle; stöder alla grundläggande matematiska symboler: addera (<userinput
>+</userinput
>), subtrahera (<userinput
>-</userinput
>), multiplicera (<userinput
>*</userinput
>), dividera (<userinput
>/</userinput
>) och parenteser <userinput
>(</userinput
> och <userinput
>)</userinput
>.</para>
<para
>För en fullständig förklaring och fler exempel, se avsnittet om <link linkend="math"
>matematiska beräkningar</link
>.</para>
</sect2>

<sect2 id="question">
<title
>Frågor</title>
<para
>Vi kan ställa enkla frågor där svaret är 'sant' eller 'falskt'.</para>
<para
>Att använda frågor beskrivs utförligt i avsnittet om <link linkend="questions"
>frågor</link
>.</para>
</sect2>

<sect2 id="questions-glue">
<title
>Sammanbindningsord i frågor</title>
<para
>Frågor kan klistras ihop med så kallade 'sammanbindningsord'. Sammanbindningsorden är <userinput
>och</userinput
>, <userinput
>eller</userinput
>, och det speciella sammanbindningsordet <userinput
>inte</userinput
>.</para>
<para
>Att använda sammanbindningsord i frågor förklaras i avsnittet om <link linkend="question-glue"
>sammanbindningsord i frågor</link
>.</para>
</sect2>


<sect2 id="comment">
<title
>Kommentarer</title>
<para
>Kommentarer är rader som börjar med tecknet <userinput
>#</userinput
>. Till exempel: <screen>
# Det här är en kommentar!
skriv "Det här är inte en kommentar"
# Föregående rad är inte en kommentar, men den nästa raden är det:
# skriv "Det här är inte en kommentar"
</screen
> Vi kan lägga till kommentarer i koden, som vi själva och andra kan läsa. Kommentarer används för att: (1) lägga till en kort beskrivning av programmet, (2) förklara hur ett kodavsnitt fungerar om det är svårt att förstå, och (3) för att 'kommentera bort' kodrader som (tillfälligt) ska ignoreras (se sista raden i exemplet).</para>
<para
>Kommentarrader är <glossterm
>färglagda</glossterm
> med mörkgult i <link linkend="the-code-editor"
>kodeditorn</link
>.</para>
</sect2>

</sect1>


<sect1 id="commands">
<title
>Kommandon</title>
<para
>Du talar om för sköldpaddan eller &kturtle; att göra något med kommandon. Vissa kommandon behöver indata, andra ger utdata. I det här avsnittet förklarar vi alla kommandon som kan användas i &kturtle;. Observera att alla inbyggda kommandon som vi beskriver här är <glossterm
>färglagda</glossterm
> med mörkgrönt i <link linkend="the-code-editor"
>kodeditorn</link
>. Det hjälper dig att urskilja dem.</para>

<sect2 id="moving-the-turtle">
<title
>Flytta sköldpaddan</title>
<para
>Det finns flera kommandon för att flytta sköldpaddan över skärmen.</para>
  
<sect3 id="forward">
  <title
>framåt (fr)</title>
  <variablelist>
    <varlistentry
> 
      <term
>framåt</term>
      <listitem
><para
><screen
>framåt X</screen>
<userinput
>framåt</userinput
> flyttar sköldpaddan framåt X bildpunkter. När pennan är sänkt lämnar sköldpaddan ett spår. <userinput
>framåt</userinput
> kan förkortas <userinput
>fr</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="backward">
  <title
>bakåt (ba)</title>
  <variablelist>
    <varlistentry
>  
      <term
>bakåt</term>
      <listitem
><para
><screen
>bakåt X</screen>
<userinput
>bakåt</userinput
> flyttar sköldpaddan bakåt X bildpunkter. När pennan är sänkt lämnar sköldpaddan ett spår. <userinput
>bakåt</userinput
> kan förkortas <userinput
>ba</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="turnleft">
  <title
>svängvänster (sv)</title>
  <variablelist>
    <varlistentry
> 
      <term
>svängvänster</term>
      <listitem
><para
><screen
>svängvänster X</screen>
<userinput
>svängvänster</userinput
> talar om för sköldpaddan att svänga X grader åt vänster. <userinput
>svängvänster</userinput
> kan förkortas till <userinput
>sv</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="turnright">
  <title
>svänghöger (sh)</title>
  <variablelist>
    <varlistentry
> 
      <term
>svänghöger</term>
      <listitem
><para
><screen
>svänghöger X</screen>
<userinput
>svänghöger</userinput
> talar om för sköldpaddan att svänga X grader åt höger. <userinput
>svänghöger</userinput
> kan förkortas till <userinput
>sh</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="direction">
  <title
>riktning (ri)</title>
  <variablelist>
    <varlistentry
> 
      <term
>riktning</term>
      <listitem
><para
><screen
>riktning X</screen>
<userinput
>riktning</userinput
> ställer in sköldpaddans riktning till X grader från noll, och är på så sätt inte relativ till sköldpaddans tidigare riktning. <userinput
>riktning</userinput
> kan förkortas till <userinput
>ri</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="center">
  <title
>mitten</title>
  <variablelist>
    <varlistentry
> 
      <term
>mitten</term>
      <listitem
><para
><screen
>mitten</screen>
<userinput
>mitten</userinput
> flyttar sköldpaddan till dukens mitt.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="go">
  <title
>gå</title>
  <variablelist>
    <varlistentry
> 
      <term
>gå</term>
      <listitem
><para
><screen
>gå X,Y</screen>
<userinput
>gå</userinput
> talar om för sköldpaddan att gå till en viss plats på duken. Den platsen är X <glossterm linkend="pixels"
>bildpunkter</glossterm
> från dukens vänsterkant och Y <glossterm linkend="pixels"
>bildpunkter</glossterm
> från dukens överkant. Observera att sköldpaddan inte ritar någon linje när kommandot <userinput
>gå</userinput
> används.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="gox">
  <title
>gåx</title>
  <variablelist>
    <varlistentry
> 
      <term
>gåx</term>
      <listitem
><para
><screen
>gåx X</screen>
<userinput
>gåx</userinput
> gör att sköldpaddan flyttas X <glossterm linkend="pixels"
>bildpunkter</glossterm
> från dukens vänsterkant, medan den bibehåller samma höjd.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="goy">
  <title
>gåy</title>
  <variablelist>
    <varlistentry
> 
      <term
>gåy</term>
      <listitem
><para
><screen
>gåy Y</screen>
<userinput
>gåy</userinput
> gör att sköldpaddan flyttas Y <glossterm linkend="pixels"
>bildpunkter</glossterm
> från dukens överkant, medan den behåller samma avstånd från dukens vänsterkant.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="pen">
<title
>Sköldpaddan har en penna</title>
<para
>Sköldpaddan har en penna som ritar en linje medan sköldpaddan rör sig. Det finns några få kommandon att styra pennan. I det här avsnittet förklarar vi dessa kommandon.</para>
<sect3 id="penup">
  <title
>höjpenna (hp)</title>
  <variablelist>
    <varlistentry
> 
      <term
>höjpenna</term>
      <listitem
><para
><screen
>höjpenna</screen>
<userinput
>höjpenna</userinput
> lyfter pennan från duken. När pennan är <quote
>höjd</quote
>, ritas ingen linje när sköldpaddan rör sig. Se också <userinput
>sänkpenna</userinput
>. <userinput
>höjpenna</userinput
> kan förkortas till <userinput
>hp</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="pendown">
  <title
>sänkpenna (sp)</title>
  <variablelist>
    <varlistentry
> 
      <term
>sänkpenna</term>
      <listitem
><para
><screen
>sänkpenna</screen>
<userinput
>sänkpenna</userinput
> sänker ner pennan på duken. När pennan är <quote
>sänkt</quote
>, ritas en linje när sköldpaddan rör sig. Se också <userinput
>höjpenna</userinput
>. <userinput
>sänkpenna</userinput
> kan förkortas till <userinput
>sp</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="setpenwidth">
  <title
>pennbredd (pb)</title>
  <variablelist>
    <varlistentry
> 
      <term
>pennbredd</term>
      <listitem
><para
><screen
>pennbredd X</screen>
<userinput
>pennbredd</userinput
> ställer in pennans bredd (linjebredden) till X <glossterm linkend="pixels"
>bildpunkter</glossterm
>. <userinput
>pennbredd</userinput
> kan förkortas till <userinput
>pb</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="setfgcolor">
  <title
>pennfärg (pf)</title>
  <variablelist>
    <varlistentry
> 
      <term
>pennfärg</term>
      <listitem
><para
><screen
>pennfärg R,G,B</screen>
<userinput
>pennfärg</userinput
> ställer in pennans färg. <userinput
>pennfärg</userinput
> behöver en <glossterm linkend="rgb"
>RGB-kombination</glossterm
> som indata. <userinput
>pennfärg</userinput
> kan förkortas till <userinput
>pf</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="canvas">
<title
>Kommandon för att hantera duken</title>
<para
>Det finns flera kommandon för att hantera duken.</para>
<sect3 id="resizecanvas">
  <title
>dukstorlek (ds)</title>
  <variablelist>
    <varlistentry>
      <term
>dukstorlek</term>
      <listitem
><para
><screen
>dukstorlek X,Y</screen>
Med kommandot <userinput
>dukstorlek</userinput
> kan du ange dukens storlek. Det behöver X och Y som indata, där X är den nya dukbredden i <glossterm linkend="pixels"
>bildpunkter</glossterm
> och Y är den nya dukhöjden i <glossterm linkend="pixels"
>bildpunkter</glossterm
>. <userinput
>dukstorlek</userinput
> kan förkortas till <userinput
>ds</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="setbgcolor">
  <title
>dukfärg (df)</title>
  <variablelist>
    <varlistentry
> 
      <term
>dukfärg</term>
      <listitem
><para
><screen
>dukfärg R,G,B</screen>
<userinput
>dukfärg</userinput
> anger dukens färg. <userinput
>dukfärg</userinput
> behöver en <glossterm linkend="rgb"
>RGB-kombination</glossterm
> som indata. <userinput
>dukfärg</userinput
> kan förkortas till <userinput
>df</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="wrapon">
  <title
>rundpå</title>
  <variablelist>
    <varlistentry
> 
      <term
>rundpå</term>
      <listitem
><para
><screen
>rundpå</screen>
Med kommandot <userinput
>rundpå</userinput
> kan du <glossterm linkend="wrapping"
>runda</glossterm
> duken. Se ordlistan om du vill veta vad <glossterm linkend="wrapping"
>runda</glossterm
> betyder.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="wrapoff">
  <title
>rundav</title>
  <variablelist>
    <varlistentry
> 
      <term
>rundav</term>
      <listitem
><para
><screen
>rundav</screen>
Med kommandot <userinput
>rundav</userinput
> kan du göra motsatsen till att <glossterm linkend="wrapping"
>runda</glossterm
> duken: Det betyder att sköldpaddan kan flyttas utanför duken och kan 'försvinna'. Se ordlistan om du vill veta vad <glossterm linkend="wrapping"
>runda</glossterm
> betyder.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="clean">
<title
>Kommandon för att städa</title>
<para
>Det finns två kommandon för att städa duken efter du har ställt till den.</para>
<sect3 id="clear">
  <title
>rensa (ren)</title>
  <variablelist>
    <varlistentry
> 
      <term
>rensa</term>
      <listitem
><para
><screen
>rensa</screen>
Med <userinput
>rensa</userinput
> suddar du allt som ritats på duken. Allt annat blir kvar: sköldpaddans position och vinkel, dukfärgen, sköldpaddans synlighet och dukstorleken. <userinput
>rensa</userinput
> kan förkortas <userinput
>ren</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="reset">
  <title
>återställ</title>
  <variablelist>
    <varlistentry
> 
      <term
>återställ</term>
      <listitem
><para
><screen
>återställ</screen>
<userinput
>återställ</userinput
> städar mycket noggrannare än kommandot <userinput
>rensa</userinput
>. Efter kommandot <userinput
>återställ</userinput
> är allt som det var precis när du startat &kturtle;. Sköldpaddan är placerad i mitten av skärmen, dukfärgen är vit och sköldpaddan ritar en svart linje på duken.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="sprites">
<title
>Sköldpaddan är en sprite</title>
<para
>Först en kort förklaring av vad en sprite är: En sprite är en liten bild som kan flyttas omkring på skärmen, som vi ofta ser i datorspel. Vår sköldpadda är alltså en sprite. För ytterligare information se ordförklaringen av <glossterm linkend="sprites"
>sprite</glossterm
>. </para>
<para
>Härnäst hittar du en fullständig översikt av alla kommandon som arbetar med en sprite.</para>
<para
>(Kturtles nuvarande version stöder ännu inte användning av någon annan sprite än sköldpaddan. I framtida versioner kommer du att kunna ändra sköldpaddan till något som du själv skapat.)</para>
<sect3 id="spriteshow">
  <title
>visa</title>
  <variablelist>
    <varlistentry
> 
      <term
>visa (vi)</term>
      <listitem
><para
><screen
>visa</screen>
<userinput
>visa</userinput
> gör sköldpaddan synlig igen efter den har gömts. <userinput
>visa</userinput
> kan förkortas till <userinput
>vi</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="spritehide">
  <title
>göm (gö)</title>
  <variablelist>
    <varlistentry
> 
      <term
>göm</term>
      <listitem
><para
><screen
>göm</screen>
<userinput
>göm</userinput
> gömmer sköldpaddan. Det kan användas om sköldpaddan inte passar in i bilden. <userinput
>göm</userinput
> kan förkortas <userinput
>gö</userinput
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="writing">
<title
>Kan sköldpaddorna skriva?</title>
<para
>Svaret är <quote
>ja</quote
>. Sköldpaddan kan skriva. Den skriver nästan vad som helst som du talar om för den att skriva.</para>
<sect3 id="print">
  <title
>skriv</title>
  <variablelist>
    <varlistentry
> 
      <term
>skriv</term>
      <listitem
><para
><screen
>skriv X</screen>
Kommandot <userinput
>skriv</userinput
> används för att tala om för sköldpaddan att skriva någonting på duken. <userinput
>skriv</userinput
> behöver tal och strängar som indata. Du kan använda <userinput
>skriv</userinput
> för att skriva ut olika tal och strängar med symbolen '+'. Här är ett litet exempel: <screen
>år = 2003
upphovsman = "Cies"
skriv upphovsman + " startade projektet Kturtle " + år + " och gillar ännu att jobba med det!"
</screen>
      </para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="fontsize">
  <title
>teckenstorlek</title>
  <variablelist>
    <varlistentry
> 
      <term
>teckenstorlek</term>
      <listitem
><para
><screen
>teckenstorlek X</screen>
<userinput
>teckenstorlek</userinput
> anger storlek på teckensnittet som används av <userinput
>skriv</userinput
>. <userinput
>teckenstorlek</userinput
> behöver indata som ska vara ett tal. Storleken ställs in i <glossterm linkend="pixels"
>bildpunkter</glossterm
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

<sect2 id="random">
<title
>Ett kommando som rullar tärningar åt dig</title>
<para
>Det finns ett kommando som rullar tärningar åt dig. Det kallas <userinput
>slump</userinput
>, och är mycket användbart för att få oförutsedda resultat.</para>
  <variablelist>
    <varlistentry
> 
      <term
>slump</term>
      <listitem
><para
><screen
>slump X,Y</screen>
<userinput
>slump</userinput
> är ett kommando som kräver indata och ger utdata. Två tal krävs som indata, det första (X) anger minimal utdata och det andra (Y) anger maximal. Utdata är ett slumpmässigt valt tal som är större än eller lika med minimum och mindre än eller lika med maximum. Här är ett litet exempel: <screen>
upprepa 500 [
  x = slump 1,20
  framåt x
  svängvänster 10 - x
]
</screen
> Med kommandot slump kan du lägga till en viss mängd kaos i programmet.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="dialogs">
<title
>Inmatning och återmatning via dialogrutor</title>
<para
>En dialogruta är ett litet fönster som dyker upp och tillhandahåller återmatning eller frågar efter inmatning. &kturtle; har två kommandon för dialogrutor, närmare bestämt <userinput
>meddelande</userinput
> och <userinput
>indatafönster</userinput
>.</para>
<sect3 id="message">
  <title
>meddelande</title>
  <variablelist>
    <varlistentry
> 
      <term
>meddelande</term>
      <listitem
><para
><screen
>meddelande X</screen>
Kommandot <userinput
>meddelande</userinput
> har en <link linkend="string"
>sträng</link
> som indata. Det visar en dialogruta som innehåller texten från <link linkend="string"
>strängen</link
>. <screen
>år = 2003
upphovsman = "Cies"
skriv upphovsman + " startade projektet Kturtle " + år + " och gillar ännu att jobba med det!"
</screen>
      </para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
<sect3 id="inputwindow">
  <title
>indatafönster</title>
  <variablelist>
    <varlistentry
> 
      <term
>indatafönster</term>
      <listitem
><para
><screen
>indatafönster X</screen>
Kommandot <userinput
>indatafönster</userinput
> har en <link linkend="string"
>sträng</link
> som indata. Det visar en dialogruta som innehåller texten från strängen, precis som <link linkend="message"
>meddelande</link
>, men dessutom lägger det till ett inmatningsfält i dialogrutan. Användaren kan skriva in ett <link linkend="number"
>tal</link
> eller en <link linkend="string"
>sträng</link
> via inmatningsfältet, som kan lagras i en <link linkend="containers"
>behållare</link
>. Till exempel <screen>
in = indatafönster "Hur gammal är du?"
ut = 2003 - in
skriv "År 2003 var du " + ut + " år gammal vid något tillfälle."
</screen
> Om en användare avbryter inmatningsdialogrutan, eller inte skriver in någonting alls, töms <link linkend="containers"
>behållaren</link
>.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect3>
</sect2>

</sect1>



<sect1 id="containers">
<title
>Behållare</title>
<para
>Behållare är bokstäver eller ord som kan användas av programmeraren för att lagra ett tal eller text. Behållare som innehåller ett tal kallas <link linkend="variables"
>variabler</link
>, medan behållare som innehåller text kallas <link linkend="string"
>strängar</link
>.</para>

<para
>Behållare som inte används innehåller ingenting. Ett exempel: <screen>
skriv N
</screen
> Detta skriver ingenting. Om vi försöker utföra <link linkend="math"
>beräkningar</link
> med tomma behållare får vi fel. </para>

<sect2 id="variables">
<title
>Variabler: talbehållare</title>
<para
>Låt oss börja med ett exempel: <screen>
x = 3
skriv x
</screen
> På första raden görs bokstaven <userinput
>x</userinput
> till en variabel (talbehållare). Som du ser sätts värdet på variabeln <userinput
>x</userinput
> till 3. På andra raden skrivs värdet ut.</para>
<para
>Observera att om vi ville skriva ut ett <quote
>x</quote
>, skulle vi ha skrivit <screen
>skriv "x"
</screen>
</para>
<para
>Det var enkelt. Nu ett lite svårare exempel: <screen>
A = 2004
B = 25
C = A + B

# nästa kommando skriver "2029"
skriv C
bakåt 30
# nästa kommando skriver "2004 plus 25"
skriv A + " plus " + B
bakåt 30
# nästa kommando skriver "1979"
skriv A - B
</screen
> På de första två raderna sätts variablerna <userinput
>A</userinput
> och <userinput
>B</userinput
> till 2004 och 25. På den tredje raden sätts variabeln <userinput
>C</userinput
> till <userinput
>A + B</userinput
>, vilket är 2029. Resten av exemplet består av tre kommandon <userinput
>skriv</userinput
> med <userinput
>bakåt 30</userinput
> mellan. Kommandot <userinput
>bakåt 30</userinput
> finns där för att vara säker på att all utskrift är på en ny rad. I exemplet ser du också att variabler kan användas i <link linkend="math"
>matematiska beräkningar</link
>.</para>
</sect2>

<sect2 id="strings">
<title
>Behållare som innehåller text (strängar)</title>
<para
>I programkod inleds och avslutas vanlig text med citationstecken. Som vi redan har sett: <screen>
skriv "Hej, programmerare!"
</screen
> Den vanliga texten avgränsas med citationstecken. Denna vanliga text kallar vi en <link linkend="strings"
>sträng</link
>.</para>
<para
>Strängar kan också lagras i <link linkend="containers"
>behållare</link
> precis som <link linkend="number"
>tal</link
>. Strängar är mycket lika variabler. Den största skillnaden är att de innehåller text istället för tal. Av den orsaken kan inte strängar användas i <link linkend="math"
>matematiska beräkningar</link
> och <link linkend="questions"
>frågor</link
>. Ett exempel på användning av strängar: <screen>
x = "Hej "
namn = indatafönster "Skriv in ditt namn..."
skriv x + namn + ", hur står det till?"
</screen
> På första raden sätts strängen <userinput
>x</userinput
> till <quote
>Hej </quote
>. På andra raden sätts strängen <userinput
>namn</userinput
> till utdata från kommandot <userinput
>indatafönster</userinput
>. På tredje raden skriver programmet ut en sammanslagning av de tre strängarna på duken.</para>
<para
>Programmet ber dig skriva in ditt namn. Om du till exempel skriver in namnet <quote
>Anna</quote
>, skriver programmet ut <quote
> Hej Anna, hur står det till?</quote
>. Observera att plus (+) är den enda matematiska symbolen som du kan använda med strängar.</para>
</sect2>
</sect1>

<sect1 id="math">
<title
>Kan sköldpaddan räkna?</title>
<para
>Ja, Kturtle räknar åt dig. Du kan addera (+), subtrahera (-), multiplicera (*) och dividera (/). Detta är ett exempel där vi använder allihop: <screen>
a = 20 - 5
b = 15 * 2
c = 30 / 30
d = 1 + 1
skriv "a: "+a+", b: "+b+", c: "+c+", d: "+d 
</screen
> Vet du vilka värden som a, b, c och d har? Observera användningen av <link linkend="assignment"
>tilldelningssymbolen</link
> <userinput
>=</userinput
>.</para>
<para
>Om du bara vill göra en enkel beräkning kan du skriva något som liknar detta: <screen
>skriv 2004-12
</screen
></para>
<para
>Nu ett exempel med parenteser: <screen>
skriv ( ( 20 - 5 ) * 2 / 30 ) + 1
</screen
> Det som är mellan parenteser räknas ut först. I det här exemplet beräknas 20-5, och därefter multipliceras det med 2, divideras med 30 och därefter läggs 1 till (vilket ger 2).</para>
</sect1>

<sect1 id="questions">
<title
>Ställa frågor, få svar ...</title>
<para
>Kommandona <link linkend="if"
><userinput
>om</userinput
></link
> och <link linkend="while"
><userinput
>medan</userinput
></link
> <link linkend="controlling-execution"
>styr körningen</link
> som diskuteras i nästa avsnitt. I det här avsnittet använder vi kommandot <link linkend="if"
><userinput
>om</userinput
></link
> för att förklara frågor.</para>
<sect2 id="q">
<title
>Frågor</title>
<para
>Ett enkelt exempel på en fråga: <screen>
x = 6
om x &gt; 5 [
  skriv "Hej"
]
</screen
> I det här exemplet är frågan <userinput
>x &gt; 5</userinput
>. Om svaret på frågan är 'sant', utförs koden mellan hakparenteserna. Frågor är en viktig del av programmering, och används ofta tillsammans med kommandon som <link linkend="controlling-execution"
>styr körningen</link
>, som <link linkend="if"
><userinput
>om</userinput
></link
>. Alla tal och <link linkend="variables"
>variabler</link
> (talbehållare) kan jämföras med varandra med frågor.</para>
<para
>Här är alla möjliga frågor: <table>
<title
>Typer av frågor</title>
<tgroup cols="3">
<tbody>
<row>
<entry
><userinput
>a == b</userinput
></entry>
<entry
>är lika med</entry>
<entry
>svaret är <quote
>sant</quote
> om <userinput
>a</userinput
> är lika med <userinput
>b</userinput
></entry>
</row>
<row>
<entry
><userinput
>a != b</userinput
></entry>
<entry
>inte lika med</entry>
<entry
>svaret är <quote
>sant</quote
> om <userinput
>a</userinput
> inte är lika med <userinput
>b</userinput
></entry>
</row>
<row>
<entry
><userinput
>a &gt; b</userinput
></entry>
<entry
>större än</entry>
<entry
>svaret är <quote
>sant</quote
> om <userinput
>a</userinput
> är större än <userinput
>b</userinput
></entry>
</row>
<row>
<entry
><userinput
>a &lt; b</userinput
></entry>
<entry
>mindre än</entry>
<entry
>svaret är <quote
>sant</quote
> om <userinput
>a</userinput
> är mindre än <userinput
>b</userinput
></entry>
</row>
<row>
<entry
><userinput
>a &gt;= b</userinput
></entry>
<entry
>större än eller lika med</entry>
<entry
>svaret är <quote
>sant</quote
> om <userinput
>a</userinput
> är större än eller lika med <userinput
>b</userinput
></entry>
</row>
<row>
<entry
><userinput
>a &lt;= b</userinput
></entry>
<entry
>mindre än eller lika med</entry>
<entry
>svaret är <quote
>sant</quote
> om <userinput
>a</userinput
> är mindre än eller lika med <userinput
>b</userinput
></entry>
</row>
</tbody>
</tgroup>
</table>
</para>
<para
>Frågor är <glossterm
>färglagda</glossterm
> med ljusblått i <link linkend="the-code-editor"
>kodeditorn</link
>.</para
> 
</sect2>

<sect2 id="question-glue">
<title
>Sammanbindning av frågor</title>
<para
>Sammanbindningsord i frågor gör det möjligt att klistra ihop frågor till en stor fråga. <screen>
a = 1
b = 5
om a &lt; 5 och b == 5 [
  skriv "Hej"
]
</screen
> I det här exemplet används sammanbindningsordet <userinput
>och</userinput
> för att klistra ihop två frågor (<userinput
>a &lt; 5</userinput
>, <userinput
>b == 5</userinput
>). Om en sida av <userinput
>och</userinput
> skulle ge svaret <quote
>falskt</quote
>, skulle svaret på hela frågan vara <quote
>falskt</quote
>, eftersom med sammanbindningsordet <userinput
>och</userinput
> måste båda sidor vara <quote
>sanna</quote
> för att svaret ska vara <quote
>sant</quote
>.</para>

<para
>Här är en grov översikt, medan en mer detaljerad förklaring följer nedan: <table>
<title
>Sammanbindningsord i frågor</title>
<tgroup cols="2">
<tbody>
<row>
<entry
><userinput
>och</userinput
></entry>
<entry
>Båda sidor måste vara 'sanna' för att svaret ska vara 'sant'</entry>
</row>
<row>
<entry
><userinput
>eller</userinput
></entry>
<entry
>Om en av sidorna är 'sann' är svaret 'sant'</entry>
</row>
<row>
<entry
><userinput
>inte</userinput
></entry>
<entry
>Specialfall: fungerar bara för en fråga. Ändrar 'sann' till 'falsk' och 'falsk' till 'sann'.</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
<para
>Sammanbindningsord i frågor är <glossterm
>färglagda</glossterm
> med violett i <link linkend="the-code-editor"
>kodeditorn</link
>.</para>

<sect3 id="and">
<title
>och</title>
<para
>När två frågor sammanbinds med <userinput
>och</userinput
> måste båda sidorna om <userinput
>och</userinput
> vara 'sanna' för att resultatet ska vara 'sant'. Ett exempel: <screen>
a = 1
b = 5
om ((a &lt; 10) och (b == 5)) och (a &lt; b) [
  skriv "Hej"
]
</screen
> I det här exemplet ser du en sammanbunden fråga i sin tur sammanbunden med en annan fråga.</para>
</sect3>

<sect3 id="or">
<title
>eller</title>
<para
>Om en av de två frågorna som sammanbinds med <userinput
>eller</userinput
> är 'sann' är resultatet 'sant'. Ett exempel: <screen>
a = 1
b = 5
om ((a &lt; 10) eller (b == 10)) eller (a == 0) [
  skriv "Hej"
]
</screen
> I det här exemplet ser du en sammanbunden fråga i sin tur sammanbunden med en annan fråga.</para>
</sect3>

<sect3 id="not">
<title
>inte</title>
<para
><userinput
>inte</userinput
> är ett speciellt sammanbindningsord i frågor eftersom det bara fungerar med en fråga itaget. <userinput
>inte</userinput
> ändrar 'sant' till 'falskt' och 'falskt' till 'sant'. Ett exempel: <screen>
a = 1
b = 5
om inte ((a &lt; 10) och (b == 5)) [
  skriv "Hej"
]
annars
[
  skriv "Hej då"
]
</screen
> I det här exemplet är den sammanbundna frågan 'sann', men <userinput
>inte</userinput
> ändrar den till 'falsk'. Alltså skrivs <userinput
>"Hej då"</userinput
> ut på <link linkend="the-canvas"
>duken</link
>.</para>
</sect3>

</sect2>

</sect1>

<sect1 id="controlling-execution">
<title
>Styra körning</title>
<para
>Styrning av körningen gör det möjligt för dig att styra körningen, precis som namnet anger.</para>
<para
>Kommandon för att styra körningen <glossterm
>färgläggs</glossterm
> med mörkgrönt och fetstil. Hakparenteserna som oftast används tillsammans med kommandon för att styra körningen <glossterm
>färgläggs</glossterm
> med ljusgrönt.</para>

<sect2 id="wait">
<title
>Låta sköldpaddan vänta</title>
<para
>Om du försökt programmera en del med &kturtle; kanske du märker att sköldpaddan kan vara mycket snabb när den ritar. Det här kommandot gör att sköldpaddan väntar en angiven tid.</para>
  <variablelist>
    <varlistentry>
      <term
>vänta</term>
      <listitem
><para
><screen
>vänta X</screen>
<userinput
>vänta</userinput
> låter sköldpaddan vänta X sekunder. <screen>
upprepa 36 [
  framåt 5
  svänghöger 10
  vänta 0.5
]
</screen
> Den här koden ritar en cirkel, men sköldpaddan väntar en halv sekund mellan varje steg. Det ger intrycket av en sköldpadda som rör sig långsamt.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="if">
<title
>Kör "om"</title>
  <variablelist>
    <varlistentry>
      <term
>om</term>
      <listitem
><para
><screen
>om <link linkend="questions"
>fråga</link
> [ ... ]</screen>
Koden som ersätter '...' utförs bara <userinput
>om</userinput
> svaret på <link linkend="questions"
>frågan</link
> är 'sant'. Läs gärna om frågor i avsnittet om <link linkend="questions"
>frågor</link
> för mer information. <screen>
x = 6
om x &gt; 5 [
  skriv "x är större än fem!"
]
</screen
> På den första raden sätts <userinput
>x</userinput
> till 6. På den andra raden ställs <link linkend="questions"
>frågan</link
> <userinput
>x &gt; 5</userinput
>. Eftersom svaret på frågan är 'sant', tillåter kommandot för styrning av körningen <userinput
>om</userinput
> att koden mellan hakparenteserna utförs.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="while">
<title
>En "medan" snurra</title>
  <variablelist>
    <varlistentry>
      <term
>medan</term>
      <listitem
><para
><screen
>medan <link linkend="questions"
>fråga</link
> [ ... ]</screen>
Kommandot för styrning av körningen <userinput
>medan</userinput
> liknar <link linkend="if"
><userinput
>om</userinput
></link
> en hel del. Skillnaden är att <userinput
>medan</userinput
> upprepar koden mellan hakparenteserna, ända till svaret på <link linkend="questions"
>frågan</link
> blir 'falskt'. <screen>
x = 1
medan x &lt; 5 [
  framåt 10
  vänta 1
  x = x + 1
]
</screen
> På den första raden sätts <userinput
>x</userinput
> till 1. På den andra raden ställs <link linkend="questions"
>frågan</link
> <userinput
>x &lt; 5</userinput
>. Eftersom svaret på frågan är <quote
>sant</quote
> utförs kommandot <userinput
>medan</userinput
> för styrning av körningen koden mellan hakparenteserna, ända till svaret på <link linkend="questions"
>frågan</link
> blir <quote
>falskt</quote
>. I det här fallet utförs koden mellan hakparenteserna 4 gånger, eftersom varje gång den femte raden utförs blir <userinput
>x</userinput
> ett större.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="else">
<title
>Om inte, med andra ord "annars"</title>
  <variablelist>
    <varlistentry>
      <term
>annars</term>
      <listitem
><para
><screen
>om fråga [...] annars [ ... ]</screen>
<userinput
>annars</userinput
> kan användas som tillägg till kommandot för styrning av körningen <link linkend="if"
><userinput
>om</userinput
></link
>. Koden mellan hakparenteserna efter <userinput
>annars</userinput
> utförs bara om svaret på <link linkend="questions"
>frågan</link
> som ställs är <quote
>falskt</quote
>. <screen>
x = 4
om x &gt; 5 [
  skriv "x är större än fem!"
] annars [
  skriv "x är mindre än sex!"
]
</screen
> <link linkend="questions"
>Frågan</link
> kontrollerar om <userinput
>x</userinput
> är större än 5. Eftersom <userinput
>x</userinput
> sätts till 4 på första raden är svaret på frågan <quote
>falskt</quote
>. Det betyder att koden mellan hakparenteserna efter <userinput
>annars</userinput
> utförs.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

<sect2 id="for">
<title
>En "för" snurra, en räknande snurra</title>
  <variablelist>
    <varlistentry>
      <term
>för</term>
      <listitem
><para
><screen
>för <userinput
>startpunkt</userinput
> till <userinput
>slutpunkt</userinput
> [ ... ]</screen>
Snurran <userinput
>för</userinput
> är en 'räknande snurra'. Den håller räkning åt dig. <screen>
för x = 1 till 10 [
  skriv x * 7
  framåt 15
]
</screen
> Varje gång koden mellan hakparenteserna utförs är <userinput
>x</userinput
> ett större, till x når värdet 10. Koden mellan hakparenteserna skriver ut <userinput
>x</userinput
> multiplicerat med 7. Efter programmet har kört färdigt, ser du sjuans multiplikationstabell på duken.</para
></listitem>
    </varlistentry>
  </variablelist>
</sect2>

</sect1>


<sect1 id="learn">
<title
>Skapa dina egna kommandon med <quote
>lär</quote
></title>
<para
><userinput
>lär</userinput
> är ett mycket speciellt kommando, eftersom det används för att skapa dina egna kommandon. Kommandot som du skapar kan ha <glossterm linkend="input-output"
>indata</glossterm
> och returnera <glossterm linkend="input-output"
>utdata</glossterm
>. Låt oss ta en titt på hur ett nytt kommando skapas. <screen>
lär cirkel x [
  upprepa 36 [
    framåt x
    svängvänster 10
  ]
]
</screen
> Det nya kommandot kallas <userinput
>cirkel</userinput
>. <userinput
>cirkel</userinput
> har <glossterm linkend="input-output"
>indata</glossterm
>, ett tal som anger cirkelns storlek. <userinput
>cirkel</userinput
> returnerar ingen <glossterm linkend="input-output"
>utdata</glossterm
>. Kommandot <userinput
>cirkel</userinput
> kan nu användas som ett vanligt kommando i resten av koden. Se följande exempel: <screen
>lär cirkel x [ 
  upprepa 36 [ 
    framåt x 
    svängvänster 10 
  ] 
] 

gå 30,30 
cirkel 20

gå 40,40 
cirkel 50  
</screen>
</para>
<para
>I nästa exempel skapas ett kommando som returnerar ett värde. <screen>
återställ

lär multipliceraMedSigSjälv n [
  r = n * 1
  r = n * n
  returnera r
]
tal = indatafönster "Ange ett tal och klicka på Ok"
skriv tal + " multiplicerat med sig själv är: " + multipliceraMedSigSjälv tal
</screen
> I det här exemplet skapas ett nytt kommando som heter <userinput
>multipliceraMedSigSjälv</userinput
>. Indata till kommandot multipliceras med sig själv och returneras med kommandot <anchor id="return"/><userinput
>returnera</userinput
>. Kommandot <userinput
>returnera</userinput
> är sättet som används för att ge utdata från en funktion som du skapat själv. </para>
</sect1>

</chapter>
