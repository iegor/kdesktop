<chapter id="kdevelop-scripting">

<chapterinfo>
  <authorgroup>
    <author
><firstname
>Ian</firstname
><surname
>Geiser</surname
></author>
    <!-- ROLES_OF_TRANSLATORS -->
  </authorgroup>
</chapterinfo>

<title
>Använda skript med KDevelop</title>

<sect1 id="running-scripts">
<title
>Köra skript</title>
<para
>För att komma åt ett skript som är tillgängligt i &kdevelop;, använd menyn <menuchoice
><guimenu
>Verktyg</guimenu
> <guimenuitem
>Skript</guimenuitem
></menuchoice
>. Om det inte finns någon sådant menyalternativ finns inga tillgängliga skript installerade i KDevelop. </para>
</sect1>

<sect1 id="adding-scripts">
<title
>Lägga till skript</title>
<para
>När du väl har lagt till Kskript-stöd i ditt värdprogram är det lika lätt att lägga till skript. Skripten består av två delar, en skrivbordsfil som innehåller metadata om skriptet och själva skriptet. Den här infallsvinkeln användes av säkerhets- och enkelhetsskäl. Skrivbordsfilen tillhandahåller metainformation för menyer och skripttypen. Det förhindrar att värdprogrammet måste inspektera varje skript vid laddning. Ett exempel på filen visas nedan: </para>
<para
>Ovanstående exempel demonstrerar huvuddelarna som Kskript tittar efter. Den första posten, "Name", är namnet som visas för användaren i värdprogrammet och "Comment" visas oftast som verktygstips. Den viktigaste posten är "Type". Den används för att välja riktigt skriptgränssnitt för att köra skriptet. För närvarande är "ShellScript/bash" och "JavaScript/kjs" tillgängliga i KDE. Nästa steg är att skapa själva skriptet. För exemplet ovan är skripttypen som används "ShellScript/bash". Skalskriptgränssnittet tillhandahåller några saker åt utvecklaren. Det första elementet är värdprogrammets DCOP-identifikation. Den skickas som första argumentet till skriptet. Det betyder att var som helst i skriptet returnerar värdet "$1" värdprogrammets DCOP-identifikation. Ett exempel på ett skalskript visas nedan: </para>

<para
>Skriptet är mycket enkelt och kör bara ett kommando och sätter texten i det första dokumentet till utmatningen från "ls -l".</para>

<para
>Ett av de mest användbara verktygen när skript för program utvecklas, är programmet KDCOP.</para>
<figure id="screenshot-kdcop" float="1">
  <title
>KDCOP DCOP-bläddringsgränssnitt i &kdevelop;</title>
  <mediaobject>
    <imageobject
><imagedata fileref="kdcop_browsing.png"/></imageobject>
  </mediaobject>
</figure>

<para
>KDCOP-verktyget låter skriptutvecklare bläddra och avlusa värdprogrammets nuvarande gränssnitt. KDCOP tillhandahåller också en trevlig funktion som låter användare markera en metod och dra nuvarande kod till en texteditor. Det förenklar användning för de som inte hajar DCOP-metoderna i värdspråket. För närvarande stöder KDCOP metoderna KJSEmbed, Python och Unix-skal för att komma åt DCOP.</para>

<para
>När skriptet väl är färdigt, är det klart att installeras. Programutvecklare bör dokumentera platsen som avsöks efter skript. I ovanstående exempel för Kate, är skripten placerade i "$KDEDIRS/share/apps/kate/scripts".</para>

<figure id="screenshot-scripts" float="1">
  <title
>&kdevelop;-skript i filsystemet</title>
  <mediaobject>
    <imageobject
><imagedata fileref="script_location.png"/></imageobject>
  </mediaobject>
</figure>

<para
>Skriptets skrivbordsfil, och tillhörande skript ska vara i samma katalog. För skriptutvecklare rekommenderas också att alla andra skriptresurser som UI-filer eller datafiler också finns i skriptkatalogen. I ovanstående exempel visas skriptet i menyn Verktyg -> KDE-skript. En viktig sak att notera för skriptutvecklare, är att de inte ska utföra åtgärder som kan blockera körning under en lång tid, eller starta en händelsesnurra. Det beror på att den nuvarande versionen av skriptgränssnittet är anpassat för automatiserade uppgifter som kör till de är färdiga. Detta hanteras och utökas för KDE 4. </para>

</sect1>


</chapter>
