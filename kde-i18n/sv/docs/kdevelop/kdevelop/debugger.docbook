<chapter id="debugger">
<title
>Avlusargränssnittet</title>
<indexterm zone="debugger"
><primary
>avlusare</primary
></indexterm>

<para
>&kdevelop; innehåller en intern avlusare för C och C++, som är direkt integrerad med editorn. Tekniskt sett är den implementerad som ett gränssnitt som använder den flyttbara &GNU;-avlusaren <application
>gdb</application
> via en rörledning. Avlusaren kan startas på flera sätt: </para>

<itemizedlist>
<listitem>
<para
>Huvudprogrammet i projektet laddas i avlusaren med <menuchoice
><guimenu
>Avlusa</guimenu
><guimenuitem
>Starta</guimenuitem
></menuchoice
>. </para>
</listitem>

<listitem>
<para
>Genom att använda <menuchoice
><guimenu
>Avlusa</guimenu
> <guimenuitem
>Starta (annan)</guimenuitem
> <guimenuitem
>Undersök minnesdump</guimenuitem
></menuchoice
>, laddar du en minnesdump till minnet, som skapats av operativsystemets kärna när programmet kraschade. (Att skapa minnesdumpar kan vara avstängt på systemet, se <application
>ulimit(1)</application
>). Det här är användbart för en post-mortem analys av ett program. </para>
</listitem>

<listitem>
<para
>Du startar avlusaren för ett program som redan kör med <menuchoice
><guimenu
>Avlusa</guimenu
><guimenuitem
>Starta (annan)</guimenuitem
> <guimenuitem
>Anslut till process</guimenuitem
></menuchoice
>. En processlista visas där du kan välja processen som avlusaren ska överta. </para>
</listitem>

<listitem>
<para
>Observera att avlusning bara är möjlig om projektet har kompilerats med avlusningsinformation aktiverad. Den kan aktiveras i dialogrutan <guibutton
>Kompilatorinställningar</guibutton
>. När alternativet är aktiverat, skapar kompilatorn ytterligare information som låter avlusaren associera filnamn och radnummer med adresser i det körbara programmet. </para>
</listitem>
</itemizedlist>

<para
>Gränssnittet till avlusaren erbjuder flera vyer <quote
>in i</quote
> processen: </para>

<para
>Om du försöker avlusa ett projekt utan avlusningsinformation, får du meddelandet <computeroutput
>Ingen källkod...</computeroutput
> i statusraden. Om du försöker sätta brytpunkter, visas de som <computeroutput
>Vilande (lägg till)</computeroutput
> i brytpunktsfönstret (se nedan). </para>

<variablelist>
<varlistentry>
<term
>Variabler</term>
<listitem>
<indexterm zone="debugger"
><primary
>bevakningsvariabler</primary
></indexterm>
<para
>Det här fönstret visar värden för alla lokala variabler vid det nuvarande stället i programmet. Det täcker variablerna i kompilatorns anropsstack, dvs. funktionen där processen bröts, funktionen som anropade den här funktionen, och så vidare hela vägen till funktionen <function
>main()</function
>. </para>

<para
>En annan gren i variabelfönstret innehåller bevakningsvariabler. Du kan själv ställa in vilka variabler som syns här. Både lokala och globala variabler kan bevakas. Du kan antingen lägga till en variabel genom att klicka på knappen <guibutton
>Lägg till</guibutton
> eller trycka på returtangenten när posten <keycap
>Bevaka</keycap
> är markerad. Variablerna kan tas bort igen med den sammanhangsberoende menyn. </para>
</listitem>
</varlistentry>

<varlistentry>
<term
>Aktiveringspoststack</term>
<listitem>
<indexterm zone="debugger"
><primary
>aktiveringspost-stack</primary
></indexterm>
<para
>(...ännu inte skrivet...) </para>
</listitem>
</varlistentry>

<varlistentry>
<term
>Brytpunkter</term>
<listitem>
<indexterm zone="debugger"
><primary
>brytpunkter</primary
></indexterm>
<para
>Fönstret låter dig se och behandla brytpunkterna. Kom ihåg att &kdevelop; använder <application
>GDB</application
>, så för att förstå &kdevelop;s avlusningsfunktioner fullständigt, måste du veta lite grand om <ulink url="http://www.gnu.org/software/gdb"
>GDB</ulink
>. </para>

<para
>Om du vill titta på källkoden, definieras brytpunkter i <filename
>kdevelop/languages/cpp/debugger/breakpoint.h</filename
>. </para>

<para
>I vänsterkanten har fönstret knappar för att:</para>

<itemizedlist>
<listitem
><para
>Lägga till en tom brytpunkt</para
></listitem>
<listitem
><para
>Redigera den markerade brytpunkten</para
></listitem>
 <listitem
><para
>Ta bort den markerade brytpunkten</para
></listitem>
<listitem
><para
>Ta bort alla brytpunkter</para
></listitem>
</itemizedlist>

<para
>Huvuddelen av fönstret är en tabell med sju kolumner. Varje rad i tabellen är en brytpunkt. Kolumnerna är:</para>

<orderedlist>
<listitem
><para
>Markeringskryssruta</para
></listitem>
<listitem
><para
>Typ: en av: Ogiltig, Fil:Rad, Bevakningspunkt, Adress, Funktion</para
></listitem>
<listitem
><para
>Status. Värdena är:</para>
<itemizedlist>
  <listitem
><para
>Aktiv</para
></listitem>
  <listitem
><para
>Inaktiverad: Varje brytpunkt kan <quote
>aktiveras</quote
> eller <quote
>inaktiveras</quote
>. Om den är inaktiverad har den ingen effekt på programmet till den aktiveras igen.</para
></listitem>
  <listitem
><para
>Vilande (lägg till): En brytpunkt är markerad så här om ingen avlusningsinformation är tillgänglig. Från GDB:s informationssida: <blockquote
><para
>Om en specificerad brytpunktsplats inte kan hittas, kan det bero på det faktum att platsen är i ett delat bibliotek som ännu inte har laddats. I ett sådant fall, kan du vilja att GDB skapar en speciell brytpunkt (känd som en <quote
>vilande brytpunkt</quote
>) som försöker lösa upp sig själv i framtiden när ett lämpligt delat bibliotek laddas.</para
></blockquote
> </para
></listitem>
</itemizedlist>
</listitem>
<listitem
><para
>Vilande (rensa)</para
></listitem>
<listitem
><para
>Vilande (ändra)</para
></listitem>
<listitem
><para
>Plats på formatet filnamn:radnummer</para
></listitem>
<listitem
><para
>Villkor</para
></listitem>
<listitem
><para
>Ignorera antal: Om det är ett tal <varname
>ANTAL</varname
> större än noll, stoppas inte programmets körning följande <varname
>ANTAL</varname
> gånger som brytpunkten nås, förutom att minska antalet att ignorera, utför <application
>gdb</application
> ingen åtgärd.</para
></listitem>
<listitem
><para
>Träffar: Räknar hur många gånger en brytpunkt har träffats.</para
></listitem>
</orderedlist>


</listitem>
</varlistentry>

<varlistentry>
<term
>Visa assemblerkod</term>
<listitem>
<indexterm zone="debugger"
><primary
>visa assemblerkod</primary
></indexterm>
<para
>(...ännu inte skrivet...)</para>

</listitem>
</varlistentry>
</variablelist>


<sect1 id="settingbreakpoints">
<title
>Ange brytpunkter</title>

<para
>(...ännu inte skrivet...) </para>

</sect1
> <!-- settingbreakpoints -->

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

<sect1 id ="debuggeroptions">
<title
>Alternativ</title>

<variablelist>
<varlistentry>
<term
>Visa behandlade namn</term>
<listitem>
<indexterm zone="debugger"
><primary
>namnbehandling</primary
></indexterm>
<indexterm zone="debugger"
><primary
>behandling</primary
><secondary
>namn</secondary
></indexterm>

<para
>Funktionsnamn i det körbara programmet är <quote
>behandlade</quote
> för C++, dvs. funktionsnamnet innehåller information om argumentens typer. Detta är nödvändigt för att stödja överlastade funktioner. Behandlingsalgoritmen är inte standardiserad, och skiljer sig till och med mellan olika versioner av &GNU;:s C++ kompilator. </para>

<para
>I assemblerkodfönstret visas normalt obehandlade namn, så funktionssignaturer liknar utseendet i källkoden, och är lätt läsbara. Alternativt, kan du välja att se behandlade namn. </para>
</listitem>
</varlistentry>

<varlistentry>
<term
>Försök sätta brytpunkter när bibliotek laddas</term>
<listitem>
<indexterm zone="debugger"
><primary
>lata brytpunkter</primary
></indexterm>
<indexterm zone="debugger"
><primary
>brytpunkter</primary
><secondary
>lat</secondary
></indexterm>

<para
>Avlusarens bakgrundsprogram <application
>gdb</application
> tillåter inte att brytpunkter sätts i kod som inte för närvarande är laddad. I ett riktigt modulärt program, där kod ofta bara laddas vid behov som insticksprogram (med användning av C-bibliotekets funktion <function
>dlopen(3)</function
>), kan detta vara besvärande. Därför hanterar &kdevelop; själv stöd för brytpunkter i delade bibliotek. Om du aktiverar det här alternativet, kan du sätta brytpunkter i bibliotek som inte laddats. Därefter, så fort <application
>gdb</application
> talar om att ett bibliotek har laddats, försöker &kdevelop; sätta de vilande brytpunkterna. </para>
</listitem>
</varlistentry>

<varlistentry>
<term
>Aktivera flytande verktygsrad</term>
<listitem>
<indexterm zone="debugger"
><primary
>avlusningsverktygsrad</primary
></indexterm>
<indexterm zone="debugger"
><primary
>verktygsrad</primary
><secondary
>avlusare</secondary
></indexterm>

<para
>(...ännu inte skrivet...) </para>
</listitem>
</varlistentry>
</variablelist>

</sect1
> <!-- debuggeroptions -->

</chapter
> <!-- debugger -->
