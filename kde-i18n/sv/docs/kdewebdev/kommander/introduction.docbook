<?xml version="1.0"  encoding="UTF-8" ?>

<chapter id="introduction">
<chapterinfo>
<title
>Inledning</title>
<authorgroup>
<author
><firstname
>Eric</firstname
> <surname
>Laffoon</surname
> <affiliation
> <address
><email
>sequitur@kde.org</email
></address>
</affiliation>
</author>

<othercredit role="translator"
> <firstname
>Stefan</firstname
> <surname
>Asserhäll</surname
> <affiliation
><address
><email
>stefan.asserhall@comhem.se</email
></address
></affiliation
> <contrib
>Översättare</contrib
></othercredit
> 

</authorgroup>
</chapterinfo>

<title
>Inledning</title>

<para
>&kommander; är ett verktyg för att bygga visuella dialogrutor som kan utökas för att skapa program med fullständiga huvudfönster, under förutsättning att fönstret från början skapas i Qt Designer eller från en mall i &kommander;. Huvudsyftet är att skapa så mycket funktioner som möjligt med så liten användning av skriptspråk som möjligt. Det möjliggörs av följande funktioner: </para>
<note
><para
>Observera att dokumentet innehåller föråldrad dokumentation av kompatibilitetsorsaker. I korthet erbjuder &kommander; mycket snabb utveckling med omfattande förmågor och möjligheter. Här följer en ny lista, och därefter det gamla innehållet.</para
></note>

<itemizedlist>
<listitem>
<para
><emphasis
>Dugligt internt skriptspråk</emphasis
>: &kommander; erbjuder nu nästlade logiska strukturer, enkla fält och användbara funktioner. </para>
</listitem>
<listitem
><para
><emphasis
>Funktionsbläddrare</emphasis
>: Man behöver aldrig veta den exakta syntaxen för någon funktion eller något kommando. Klicka bara på knappen, peka och klicka dig fram till ett funktionsprogram. Till och med projektledaren tycker det är enklare än stavfel nästan hela tiden.</para>
</listitem>
<listitem
><para
><emphasis
>Omfattande grafiska komponenter</emphasis
>: &kommander; har nu en grafisk träd- och detaljkomponent, kalkylarksliknande grafisk tabellkomponent, teckensnittsdialogruta, färgvalsdialogruta, dialogruta med programinformation, tidtagare, grafisk flikkomponent, verktygslåda, sammanhangsberoende menyer, datumväljare, med mera. </para>
</listitem>
<listitem>
<para
><emphasis
>Insticksprogram</emphasis
>: &kommander; kan enkelt köras för att skapa insticksprogram. När detta skrivs är det insticksprogram för databaser som tillhandahåller en uppsättning icke-grafiska verktyg, ett HTTP-insticksprogram som tillhandahåller HTTPS och åtkomst till lösenordsskyddade områden, och en laddare av KPart-delprogram. </para
></listitem>
<listitem>
<para
><emphasis
>Stöd för skriptspråk</emphasis
>: Möjlighet att köra flera olika skriptspråk i &kommander;-skript, inne i dialogrutan. </para
></listitem>
<listitem>
<para
><emphasis
>Skapa KPart-delprogram</emphasis
>: Möjlighet att skapa egna insticksprogram ... och ännu konstigare - man kan till och med få ett &kommander;-fönster att ladda en dialogruta som ett KPart-delprogram och direkt komma åt den med funktioner i &kommander;. </para
></listitem>
</itemizedlist>
<para
>Se dokumentation med tips och trick om hur man får &kommander; att verka använda programmeringstekniker som att inkludera en fil, skapa och använda egna grafiska komponenter, skapa hopfällbara rutor i fönster och andra trick man inte skulle förvänta sig. Nedan följer den gamla listan.</para>
<itemizedlist>


<listitem
><para
>Specialvärden inleds med ett <quote
>@</quote
>, som @widgetText. De erbjuder specialfunktioner som en grafisk komponents värde, funktioner, alias, globala variabler och liknande.</para
></listitem>


<listitem
><para
>Integrering med &DCOP; gör det möjligt för &kommander; dialogrutor att styra och styras via kommunikation med andra &kde;-program. Det är en mycket kraftfull funktion!</para
></listitem>

<listitem
><para
>Signaler och slots är något mindre intuitivt för en ny användare. Hur saker behandlas är under granskning för den första huvudutgåvan. Dessa erbjuder en begränsad händelsemodell när en knapp trycks eller en komponent ändras. Kombinerat med <quote
>Ifyllnadstext</quote
> är det ganska kraftfullt.</para
></listitem>
</itemizedlist>

<para
>Den centrala nyckelfunktionen i &kommander; dialogrutor är att du kan koppla text (&kommander; Text) till en grafisk komponent. Så om du har @komponent1 och @komponent2, och båda är radeditorer, kan du ställa in &kommander; att visa innehållet genom att skriva @widgetText i deras &kommander; textområde. Skriv därefter in "hello" i @komponent1 och "world" i @komponent2. En knapp kan ha strängen "Mitt första @komponent1 @komponent2 program" i &kommander;. Om du kör dialogrutan från en terminal, skriver den ut "Mitt första hello world program" i &kommander;. </para>

<para
>Förhoppningsvis ser du nu en liten glimt av potentialen. &kommander; möjliggör en mycket snabbare konstruktionsmodell för enkla program, eftersom det tillåter dig att sluta tänka så mycket på språket, och gå tillbaka till den mer grundläggande och naturliga begreppsmodellen. I datorer är ett språk ett sätt att definiera begrepp, och på så sätt är det ett lager mellan begrepp och implementering som kan hindra framsteg med petitesser. &kommander; försöker att minimera detta lager. </para>

<para
>&kommander; försöker också bygga på standarder. Det är uppbyggt på ramverket i &Qt; Designer, och skapar *.ui-filer, som döps om till *.kmdr. Det kan enkelt importera vilken grafisk komponent från &kde; som helst, och detta kan göras utan att behöva bygga om &kommander; genom att använda insticksprogram. </para>

<para
>&kommander;s andra viktiga faktor är hur det möter kraven från språk. Datorspråk kan vara underbara ting, men de tenderar att ha sina egna dogmer och fanatiker försöker ofta bevisa framsteg i konstruktion av grafiska gränssnitt i en integrerad utvecklingsmiljö. Ironiskt nog är acceptansen av sådana integrerade utvecklingsmiljöer begränsad av antalet personer som är villiga att ta ett nytt språk i bruk för att få tillgång till en önskad funktion. Det är verkligen inte rimligt att förvänta sig att personer ska byta mellan dussintalet språk för att komma åt olika uppsättningar med funktioner. Genom att vara språkneutralt och tillåta att en &kommander; dialogruta utökas av vilket skriptspråk som helst, positionerar sig &kommander; på en unik plats för omfattande användning. Flera skriptspråk kan användas i en enda dialogruta och program kan tas över av personer som använder ett annat språk än den ursprungliga utvecklaren, och gradvis konverteras och utökas. Alla tillgängliga språk kan omedelbart dra nytta av nya grafiska komponenter och funktioner. </para>

<para
>Vi hoppas att &kommander; börjar få det stöd och erkännande från utvecklare som krävs för att uppnå potentialen det erbjuder. Vårt slutliga mål är att göra &kommander; användbart för nybörjare för att utöka och sammanfoga deras program. Samtidigt bör det bli ett bra prototypverktyg. Det öppnar också dörren för möjligheter med öppen källkod på ett annat sätt. Vi vet att andra kan utöka våra GPL-program, men faktum kvarstår att mycket få har färdigheten. Med &kommander; kan det antalet multipliceras enormt! Vissa program kan vara mest logiska som &kommander;-program. Vi använder det redan för områden där vi vill ha möjlighet till utökningar i &quantaplus;. </para>

<para
>Vi hoppas att du tycker om &kommander;. Hjälp oss gärna med felrapporter och exempeldialogrutor, samt eventuella önskemål du har. Du kan gå med i vår <ulink url="http://mail.kdewebdev.org/mailman/listinfo/kommander"
>användarlista</ulink
> för att få hjälp med att utveckla program för &kommander;. </para>

<para
>Vänliga hälsningar från utvecklingsgruppen för &kommander;!</para>

</chapter>
