<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.2-Based Variant V1.1//EN"
"dtd/kdex.dtd" [
  <!ENTITY kappname "&ksplash;">
  <!ENTITY package "kdebase">
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % Swedish "INCLUDE">
]>

<book lang="&language;">

<bookinfo>
<title
>Handbok &ksplash;</title>

<authorgroup>
<author
>&Teemu.Rytilahti; &Teemu.Rytilahti.mail; </author>

<othercredit role="developer"
>&Brian.C.Ledbetter; &Brian.C.Ledbetter.mail; </othercredit>

<othercredit role="developer"
>&Ravikiran.Rajagopal; &Ravikiran.Rajagopal.mail; </othercredit>

<othercredit role="translator"
> <firstname
>Stefan</firstname
> <surname
>Asserhäll</surname
> <affiliation
><address
><email
>stefan.asserhall@comhem.se</email
></address
></affiliation
> <contrib
>Översättare</contrib
></othercredit
> 

</authorgroup>

<copyright>
<year
>2003</year>
<holder
>Teemu Rytilahti</holder>
</copyright>
<copyright>
<year
>2003-04</year>
<holder
>Ravikiran Rajagopal</holder>
</copyright>
<legalnotice
>&FDLNotice;</legalnotice>

<date
>2003-01-10</date>
<releaseinfo
>1.01.00</releaseinfo>

<abstract>
<para
>&ksplash; är en trevlig startskärm som visar förloppet för programmet som laddas.</para>
</abstract>

<keywordset>
<keyword
>KDE</keyword>
<keyword
>kdebase</keyword>
<keyword
>ksplash</keyword>
<keyword
>ksplashml</keyword>
<keyword
>startskärm</keyword>
<keyword
>ögongodis</keyword>
</keywordset>

</bookinfo>

<chapter id="introduction">
<title
>Inledning</title>

<para
>&ksplash; är en trevlig startskärm som visar förloppet för programmet som laddas. Rapportera gärna eventuella problem eller önskemål till &kde;:s e-postlistor. De huvudsakliga funktionerna i &ksplash; är: </para>
<simplelist>
<member
>Med teman</member>
<member
>Använder insticksmoduler för fullständig anpassningsbarhet</member>
<member
>Kan användas av alla program som använder DCOP</member>
</simplelist>

<para
>Den här handboken beskriver hur man skapar teman för att använda tillsammans med insticksmoduler som redan finns. Om ingen av insticksmodulerna som är tillgängliga passar din smak, kan du lära dig hur du anpassar &ksplash; utseende helt och hållet genom att skriva en insticksmodul i C++. </para>
</chapter>

<chapter id="using-themes">
<title
>Att använda teman</title>

<para
>För att använda teman från <ulink url="http://www.kde-look.org"
>KDE-Look</ulink
>, packa upp dem i <filename
>~/.kde/share/apps/ksplash/Themes/</filename
> för en enda användare, eller i <filename
>$<envar
>KDEDIR</envar
>/share/apps/ksplash/Themes/</filename
> för att göra dem tillgängliga för alla användare i systemet.</para>

<para
>Du kan också använda modulen <guilabel
>Startskärm</guilabel
> under <guilabel
>Utseende och teman</guilabel
> i &kde;:s inställningscentral för att göra detta automatiskt.</para>

<sect1 id="using-kcontrol-module">
<title
>Använda modulen i Inställningscentralen</title>

<para
>Modulen gör det möjligt att installera, testa och ta bort &ksplash;-teman.</para>

<para
>Längs modulens kant finns en lista med &ksplash;-teman som för närvarande är tillgängliga. När du väljer ett, visas en förhandsgranskning i fönstrets huvuddel. När du har valt den du vill använda, tryck på <guibutton
>Ok</guibutton
> eller <guibutton
>Verkställ</guibutton
>. Tryck på <guibutton
>Återställ</guibutton
> för att avsluta modulen utan att göra några ändringar, och <guibutton
>Förval</guibutton
> för att återställa systemets förvalda startskärm.</para>

<para
>För att installera nya moduler, tryck på <guibutton
>Lägg till...</guibutton
> och leta reda på temat på datorn. Du behöver inte packa upp temafiler, utan du kan välja den komprimerade temafilen utan bekymmer. Att installera ett tema gör inte att det blir temat som används innan du väljer det i listan och antingen trycker på <guibutton
>Ok</guibutton
> eller <guibutton
>Verkställ</guibutton
>.</para>

<para
>Även om du kan se en förhandsgranskning av startskärmen, kanske du vill se hur den ser ut när den verkligen används, till exempel för att se hur animeringen ser ut. Du kan testa teman genom att välja dem i listan och klicka på knappen <guibutton
>Test</guibutton
>.</para>

<para
>Du kan också ta bort teman du inte längre vill använda, genom att välja dem och trycka på knappen <guibutton
>Ta bort</guibutton
>. Observera att ditt användarkonto kanske inte har rättighet att ta bort teman som är installerade för hela systemet. Det rekommenderas också att inte avinstallera startskärmen <guilabel
>Förval</guilabel
>.</para>

</sect1>

</chapter>

<chapter id="themes">
<title
>Hur man skapar teman för &ksplash;</title>
<sect1 id="themes-general">
<title
>Allmänt</title>
<para
>Att skapa egna teman för &ksplash; är enkelt. När du är klar med dina teman kan du skicka dem till <ulink url="http://www.kde-look.org"
>KDE-Look</ulink
> så att andra kan använda dem.</para>

<sect2 id="theme-syntax">
<title
>Identifiera ditt tema</title>

<para
>Låt oss skapa ett tema som heter <literal
>MittFinaTema</literal
>. För att &ksplash; ska känna igen temat, ska det lagras i en katalog som heter <filename class="directory"
>MittFinaTema</filename
> i katalogen <filename class="directory"
>~/.kde/apps/ksplash/Themes/</filename
>. Det ska ha en fil som heter <filename
>Theme.rc</filename
> som innehåller temats inställningar. Du kan ange ett stort antal speciella inställningar för temat, ändra insticksmodulen som används, och så vidare. Du måste inte använda alla tillgängliga inställningar. Oftast har inställningarna acceptabla standardvärden. Grundläggande syntax för poster i filen <filename
>Theme.rc</filename
> är <literal
>[alternativ] = [värde]</literal
>. Du hittar definitionen av de olika alternativen i följande avsnitt.</para>

<example>
<title
>Enkel fil <filename
>Theme.rc</filename
></title>
<programlisting
>[KSplash Theme: MittFinaTema]
Name = MittFinaTema
Description = Ett trevligt tema som använder ett XP-liknande utseende
Version = 1.0
Author = Riktigt namn &lt;riktigepost@epost.se&gt;
## Använd modulen XpLike för det här temat.
Engine = XpLike
Show Icon = false
Welcome Text = Laddar KDE
</programlisting>
</example>

<para
>Efter att ha angett namn, beskrivning och upphovsman för temat, ska du först välja en temamodul (också kallad insticksmodul). Därefter kan du anpassa olika funktioner i temamodulen, genom att tilldela par av alternativ-värde som i exempelfilen ovan.</para>

<important>
<para
>Försäkra dig om att namnet på katalogen som innehåller temafilerna (i vårt fall <filename class="directory"
>~/.kde/apps/ksplash/Themes/MittFinaTema</filename
>) och temats identifierare (i vårt fall <literal
>[KSplash Theme: MittFinaTema] </literal
>) i filen <filename
>Theme.rc</filename
> är identiska. Annars känner inte &ksplash; igen temat.</para>
</important>

</sect2>

<sect2 id="theme-files">
<title
>Bakgrundsfiler</title>

<para
>När &ksplash; startar, försöker den hitta en bakgrundsbild för nuvarande skärmupplösning, om temamodulen använder en. Filen med bakgrundsbilden ska namnges på följande sätt: <filename
>Background-<replaceable
>BBBxHHH</replaceable
>.png</filename
>.</para>

<para
>Du kan till exempel använda en fil som heter <filename
>Background-1024x768.png</filename
>. Om bakgrundsbilden för din skärmupplösning inte kan hittas, görs ett försök att ändra storlek på originalfilen <filename
>Background.png</filename
> eller filen som anges i <filename
>Theme.rc</filename
> för att passa nuvarande upplösning. Att ändra storlek i farten tar med säkerhet en viss tid, så du bör tillhandahålla bakgrundsbilder för åtminstone följande storlekar: 1280x1024, 1024x768 och 800x600.</para>
</sect2>
</sect1>

<sect1 id="theme-engines">
<title
>Alternativ för temaprogram</title>

<sect2 id="default-themes">
<title
>Temat Förval</title>
<table>
<title
>Alternativ för temat Förval</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Namn</entry>
<entry
>Argument</entry>
<entry
>Förklaring</entry>
</row>
<!-- Statusbar -->
<row>
<entry
>Always Show Progress</entry>
<entry
>[true/false]</entry>
<entry
>Anger om laddningsförloppet ska visas. Standardvärdet är sant (true).</entry>
</row>
<row>
<entry
>Label Foreground</entry>
<entry
>[färg]</entry>
<entry
>Avgör vilken färg som ska användas för statusradens text. Standardvärdet är #FFFFFF (vitt).</entry>
</row>
<!-- Misc. things -->
<row>
<entry
>Icons Flashing</entry>
<entry
>[true/false]</entry>
<entry
>Anger om ikoner ska <quote
>blinka</quote
>. Standardvärdet är sant (true).</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="standard-themes">
<title
>Standardtema</title>
<table>
<title
>Alternativ för standardtema</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Namn</entry>
<entry
>Argument</entry>
<entry
>Förklaring</entry>
</row>
<!-- Statusbar -->
<row>
<entry
>Statusbar Position</entry>
<entry
>[top/bottom]</entry>
<entry
>Växlar position för statusraden på skärmen. Standardvärdet är längst ner (bottom).</entry>
</row>
<row>
<entry
>Statusbar Visible</entry>
<entry
>[true/false]</entry>
<entry
>Anger om statusraden ska visas. Standardvärdet är sant (true).</entry>
</row>
<row>
<entry
>Progress Visible</entry>
<entry
>[true/false]</entry>
<entry
>Anger om laddningsförloppet ska visas. Standardvärdet är sant (true).</entry>
</row>
<!-- Fonts -->
<row>
<entry
>Statusbar Font</entry>
<entry
>[teckensnittsnamn]</entry>
<entry
>Teckensnitt som används i statusraden. Standardvärdet är Helvetica.</entry>
</row>
<row>
<entry
>Statusbar Font Size</entry>
<entry
>[storlek]</entry>
<entry
>Teckenstorleken i statusraden. Standardvärdet är 16.</entry>
</row>
<row>
<entry
>Statusbar Font Bold</entry>
<entry
>[true/false]</entry>
<entry
>Anger om statusradens teckensnitt ska vara i fetstil. Standardvärdet är sant (true).</entry>
</row>
<row>
<entry
>Statusbar Font Italic</entry>
<entry
>[true/false]</entry>
<entry
>Anger om statusradens teckensnitt ska vara kursiv. Standardvärdet är falskt (false).</entry>
</row>
<!-- Misc. things -->
<row>
<entry
>Statusbar Foreground</entry>
<entry
>[färg]</entry>
<entry
>Förgrundsfärg för statusraden. Standardvärdet är vitt.</entry>
</row>
<row>
<entry
>Statusbar Background</entry>
<entry
>[färg]</entry>
<entry
>Bakgrundsfärg för statusraden. Standardvärdet är svart.</entry>
</row>
<row>
<entry
>Statusbar Icon</entry>
<entry
>[true/false]</entry>
<entry
>Anger om statusraden ska ha en ikon.</entry>
</row>
<row>
<entry
>Icons Visible</entry>
<entry
>[true/false]</entry>
<entry
>Anger om ikoner ska vara synliga. Standardvärdet är sant (true).</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Anger om ikoner ska hoppa. Standardvärdet är sant (true).</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[0-3,10-13]</entry>
<entry
>Position där ikonerna visas. Standardvärdet är längst ner till vänster (bottom-left).</entry>
</row>
<row>
<entry
>Splash Screen</entry>
<entry
>[namn]</entry>
<entry
>Ändrar bilden av startskärmen som visas.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="redmond-themes">
<title
>Redmond-tema</title>
<table>
<title
>Alternativ för Redmond-tema</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Namn</entry>
<entry
>Argument</entry>
<entry
>Förklaring</entry>
</row>
<!-- Main elements -->
<row>
<entry
>Background Image</entry>
<entry
>[filnamn]</entry>
<entry
>Användardefinierad bakgrundsbild att använda.</entry>
</row>
<row>
<entry
>User Icon</entry>
<entry
>[Ikonnamn]</entry>
<entry
>Namn på standardikon att visa för användare. Standardvärdet är <constant
>go</constant
>.</entry>
</row>
<row>
<entry
>Welcome Text</entry>
<entry
>[text]</entry>
<entry
>Text som visas på startskärmen. Standardvärdet är "Välkommen".</entry>
</row>
<row>
<entry
>Username Text</entry>
<entry
>[text]</entry>
<entry
>Text som visas istället för användarens riktiga namn.</entry>
</row>
<!-- Positioning elements -->
<row>
<entry
>Welcome Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Position på skärmen där välkomsttexten visas.</entry>
</row>
<row>
<entry
>Username Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Position på skärmen där användarnamnet visas.</entry>
</row>
<row>
<entry
>Action Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Position på skärmen där aktuell åtgärd visas.</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[x,y]</entry>
<entry
>Position på skärmen där användarikonen visas.</entry>
</row>
<!-- Show to show.. -->
<row>
<entry
>Show Welcome Text</entry>
<entry
>[true/false]</entry>
<entry
>Växlar visning av välkomsttext. Standardvärdet är sant (true).</entry>
</row>
<row>
<entry
>Show Welcome Shadow</entry>
<entry
>[true/false]</entry>
<entry
>Växlar visning av välkomsttextens skugga. Standardvärdet är sant (true).</entry>
</row>
<row>
<entry
>Show Username</entry>
<entry
>[true/false]</entry>
<entry
>Växlar visning av användarnamnet. Standardvärdet är sant (true).</entry>
</row>
<row>
<entry
>Show Action</entry>
<entry
>[true/false]</entry>
<entry
>Växlar visning av aktuell åtgärd som utförs. Standardvärdet är sant (true).</entry>
</row>
<row>
<entry
>Show Icon</entry>
<entry
>[true/false]</entry>
<entry
>Anger om ikonen ska visas. Standardvärdet är sant (true).</entry>
</row>
<row>
<entry
>Use KDM User Icon</entry>
<entry
>[true/false]</entry>
<entry
>Visa användarens inloggningsikon. Standardvärdet är sant (true).</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="macx-themes">
<title
>MacX-tema</title>
<table>
<title
>Alternativ för MacX-tema</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Namn</entry>
<entry
>Argument</entry>
<entry
>Förklaring</entry>
</row>
<row>
<entry
>Icon Size Minimum</entry>
<entry
>[storlek]</entry>
<entry
>Ställ in minimal storlek för ikoner. Standardvärdet är 16.</entry>
</row>
<row>
<entry
>Icon Size Maximum</entry>
<entry
>[storlek]</entry>
<entry
>Ställ in maximal storlek för ikoner. Standardvärdet är 64.</entry>
</row>
<row>
<entry
>Optimized Icon Rendering</entry>
<entry
>[true/false]</entry>
<entry
>Optimera uppritning av ikoner. Standardvärdet är sant (true).</entry>
</row>
<row>
<entry
>Progress Bar Visible</entry>
<entry
>[true/false]</entry>
<entry
>Standardvärdet är sant (true).</entry>
</row>
<row>
<entry
>Progress Bar Position</entry>
<entry
>[top/bottom]</entry>
<entry
>Växlar om statusraden ska vara längst ner eller längst upp. Standardvärdet är längst ner (bottom).</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Anger om ikoner ska hoppa. Standardvärdet är falskt (false).</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="mac-classic-themes">
<title
>MacClassic-tema</title>
<table>
<title
>Alternativ för MacClassic-tema</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Namn</entry>
<entry
>Argument</entry>
<entry
>Förklaring</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[0-3,10-13]</entry>
<entry
>Position för ikonerna på skärmen. Standardvärdet är längst ner till vänster (bottom left).</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Anger om ikoner ska hoppa. Standardvärdet är falskt (false).</entry>
</row>
<row>
<entry
>Icons Visible</entry>
<entry
>[true/false]</entry>
<entry
>Anger om ikoner ska vara synliga. Standardvärdet är sant (true).</entry>
</row>
<row>
<entry
>Splash Screen</entry>
<entry
>[namn]</entry>
<entry
>Ändrar bilden av startskärmen som visas.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="themes-2k">
<title
>2k-tema</title>
<table>
<title
>Alternativ för 2k-tema</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Namn</entry>
<entry
>Argument</entry>
<entry
>Förklaring</entry>
</row>
<row>
<entry
>Title Background Color</entry>
<entry
>[färg]</entry>
<entry
>Rubrikens bakgrundsfärg. Standardvärdet är mörkblå.</entry>
</row>
<row>
<entry
>Title Foreground Color</entry>
<entry
>[färg]</entry>
<entry
>Rubrikens förgrundsfärg. Standardvärdet är vit.</entry>
</row>
<row>
<entry
>Status Text Color</entry>
<entry
>[färg]</entry>
<entry
>Statustexternas färg. Standardvärdet är samma som rubrikens bakgrundsfärg.</entry>
</row>
<row>
<entry
>Rotator Color 1</entry>
<entry
>[färg]</entry>
<entry
>Anger färgen på rotation 1. Standardvärdet är mörkblå.</entry>
</row>
<row>
<entry
>Rotator Color 2</entry>
<entry
>[färg]</entry>
<entry
>Anger färgen på rotation 2. Standardvärdet är mörkblå.</entry>
</row>
<row>
<entry
>Rotator Speed</entry>
<entry
>[värde]</entry>
<entry
>Anger rotationens hastighet. Standardvärdet är 30.</entry>
</row>
<row>
<entry
>Window Title</entry>
<entry
>[text]</entry>
<entry
>Anger fönstrets rubriktext.</entry>
</row>
<row>
<entry
>Logo File</entry>
<entry
>[filnamn]</entry>
<entry
>Anger logotypen som används.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>
</sect1>
</chapter>

<chapter id="from-other-applications">
<title
>Att använda &ksplash; inifrån ditt eget program</title>

<para
>I det här kapitlet beskriver vi en enkel metod att använda &ksplash; som startskärm i ditt &kde;-program. Om du inte utvecklar program för &kde;, kan du hoppa över kapitlet.</para>

<sect1 id="basic-other-reqs">
<title
>Grundläggande krav</title>

<para
>Ditt &kde;-program måste fungera med &DCOP;. &DCOP; är &kde;-teknologin som används för att kommunicera mellan program. Om du använder det vanliga <ulink url="http://developer.kde.org"
>ramverket för &kde;-program</ulink
>, hanteras det automatiskt. För information om &DCOP; och liknande &kde;-teknologier, besök gärna <ulink url="http://developer.kde.org"
>&kde;:s utvecklingshörna</ulink
>.</para>
</sect1>

<sect1 id="other-using">
<title
>Att starta &ksplash;</title>

<para
>Innan ditt program börjar sitt beräkningsintensiva arbete, eller innan det börjar ladda insticksprogram, etc. starta &ksplash; enligt följande:</para>

<programlisting
>DCOPClient *c = kapp-&gt;dcopClient();
QString error;
QCString KSplashName;
int pid = 0;
QStringList args;
args &lt;&lt; "--theme=MittFinaTema" &lt;&lt; "--managed";
if (kapp-&gt;startServiceByDesktopName("ksplash", args, &amp;error,
&amp;KSplashName, &amp;pid))
{
  KMessageBox::sorry(0, error, "Kunde inte starta Ksplash");
  // Någon felhantering här.
}
</programlisting>

<para
>Vi antar att det bara finns en instans av &ksplash; som kör. Övriga fall är något mer komplicerade. Se &DCOP;-dokumentationen för ytterligare information.</para>
</sect1>

<sect1 id="show-messages">
<title
>Visa meddelanden</title>

<para
>Innan du visar några meddelanden, måste du ställa in antal steg som du ska visa. &kde;:s startprocedur använder till exempel sju steg.</para>

<programlisting
>QByteArray data;
    QDataStream arg(data,IO_WriteOnly);
    arg &lt;&lt; someNumber;
    if (!(c-&gt;send(KSplashName, "KSplashIface", "setStartupItemCount(int)",
data))
      // Någon felhantering här.
</programlisting>

<para
>Så fort du vill visa ett meddelande med eller utan ikon, använd</para>

<programlisting
>arg &lt;&lt; QString("ikonnamn") &lt;&lt; QString("programnamn") &lt;&lt;
QString("Beskrivning");
    if (!(c-&gt;send(KSplashName, "KSplashIface",
"programStarted(QString,QString,QString)", data))
    {
      // Någon felhantering här.
    }
</programlisting>

<para
>Varje gång du anropar <constant
>programStarted</constant
>, ökas antal steg som är klara. När programmet är klart med starten, gör följande för att få startskärmen att försvinna.</para>

<programlisting
>if (!(c-&gt;send(KSplashName, "KSplashIface", "startupComplete()", data))
    {
      // Felhantering här.
    }
</programlisting>

<para
>Det är det hela! Du behöver ingenting mer för att dra fördel av allt som &ksplash; kan erbjuda.</para>

</sect1>
</chapter>

<!-- FIXME: Better to leave this out until it's written, or the translators -->
<!-- will have to still translate it ... -->

<chapter id="wrplugins">
<title
>Skriva nya &ksplash;-insticksmoduler</title>

<para
>Att skriva nya &ksplash;-insticksmoduler är inte svårt. I det här kapitlet skriver vi en enkel insticksmodul, som emulerar startskärmen för ett välkänt operativsystem. Handledningen antar att du kan grunderna i C++, och lite grand om KDE/Qt-programmering.</para>

<sect1 id="basic-requirements">
<title
>Grundläggande krav</title>
<para
>Vi skapar en insticksmodul som kallas <literal
>2k</literal
>. Insticksmodulens namn används på olika ställen, och det är viktigt att du använder det konsekvent, så att insticksmodulen känns igen av &ksplash;. &ksplash; insticksmoduler är i själva verket dynamiskt laddade bibliotek med följande namngivningskonvention: </para>
<simplelist>
<member
>Biblioteket ska namnges som <filename
>ksplash+temanamn_med_små_bokstäver</filename
>. För vårt tema blir det <filename
>ksplash2k</filename
>.</member>
<member
>Det ska ha en motsvarande desktop-fil, som namnges som <filename
>ksplash+temanamn_med_små_bokstäver.desktop<filename
>. För vårt tema är det </filename
>ksplash2k.desktop</filename
>. </member>
<member
>Till sist, ska objektet som returneras av biblioteket vara en klass som heter <literal
>Theme+temanamn</literal
>. I vårt exempel är det <literal
>Theme2k</literal
>.</member>
</simplelist>
<para
>Bekymra dig inte om du inte förstår allt av det ovanstående. Vi betraktar varje punkt mer detaljerat senare. En annan mycket viktig punkt är att insticksmodulens klass måste härledas från <literal
>ThemeEngine</literal
>. </para>
</sect1>
<sect1 id="skeleton">
<title
>Bygga ramverkets skelett</title>
<para
>Vi använder oss av &kde;:s programramverk, som tar hand om att bygga insticksmodulen och ger oss plattformsoberoende utan något eget arbete. För att göra det, försäkra dig om att du har paketet <filename
>kdesdk</filename
> installerat. Kör kommandot <literal
>kapptemplate</literal
> för att skapa ett program som heter "2k". Då skapas en toppnivåkatalog som innehåller generella filer som AUTHORS, etc. Vi är mest intresserade av underkatalogen som heter <filename class="directory"
>2k</filename
>. Gå till katalogen och ta bort alla filer som finns där. Nu har vi skelettet som vi behöver. </para>
<para
>Nästa steg är att skapa filen <filename
>.desktop</filename
>, som när den installeras, talar om för &ksplash; att vår insticksmodul är tillgänglig. För att följa namngivningskonventionerna som beskrevs i <link linkend="basic-requirements"
>föregående sektion</link
>, skapa en fil som heter <filename
>ksplash2k.desktop</filename
> i katalogen. Den ska innehålla följande rader: </para>
<programlisting
><literal>
[Desktop Entry]
Encoding=UTF-8
Type=Service
Comment=KSplash Plugin
Name=KSplash2k
ServiceTypes=KSplash/Plugin
X-KDE-Library=ksplash2k
X-KSplash-Default=true
X-KSplash-PluginName=2k
X-KSplash-ObjectName=Theme2k
</literal
>
</programlisting>
<para
><literal
>Encoding</literal
>, <literal
>Type</literal
>, <literal
>Comment</literal
> och <literal
>ServiceTypes</literal
> är likadana för alla insticksmoduler. Insticksmodulens namn och biblioteksnamnet följer konventionen som tidigare angavs. Raden <literal
>X-KSplash-Default</literal
> har ett Booleskt värde som avgör om den normalt visas i inställningscentralen. Utom för några mycket ovanliga fall, ska värdet vara sant (<constant
>true</constant
>). </para>
</sect1>
<sect1 id="headerfile">
<title
>Deklaration av insticksmodulens klass</title>
<para
>Nu när vi har klarat av det inledande arbetet, låt oss börja med den roliga delen, att skapa en klass som tillhandahåller beteendet som vi vill ha. Även om vi har frihet att göra vad som helst med klassen, finns det vissa begränsningar.</para>
<orderedlist>
<listitem
><para
>Insticksmodulklasser måste ärva klassen <constant
>ThemeEngine</constant
>.</para
></listitem>
<listitem
><para
>Insticksmodulklasser måste namnges enligt regeln: <classname
>Theme+insticksmodulnamn</classname
>.</para
></listitem>
<listitem
><para
>Insticksmodulklasser måste tillhandahålla en <literal
>statisk</literal
> funktion som heter <function
>names</function
>, som returnerar en lista med namn som de kan anropas med.</para
></listitem>
<listitem
><para
>Om insticksmodulen kan anpassas i inställningscentralens modul, ska den tillhandahålla en klass baserad på <literal
>ThemeEngineConfig</literal
> för inställningarna.</para
></listitem>
<listitem
><para
>Insticksmodulklasser måste måste överskrida minst en av de virtuella funktionerna <function
>slotSetText</function
>, <function
>slotSetPixmap</function
>, <function
>slotUpdateProgress</function
> eller <function
>slotUpdateSteps</function
> för att vara användbara.</para
></listitem>
<listitem
><para
>Konstruktorn måste vara på formen <literal
>ThemeEngine( QWidget *parent, const char *name, const QStringList &amp;args )</literal
> så att den kan användas med <classname
>KGenericFactory</classname
>.</para
></listitem>
</orderedlist>
<para
>Det sista kravet kan verka komplicerat, men som vi senare kommer att se, kan du ofta ignorera det genom att lägga till en enda rad i dina källkodsfiler.</para>
</sect1>
<sect1 id="headercode">
<title
>Kod för deklarationsfilen</title>
<para
>Med dessa begränsningar, visar vi nu hur deklarationsfilen <filename
>theme2k.h</filename
> ser ut:</para>
<example>
<title
>Listning av filen <filename
>theme2k.h</filename
></title>
<programlisting
>#ifndef __THEME2K_H__
#define __THEME2K_H__

#include &lt;qlabel.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kdialogbase.h&gt;
#include &lt;kpixmap.h&gt;
#include &lt;ksplash/themeengine.h&gt;

class RotWidget;

class Cfg2k: public ThemeEngineConfig
{
  Q_OBJECT
public:
  Cfg2k( KConfig * );
};

class ObjKsTheme;
class Theme2k: public ThemeEngine
{
  Q_OBJECT
public:
  Theme2k( QWidget *, const char *, const QStringList&amp; );

  inline const QString name()
  {
    return( QString("KSplash2k") );
  }
  inline const KDialogBase *config( KConfig *kc )
  {
    return new Cfg2k( kc );
  }
  static QStringList names()
  {
    QStringList Names;
    Names &lt;&lt; "KSplash2k";
    Names &lt;&lt; "ks2k";
    Names &lt;&lt; "2k";
    Names &lt;&lt; "2000";
    return( Names );
  };

public slots:
  inline void slotSetText( const QString&amp; s )
  {
    if( mText &amp;&amp; mText-&gt;text() != s ) mText-&gt;setText( s );
  };

private:
  void initUi();
  void readSettings();

  QLabel *mText;
  RotWidget *mRotator;
  QColor mTBgColor, mTFgColor, mRotColor1, mRotColor2, mStatusColor;
  int mRotSpeed;
  QString mWndTitle, mLogoFile;
};

#endif
</programlisting>
</example>
<para
>Låt oss analysera listningen ovan. Klassen <classname
>Theme2k</classname
> följer namngivningskonventionen, och ärver från <classname
>ThemeEngine</classname
>. Den tillhandahåller metoden <methodname
>Theme2k::names()</methodname
>, och har en konstruktor som använder parametrar som krävs: <function
>Theme2k( QWidget *, const char *, const QStringList&amp; );</function
> och tillhandahåller också en enkel metod vid namn <methodname
>Theme2k::slotSetText()</methodname
>. Bekymra dig för närvarande inte om klassen <classname
>RotWidget</classname
>. Det är en liten grafisk komponentklass som tillhandahåller lite ögongodis åt användaren. Vår insticksmodul är mycket enkel, och visar inte några ikoner eller en förloppsrad. Om du vill visa ikoner, överskrid funktionen <function
>slotSetPixmap</function
>. Liknande funktioner finns för att ställa in förloppsradens hastighet (<function
>slotUpdateSteps</function
>) och öka nuvarande steg (<function
>slotUpdateProgress</function
>). </para>
</sect1>
<sect1 id="Implementation">
<title
>Implementering av insticksmodulen</title>
<para
>Vi betraktar bara relevanta delar av implementeringen. För en listning av hela implementeringen, se appendix. Det första vi gör är att få kraven på biblioteket ur världen:</para>
<example>
<title
>Bibliotekskrav</title>
<programlisting
>K_EXPORT_COMPONENT_FACTORY( ksplash2k, KGenericFactory&lt;Theme2k&gt; );
</programlisting>
</example>
<para
>Makrot <constant
>K_EXPORT_COMPONENT_FACTORY</constant
> deklareras i <filename
>kgenericfactory.h</filename
>. Låt oss fortsätta till konstruktorn! Eftersom det här är en mycket enkel insticksmodul, är konstruktorn ganska rättfram.</para>
<example>
<title
>Skapa insticksmodulen</title>
<programlisting
>Theme2k::Theme2k( QWidget *parent, const char *name, const QStringList &amp;args
 )
    :ThemeEngine( parent, name, args )
{
  readSettings();
  initUi();
}
</programlisting>
</example>
<para
>Metoden <function
>readSettings()</function
> åskådliggör det riktiga sättet att hämta temats inställningar. (Du vill väl att din insticksmodul ska användas i teman, eller hur?)</para>
<example>
<title
>Hämta temats inställningar</title>
<programlisting
>void Theme2k::readSettings()
{
  if( !mTheme )
    return;

  KConfig *cfg = mTheme-&gt;themeConfig();
  if( !cfg )
    return;

  cfg-&gt;setGroup( QString("KSplash Theme: %1").arg(mTheme-&gt;theme()) );

  QColor DefaultTBgColor( Qt::darkBlue );
  QColor DefaultTFgColor( Qt::white );

  mTBgColor = cfg-&gt;readColorEntry( "Title Background Color",
&amp;DefaultTBgColor );
  mTFgColor = cfg-&gt;readColorEntry( "Title Foreground Color",
&amp;DefaultTFgColor );
  mStatusColor = cfg-&gt;readColorEntry("Status Text Color", &amp;mTBgColor );

  QColor DefaultRot1( Qt::darkBlue );
  QColor DefaultRot2( Qt::cyan );
  mRotColor1 = cfg-&gt;readColorEntry( "Rotator Color 1", &amp;DefaultRot1 );
  mRotColor2 = cfg-&gt;readColorEntry( "Rotator Color 2", &amp;DefaultRot2 );

  mRotSpeed = cfg-&gt;readNumEntry( "Rotator Speed", 30 );
  mWndTitle = cfg-&gt;readEntry( "Window Title", i18n("Please wait...") );
  mLogoFile = cfg-&gt;readEntry( "Logo File", QString::null );
}
</programlisting>
</example>
<para
>Eftersom vi tycker om våra användare, tillhandahåller vi passande standardvärden för parametrar som inte finns med i temafilen. Observera att vi alltid ska ange gruppen som "KSplash Theme: temanamn" för att fungera ihop med framtida specifikationer av teman. Metoden <function
>initUI()</function
> är inte särskilt intressant, eftersom den bara bygger upp de grafiska komponenterna. Se appendix för detaljinformation. </para>
</sect1>
<sect1 id="compilingfile">
<title
>Kompilera insticksmodulen</title>
<para
>Eftersom vi bestämde oss för att använda &kde;:s ramverk för att kompilera insticksmodulen, måste vi skapa filen <filename
>Makefile.am</filename
>. Den ska se ut så här:</para>
<example>
<title
>Listning av filen <filename
>Makefile.am</filename
></title>
<programlisting
>INCLUDES = $(all_includes)

kde_module_LTLIBRARIES = ksplash2k.la

ksplash2k_la_SOURCES = theme2k.cpp rotwidget.cpp
ksplash2k_la_LDFLAGS = $(all_libraries) $(KDE_RPATH)
ksplash2k_la_LIBADD = $(LIB_KDEUI) -lksplashthemes

METASOURCES = AUTO

noinst_HEADERS        = theme2k.h rotwidget.h

servicesdir = $(kde_servicesdir)
services_DATA = ksplash2k.desktop

themedir = $(kde_datadir)/ksplash/Themes/2k
theme_DATA = Theme.rc Preview.png
</programlisting>
</example>
<para
>För mer information om hur man skriver <filename
>Makefile.am</filename
> filer för &kde;, se &kde;:s <ulink url="http://developer.kde.org/documentation/other/makefile_am_howto.html"
>hemsida</ulink
> för utvecklare. Det enda av intresse är att vi tillhandahåller ett förvalt tema baserat på insticksmodulen, och en förhandsgranskningsbild av det. Av hänsyn till användarna, bör du tillhandahålla ett exempel på filen <filename
>Theme.rc</filename
> som illustrerar användningen av de olika alternativen.</para>
</sect1>
</chapter>

<chapter id="faq">
<title
>Vanliga frågor</title>
&reporting.bugs; &updating.documentation; <qandaset id="faqlist">
<qandaentry>
<question>
<para
>Jag kan inte hitta några teman som fungerar med &ksplash;. Vad beror det på?</para>
</question>
<answer>
<para
>Du har troligen inte den riktiga insticksmodulen för temat. Insticksmodulerna finns i paketet <literal
>kde-artwork</literal
>. Ladda ner och installera det, och försök igen.</para>
</answer>
</qandaentry>
<qandaentry>
<question>
<para
>Vad är filen <filename
>Theme.rc</filename
> och hur skapar jag en?</para>
</question>
<answer>
<para
><filename
>Theme.rc</filename
> är filen där du kan ange inställningar för ett tema. För mer information, ta en titt på <link linkend="themes"
>Hur man skapar teman för &ksplash;</link
>. </para>
</answer>
</qandaentry>
</qandaset>
</chapter>

<chapter id="credits">
<title
>Tack till och licens</title>

<para
>&ksplash;</para>

<para
>Program Copyright &copy; 2003 &Ravikiran.Rajagopal; &Ravikiran.Rajagopal.mail;</para>

<itemizedlist>
<title
>Bidragsgivare</title>
<listitem
><para
>&Brian.C.Ledbetter; &Brian.C.Ledbetter.mail;</para>
</listitem>
</itemizedlist>

<para
>Dokumentation Copyright &copy; 2003 &Teemu.Rytilahti; &Teemu.Rytilahti.mail;</para>
&underFDL; &underGPL; </chapter>

<appendix id="installation">
<title
>Installation</title>

<sect1 id="requirements">
<title
>Krav</title>

<para
>För att använda &ksplash; med lyckat resultat, behöver du &kde; version 3.2 eller senare. Vissa teman kan kräva särskilda insticksmoduler. Om ett tema inte fungerar, kontakta temats upphovsman för att ta reda på var en lämplig insticksmodul kan hittas.</para>

</sect1>

<sect1 id="compilation">
<title
>Kompilering och installation</title>
&install.compile.documentation; </sect1>
</appendix>
<appendix id="srccode">
<title
>Källkod</title>
<sect1 id="theme2kcpp">
<title
>Listning av filen <filename
>theme2k.cpp</filename
></title>
<programlisting
>#include &lt;qlabel.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kapplication.h&gt;
#include &lt;kconfig.h&gt;
#include &lt;kdebug.h&gt;
#include &lt;kdialogbase.h&gt;
#include &lt;kgenericfactory.h&gt;
#include &lt;kglobalsettings.h&gt;
#include &lt;klocale.h&gt;
#include &lt;ksplash/objkstheme.h&gt;
#include &lt;kstandarddirs.h&gt;

#include "rotwidget.h"
#include "theme2k.h"
#include "theme2k.moc"

K_EXPORT_COMPONENT_FACTORY( ksplash2k, KGenericFactory&lt;Theme2k&gt; );

Cfg2k::Cfg2k( KConfig * )
{}

Theme2k::Theme2k( QWidget *parent, const char *name, const QStringList &amp;args
 )
    :ThemeEngine( parent, name, args )
{
  readSettings();
  initUi();
}

void Theme2k::initUi()
{
  QVBox *vbox = new QVBox( this );
  vbox-&gt;setFrameShape( QFrame::WinPanel );
  vbox-&gt;setFrameShadow( QFrame::Raised );

  QHBox *labelBox = new QHBox( vbox );
  labelBox-&gt;setPalette( mTBgColor );
  labelBox-&gt;setMargin( 1 );
  QLabel *lbl = new QLabel( mWndTitle, labelBox );
  lbl-&gt;setFont( QFont( "Arial", 12, QFont::Bold ) );
  lbl-&gt;setPaletteForegroundColor( mTFgColor );

  QLabel *logo = new QLabel( vbox );
  logo-&gt;setPalette( Qt::white );

  QString px( locate( "appdata", mTheme-&gt;themeDir() +
(mLogoFile.isNull()?QString("/Logo.png"):mLogoFile) ) );
  if (px.isNull())
    px = locate("appdata","Themes/Default/splash_top.png");
  if( !px.isNull() )
  {
    QPixmap pix( px );
    logo-&gt;setPixmap( pix );
  }
  else
  {
    logo-&gt;setText( "&lt;B&gt;KDE&lt;/B&gt;2000" );
    logo-&gt;setAlignment( AlignCenter|AlignVCenter );
  }

  mRotator = new RotWidget( vbox, mRotColor1, mRotColor2, mRotSpeed );

  QHBox *hbox = new QHBox( vbox );
  labelBox-&gt;setSpacing( 4 );
  labelBox-&gt;setMargin( 4 );

  mText = new QLabel( hbox );
  mText-&gt;setPaletteForegroundColor( mStatusColor );
  mText-&gt;setPaletteBackgroundColor( mTFgColor );
  mText-&gt;setText( mWndTitle );
  mText-&gt;setFixedHeight( 48 );

  setFixedSize( vbox-&gt;sizeHint() );
  QRect rect(KGlobalSettings::splashScreenDesktopGeometry());
  move( rect.x() + (rect.width() - size().width())/2,
        rect.y() + (rect.height() - size().height())/2 );
}

void Theme2k::readSettings()
{
  if( !mTheme )
    return;

  KConfig *cfg = mTheme-&gt;themeConfig();
  if( !cfg )
    return;

  cfg-&gt;setGroup( QString("KSplash Theme: %1").arg(mTheme-&gt;theme()) );

  QColor DefaultTBgColor( Qt::darkBlue );
  QColor DefaultTFgColor( Qt::white );

  mTBgColor = cfg-&gt;readColorEntry( "Title Background Color",
&amp;DefaultTBgColor );
  mTFgColor = cfg-&gt;readColorEntry( "Title Foreground Color",
&amp;DefaultTFgColor );
  mStatusColor = cfg-&gt;readColorEntry("Status Text Color", &amp;mTBgColor );

  QColor DefaultRot1( Qt::darkBlue );
  QColor DefaultRot2( Qt::cyan );
  mRotColor1 = cfg-&gt;readColorEntry( "Rotator Color 1", &amp;DefaultRot1 );
  mRotColor2 = cfg-&gt;readColorEntry( "Rotator Color 2", &amp;DefaultRot2 );

  mRotSpeed = cfg-&gt;readNumEntry( "Rotator Speed", 30 );
  mWndTitle = cfg-&gt;readEntry( "Window Title", i18n("Please wait...") );
  mLogoFile = cfg-&gt;readEntry( "Logo File", QString::null );
}
</programlisting>
</sect1>
<sect1 id="rotwidgeth">
<title
>Listning av filen <filename
>rotwidget.h</filename
></title>
<programlisting
>#ifndef         __ROTWIDGET_H__
#define         __ROTWIDGET_H__

#include &lt;qlabel.h&gt;
#include &lt;qtimer.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kdialogbase.h&gt;
#include &lt;kpixmap.h&gt;

/**
 * @short Display a rotating-gradient widget.
 */
class         RotWidget: public QWidget
{
  Q_OBJECT
public:
  RotWidget( QWidget *, const QColor&amp;, const QColor&amp;, int );
  ~RotWidget();

private slots:
  void stepEvent();

protected:
  void        preparePixmap( int );
  void        paintEvent( QPaintEvent * );
  void        resizeEvent( QResizeEvent * );

  QColor m_color1, m_color2;
  int m_step, m_speed;
  QTimer *m_stepTimer;

  QList&lt;KPixmap&gt; m_stepPixmap;
};

#endif
</programlisting>
</sect1>
<sect1 id="rotwidgetcpp">
<title
>Listning av filen <filename
>rotwidget.cpp</filename
></title>
<programlisting
>#include &lt;kdebug.h&gt;
#include &lt;kdialogbase.h&gt;
#include &lt;kpixmapeffect.h&gt;

#include &lt;qlabel.h&gt;
#include &lt;qpainter.h&gt;
#include &lt;qwidget.h&gt;

#include "rotwidget.h"
#include "rotwidget.moc"

RotWidget::RotWidget( QWidget *parent, const QColor&amp; c1, const QColor&amp;
c2, int sp )
    :QWidget(parent), m_color1(c1), m_color2(c2), m_step(0), m_speed(sp)
{
  if( (m_speed &lt;= 0) || (m_speed &gt; 20) )
    m_speed = 1;
  setFixedHeight( 6 );

  for( int i = 0; i &lt;= width(); i++ )
    preparePixmap( i );

  m_stepTimer = new QTimer( this );
  connect(m_stepTimer, SIGNAL(timeout()), this, SLOT(stepEvent()));
  m_stepTimer-&gt;start( 50 );
}

RotWidget::~RotWidget()
{
}

void RotWidget::stepEvent()
{
  // This is inefficient as we create too many pixmaps, optimize later.
  m_step += m_speed;
  if( m_step &gt; width() )
    m_step = 0;
  repaint( true );
}

// Todo: Optimize drawing.
void RotWidget::paintEvent( QPaintEvent *pe )
{
  QPainter p;
  p.begin( this );

  QRect r = pe-&gt;rect();

  if( m_stepPixmap.at( m_step ) )
    bitBlt( this, r.x(), r.y(), m_stepPixmap.at( m_step ), r.x(), r.y(),
r.width(), r.height() );
  else
    p.fillRect( rect(), Qt::black );
  p.end();
}

void RotWidget::resizeEvent( QResizeEvent *re )
{
  m_stepPixmap.clear();
  for( int i = 0; i &lt;= re-&gt;size().width(); i++ )
    preparePixmap( i );
}

void RotWidget::preparePixmap( int step )
{
  if( step &lt; 0 )
    return;

  // Explicitly draw our first pixmap. The rest we will bitBlt() from here.
  if( step == 0 )
  {
    KPixmap tmp; tmp.resize( size().width() / 2, size().height() );
    KPixmap tmp2(tmp);
    KPixmapEffect::gradient( tmp, m_color1, m_color2,
KPixmapEffect::HorizontalGradient );
    KPixmapEffect::gradient( tmp2, m_color2, m_color1,
KPixmapEffect::HorizontalGradient );
    KPixmap *px = new KPixmap( size() );
    QPainter p;
    p.begin( px );
    p.drawPixmap( 0, 0, tmp );
    p.drawPixmap( size().width()/2, 0, tmp2 );
    p.end();
    m_stepPixmap.append( px );
  }
  else if( m_stepPixmap.at( step-1 ) )
  {
    QPixmap *prev = m_stepPixmap.at( step-1 );
    QPixmap next; next.resize( size() );
    // convert
    // prev = "[------------]"
    // to
    // next = "------------]["
    bitBlt( &amp;next, 0, 0, prev, 1, 0, prev-&gt;width()-1, prev-&gt;height()
);
    bitBlt( &amp;next, width()-1, 0, prev, 0, 0, 1, prev-&gt;height() );
    KPixmap *n = new KPixmap( next );
    m_stepPixmap.append( n );
  }
}
</programlisting>
</sect1>
</appendix>

&documentation.index;
</book>

<!--
Local Variables:
mode: xml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:

vim:tabstop=2:shiftwidth=2:expandtab
-->
