<!--Dear translator: please NEVER translate the id or anything inside the tags as they are needed in english by the application
     Thanks a lot in advance.-->
<chapter id="Glossary">
<title
>Słowniczek</title>

<para
>W tym rozdziale znajdziesz objaśnienia większości <quote
>problematycznych</quote
> słów, które są używane w niniejszym podręczniku.</para>

<glosslist>
<glossentry id="degrees">
<glossterm
>stopnie</glossterm>
<glossdef
><para
>Stopnie są jednostką miary kątów lub obrotów. Pełny obrót, to 360 stopni, połowa obrotu, to 180 stopni, a ćwierć obrotu to 90 stopni. Polecenia <userinput
>obróć_w_lewo</userinput
>, <userinput
>obróć_w_prawo</userinput
> oraz <userinput
>kierunek</userinput
> wymagają podania wartości w stopniach.</para
></glossdef>
</glossentry>

<glossentry id="input-output">
<glossterm
>wejście i wyjście poleceń</glossterm>
<glossdef
><para
>Niektóre polecenie wymagają wejścia, a niektóre dają wyjście (wynik), niektóre polecenia wymagają zarówno wejścia <emphasis
>i</emphasis
> dają wynik. Są także takie, które nie potrzebują ani wejścia, ani nie dają wyniku.</para>
<para
>Oto przykłady poleceń, które potrzebują jedynie wejścia: <screen>
naprzód 50
kolor_pisaka 255,0,0
pisz "Cześć!"
</screen
> Polecenie <userinput
>naprzód</userinput
> uznaje <userinput
>50</userinput
> jako wejście. <userinput
>naprzód</userinput
> potrzebuje tego wpisu, aby wiedzieć ile <glossterm linkend="pixels"
>pikseli</glossterm
> na przód ma się przesunąć żółw. <userinput
>kolor_pisaka</userinput
> uznaje kolor jako wejście, a <userinput
>pisz</userinput
> uznaje za wejście ciąg (kawałek tekstu). Pamiętaj, że wejście może być także pojemnika. Poniższy przykład jest tego ilustracją: <screen
>x = 50
pisz x
str = "cześć!"
pisz str
</screen
></para>

<para
>Teraz kilka przykładów dających wynik: <screen>
x = okno_wejścia "Wpisz coś i kliknij OK... dzięki!"
r = losowo 1,100
</screen
> Polecenie <userinput
>okno_wejścia</userinput
> potrzebuje ciągu jako wejścia, natomiast daje wynik w postaci liczbowej lub ciągu, który został wprowadzony. Jak widać, wynik polecenia <userinput
>okno_wejścia</userinput
> jest przechowywany w kontenerze <userinput
>x</userinput
>. Polecenie <userinput
>losowo</userinput
> także daje wynik. W tym przypadku wynikiem jest liczba pomiędzy 1, a 100. Wynik polecenia losowo jest również przechowywany w kontenerze, o nazwie <userinput
>r</userinput
>. Zwróć uwagę, że kontenery <userinput
>x</userinput
> oraz <userinput
>r</userinput
> nie są wykorzystywane w powyższym przykładzie kodu.</para>

<para
>Są także polecenia, które nie potrzebują wejścia i nie dają także wyniku. Oto kilka przykładów: <screen
>czyść
podnieś
zawijaj
ukryj
</screen>
</para
></glossdef>
</glossentry>

<glossentry id="intuitive-highlighting">
<glossterm
>podświetlanie intuicyjne</glossterm>
<glossdef
><para
>Ta funkcja &kturtle; ułatwia pisanie, a przede wszystkim czytanie kodu. Dzięki intuicyjnemu podświetlaniu kod, który piszesz uzyskuje kolor oznaczający rodzaj wpisywanego kodu. Na poniższej liście znajdziesz różne rodzaje kodów i kolory, jakie one otrzymują w <link linkend="the-code-editor"
>edytorze kodów</link
>. <table>
<title
>Różne rodzaje kodów i kolor ich wyświetlania</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>polecenia regularne</entry>
<entry
>ciemno zielony</entry>
<entry
>Polecenia regularne zostały opisane <link linkend="commands"
>tutaj</link
>.</entry>
</row>
<row>
<entry
>kontrolery rozkazów</entry>
<entry
>czarny (pogrubiony)</entry>
<entry
>Na temat kontroli wykonywania poleceń specjalnych możesz przeczytać <link linkend="controlling-execution"
>tutaj</link
>.</entry>
</row>
<row>
<entry
>komentarze</entry>
<entry
>ciemny żółty</entry>
<entry
>Wiersze komentarza rozpoczynają się od znaku komentarza (#). Wiersze te są ignorowane, gdy kod jest wykonywany. Komentarze pozwalają programiście objaśniać swój kod, a także mogą być stosowane do tymczasowego wyłączania części kodu.</entry>
</row>
<row>
<entry
>nawiasy kwadratowe [, ]</entry>
<entry
>jasno zielony (pogrubiony)</entry>
<entry
>Nawiasy kwadratowe są wykorzystywane do grupowania partii kodu. Są one często stosowane z <link linkend="controlling-execution"
>kontrolerami rozkazów</link
>.</entry>
</row>
<row>
<entry
>polecenie <link linkend="learn"
>poznaj</link
></entry>
<entry
>jasno zielony (pogrubiony)</entry>
<entry
>Polecenie <link linkend="learn"
>poznaj</link
> jest wykorzystywane do tworzenia nowych poleceń.</entry>
</row>
<row>
<entry
>liczby</entry>
<entry
>niebieski</entry>
<entry
>Liczb chyba nie trzeba wyjaśniać.</entry>
</row>
<row>
<entry
>ciągi</entry>
<entry
>ciemno czerwony</entry>
<entry
>Niewiele można powiedzieć na temat ciągów (tekstowych), poza tym, że zawsze zaczynają się one i kończą podwójnym cudzysłowem (").</entry>
</row>
<row>
<entry
>znaki matematyczne</entry>
<entry
>szary</entry>
<entry
>Oto znaki matematyczne: +, -, *, /. Dowiesz się więcej na ich temat czytając <link linkend="math"
>ten dział</link
>.</entry>
</row>
<row>
<entry
>znaki zapytania</entry>
<entry
>niebieski (pogrubiony)</entry>
<entry
>Na temat pytań dowiesz się więcej <link linkend="questions"
>tutaj</link
>.</entry>
</row>
<row>
<entry
>operatory logiczne</entry>
<entry
>różowy</entry>
<entry
>Na temat operatorów logicznych (i, lub, nie) możesz przeczytać <link linkend="question-glue"
>tutaj</link
>.</entry>
</row>
<row>
<entry
>zwykły tekst</entry>
<entry
>czarny</entry>
<entry
></entry>
</row>
</tbody>
</tgroup>
</table>
</para
></glossdef>
</glossentry>

<glossentry id="pixels">
<glossterm
>piksele</glossterm>
<glossdef
><para
>Piksel jest punktem na ekranie. Jeżeli dokładnie się przyjrzysz, to zobaczysz, że ekran Twojego monitora składa się z pikseli. Wszystkie obrazy na ekranie są zbudowane z takich pikseli. Piksel jest najmniejszą rzeczą, która może zostać narysowana na ekranie.</para>
<para
>Wiele poleceń wymaga podania liczby pikseli jako wejścia. Polecenia te to: <userinput
>naprzód</userinput
>, <userinput
>wstecz</userinput
>, <userinput
>idź</userinput
>, <userinput
>idźx</userinput
>, <userinput
>idźy</userinput
>, <userinput
>przeskaluj_tło</userinput
> oraz <userinput
>ustaw_grubość_pisaka</userinput
>.</para
></glossdef>
</glossentry>

<glossentry id="rgb">
<glossterm
>Kombinacje RGB (kody kolorów)</glossterm>
<glossdef
><para
>Kombinacje RGB są wykorzystywane do opisywania kolorów. <quote
>R</quote
> oznacza <quote
>czerwony</quote
>, <quote
>G</quote
> oznacza <quote
>zielony</quote
>, a <quote
>B</quote
> oznacza <quote
>niebieski</quote
>. Przykładem kombinacji RGB jest <userinput
>255,0,0</userinput
>: pierwsza wartość (<quote
>czerwony</quote
>) to 255, natomiast kolejnymi wartościami są 0, więc oznacza to jasny odcień czerwieni. Każda wartość kombinacji RGB musi znajdować się w zakresie od 0 do 255. Oto krótka lista niektórych, często stosowanych kolorów: <table frame="none">
<title
>Często używane kombinacje RGB</title>
<tgroup cols="2" colsep="5" rowsep="1">
<colspec colname="c1"/>
<tbody>
<row
><entry
><userinput
>0,0,0</userinput
></entry
><entry
>czarny</entry
></row>
<row
><entry
><userinput
>255,255,255</userinput
></entry
><entry
>biały</entry
></row>
<row
><entry
><userinput
>255,0,0</userinput
></entry
><entry
>czerwony</entry
></row>
<row
><entry
><userinput
>150,0,0</userinput
></entry
><entry
>ciemno czerwony</entry
></row>
<row
><entry
><userinput
>0,255,0</userinput
></entry
><entry
>zielony</entry
></row>
<row
><entry
><userinput
>0,0,255</userinput
></entry
><entry
>niebieski</entry
></row>
<row
><entry
><userinput
>0,255,255</userinput
></entry
><entry
>jasno niebieski</entry
></row>
<row
><entry
><userinput
>255,0,255</userinput
></entry
><entry
>różowy</entry
></row>
<row
><entry
><userinput
>255,255,0</userinput
></entry
><entry
>żółty</entry
></row>
</tbody>
</tgroup>
</table>
</para>
<para
>Aby w łatwy sposób odnaleźć kombinację RGB koloru, powinieneś skorzystać z narzędzia wybierania koloru! Możesz je otworzyć wybierając z menu <link linkend="tools-color-picker"
><menuchoice
><guimenu
>Narzędzia</guimenu
><guimenuitem
>Narzędzie wybierania koloru</guimenuitem
></menuchoice
></link
>.</para>
<para
>Dwa polecenia wymagają kombinacji RGB jako wejścia: tymi poleceniami są <userinput
>kolor_tła</userinput
> oraz <userinput
>kolor_pisaka</userinput
>.</para
></glossdef>
</glossentry>

<glossentry id="sprite">
<glossterm
>sprajt</glossterm>
<glossdef
><para
>Sprajt, to niewielki obrazek, który może być przemieszczany po ekranie. Na przykład, nasz kochany żółwik jest sprajtem.</para>
<para
>Pamiętaj: w tej wersji &kturtle;, sprajt nie może być zmieniony z żółwia na coś innego. Kolejne wersje &kturtle; będą miały taką możliwość.</para
></glossdef>
</glossentry>

<glossentry id="wrapping">
<glossterm
>zawijanie</glossterm>
<glossdef
><para
>Zawijanie odbywa się, gdy żółw rysuje coś, co jest zbyt duże, aby zmieścić się w wyznaczonym obszarze, a zawijanie jest ustawione na <quote
>włączone</quote
>. <screenshot
> <screeninfo
>Oto, co się dzieje, gdy zawijanie jest <quote
>włączone</quote
></screeninfo
> <mediaobject
> <imageobject
> <imagedata fileref="wrapping.png" format="PNG"/> </imageobject
> <textobject
> <phrase
>Przykład zawijania</phrase
> </textobject
> </mediaobject
> </screenshot
> Gdy żółw przemieszcza się poza granicę obszaru, zostaje on natychmiast przeniesiony na przeciwną stronę tak, że może on kontynuować swój ruch. W ten sposób, żółw pozostaje zawsze widoczny na ekranie podczas gdy się porusza. Tak się dzieje, gdy zawijanie jest włączone.</para>
<para
>Zawijanie może być włączane i wyłączane za pomocą poleceń <userinput
>zawijaj</userinput
> oraz <userinput
>nie_zawijaj</userinput
>. Gdy program &kturtle; zostaje uruchomiony, zawijanie jest włączane domyślnie.</para
></glossdef>
</glossentry>

</glosslist>

</chapter>