<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.2-Based Variant V1.1//EN"
"dtd/kdex.dtd" [
  <!ENTITY kappname "&ksplash;">
  <!ENTITY package "kdebase">
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % Polish "INCLUDE">
]>

<book lang="&language;">

<bookinfo>
<title
>Podręcznik &ksplash;</title>

<authorgroup>
<author
>&Teemu.Rytilahti; &Teemu.Rytilahti.mail; </author>

<othercredit role="developer"
>&Brian.C.Ledbetter; &Brian.C.Ledbetter.mail; </othercredit>

<othercredit role="developer"
>&Ravikiran.Rajagopal; &Ravikiran.Rajagopal.mail; </othercredit>

<othercredit role="translator"
><firstname
>Krzysztof</firstname
><surname
>Woźniak</surname
><affiliation
><address
><email
>wozniakk@ceti.pl</email
></address
></affiliation
><contrib
>Polskie tłumaczenie</contrib
></othercredit
> 

</authorgroup>

<copyright>
<year
>2003</year>
<holder
>Teemu Rytilahti</holder>
</copyright>
<copyright>
<year
>2003-04</year>
<holder
>Ravikiran Rajagopal</holder>
</copyright>
<legalnotice
>&FDLNotice;</legalnotice>

<date
>2003-01-10</date>
<releaseinfo
>1.01.00</releaseinfo>

<abstract>
<para
>Program &ksplash; wyświetla efektowny ekran powitalny pokazujący postęp uruchamiania różnych programów w środowisku &kde;.</para>
</abstract>

<keywordset>
<keyword
>KDE</keyword>
<keyword
>kdebase</keyword>
<keyword
>ksplash</keyword>
<keyword
>ksplashml</keyword>
<keyword
>ekran powitalny</keyword>
<keyword
>efekty wizualne</keyword>
</keywordset>

</bookinfo>

<chapter id="introduction">
<title
>Wprowadzenie</title>

<para
>&ksplash; wyświetla ekran powitalny pokazujący postęp uruchamiania programów środowiska &kde;. Wszelkie problemy i zgłaszanie nowych możliwości powinny być kierowane na listy mailingowe &kde;. Najważniejsze cechy programu &ksplash;: </para>
<simplelist>
<member
>Możliwość konfiguracji za pomocą motywów</member>
<member
>Daje możliwość wykorzystania wtyczek w celu pełnego dopasowania do potrzeb użytkownika.</member>
<member
>Może z niego korzystać dowolny program dzięki mechanizmowi DCOP</member>
</simplelist>

<para
>Niniejszy podręcznik zawiera opis procedury tworzenia własnych tematów dla dostępnych w systemie wtyczek. Jeżeli żadna z dostępnych wtyczek nie zaspokaja potrzeb użytkownika, to możliwe jest stworzenie w języku C++ własnej wtyczki tak aby działanie &ksplash; w pełni odpowiadało jego gustom. </para>
</chapter>

<chapter id="using-themes">
<title
>Korzystanie z tematów</title>

<para
>Aby skorzystać z tematów pobranych ze stron <ulink url="http://www.kde-look.org"
>KDE-Look</ulink
>, należy je rozpakować do katalogu: <filename
>~/.kde/share/apps/ksplash/Themes/</filename
> dla pojedynczego użytkownika, lub do katalogu <filename
>$<envar
>KDEDIR</envar
>/share/apps/ksplash/Themes/</filename
> co udostępni go dla wszystkich użytkowników systemu.</para>

<para
>Automatyczne wykonanie tych czynności możliwa jest w module <guilabel
>Ekran powitalny</guilabel
> w menu <guilabel
>Wygląd i motywy</guilabel
> w centrum sterowania &kde;.</para>

<sect1 id="using-kcontrol-module">
<title
>Korzystanie z modułu &kcontrol;</title>

<para
>Moduł ten pozwala na instalację, testowanie i usuwanie tematów &ksplash;.</para>

<para
>W dolnej części oka modułu, wyświetlona zostanie lista dostępnych tematów dla &ksplash;. Po wybraniu pozycji z listy, w głównej części okna wyświetlony zostanie podgląd tematu. Jeżeli wybrany już zostanie żadana pozycja, należy nacisnąć przycisk <guibutton
>OK</guibutton
> lub <guibutton
>Zastosuj</guibutton
>. Naciśnięcie  <guibutton
>Anuluj</guibutton
> spowoduje zamknięcie okna bez akceptacji zmian, zaś naciśnięcie przycisku <guibutton
>Domyślne</guibutton
> przywróci standardowe ustawienia systemowe dla ekranu powitalnego.</para>

<para
>Instalacja nowych tematów możliwa jest za pomocą przycisku <guibutton
>Dodaj...</guibutton
>. Pojawi się okno wyboru pliku, w którym odszukujemy pobrany plik tematu. Nie trzeba go wcześniej rozpakowywać. Instalacja nowego tematu nie spowoduje jego automatycznej aktywacji, aby tego dokonać należy nacisnąć przycisk <guibutton
>OK</guibutton
> lub <guibutton
>Zastosuj</guibutton
>.</para>

<para
>Chociaż podgląd wybranego tematu jest widoczny w oknie konfiguracji tematów, to możliwy jest także podgląd działania tematu "na żywo" wraz z animacjami itp. Można go uruchomić wybierając temat z listy i naciskając przycisk<guibutton
>Testuj</guibutton
>,</para>

<para
>Możliwe jest usuwanie niewykorzystywanych tematów za pomocą przycisku <guibutton
>Usuń</guibutton
>. Należy jednak pamiętać, iż zalogowany użytkownik może nie mieć uprawnień do usuwania tematów systemowych, dostępnych dla pozostałych użytkowników. Zaleca się również zachowanie tematu <guilabel
>Domyślnego</guilabel
>.</para>

</sect1>

</chapter>

<chapter id="themes">
<title
>Tworzenie tematów dla &ksplash;</title>
<sect1 id="themes-general">
<title
>Informacje ogólne</title>
<para
>Utworzenie własnego tematu dla &ksplash; jest proste. Zachęcamy wszystkich użytkowników do przesyłania własnych tematów do <ulink url="http://www.kde-look.org"
>KDE-Look</ulink
> aby inni mogli z nich również skorzystać.</para>

<sect2 id="theme-syntax">
<title
>Nazwanie tematu</title>

<para
>Użytkownik chcący stworzyć temat o nazwie <literal
>MojFajnyTemat</literal
> musi umieścić go w katalogu <filename class="directory"
>MojFajnyTemat</filename
> znajdującym się w katalogu <filename class="directory"
>~/.kde/apps/ksplash/Themes/</filename
>, tylko wtedy &ksplash; będzie mógł z niego korzystać. W katalogu powinien zostać utworzony plik <filename
>Theme.rc</filename
> zawierający ustawienia konfiguracyjne tematu. Dostępnych jest bardzo dużo opcji konfigurujących zachowanie tematu, rodzaj wykorzystywanej wtyczki, itp. Nie trzeba jednak ustawiać każdej dostępnej opcji, zwykle mają one pewne wartości domyślne. Zasady wprowadzania parametrów w pliku <filename
>Theme.rc</filename
> mają prostą postać: <literal
>[opcja] = [wartość]</literal
>. Poniżej opisane zostaną dostępne opcje konfiguracyjne tematów.</para>

<example>
<title
>Przykład pliku <filename
>Theme.rc</filename
></title>
<programlisting
>[KSplash Theme: MojFajnyTemat]
Name = MojFajnyTemat
Description = Fajny temat korzystajacy z silnika XpLike
Version = 1.0
Author = Imie i nazwisko &lt;adresemail@mail.com&gt;
## Korzystaj z silnika XpLike.
Engine = XpLike
Show Icon = false
Welcome Text = Uruchamianie KDE
</programlisting>
</example>

<para
>Po wprowadzeniu nazwy, opisu i autora tematu, należy wybrać silnik tematu (nazywany także wtyczką). Następnie należy określić parametry specyficzne dla tego silnika, poprzez wprowadzenie par klucz-wartość podobnie jak w przykładzie pokazanym powyżej.</para>

<important>
<para
>Należy się upewnić czy katalog zawierający pliki tematu(<filename class="directory"
>~/.kde/apps/ksplash/Themes/MojFajnyTemat</filename
> w omawianym przykładzie) oraz jego identyfikator tematu (tutaj: <literal
>[KSplash Theme: MojFajnyTemat]</literal
>) w pliku <filename
>Theme.rc</filename
> są identyczne. W przeciwnym wypadku &ksplash; nie rozpozna tego tematu.</para>
</important>

</sect2>

<sect2 id="theme-files">
<title
>Pliki z obrazem tła</title>

<para
>Podczas uruchamiania &ksplash; próbuje odnaleźć plik tła (jeżeli dana wtyczka go wymaga) dla bieżącej rozdzielczości ekranu. Nazwa pliku tła powinna być następująca: <filename
>Background-<replaceable
>WWWxHHH</replaceable
>.png</filename
>.</para>

<para
>Przykładowo plik może nosić nazwę: <filename
>Background-1024x768</filename
>. Jeżeli program nie odnajdzie pliku tła o rozmiarach zgodnych z bieżącą rozdzielczością ekranu, nastąpi wtedy próba zmiany rozmiaru pliku oryginalnego tzn. <filename
>Background.png</filename
> lub pliku podanego w definicji tematu: <filename
>Theme.rc</filename
> i dopasowanie do bieżącej rozdzielczości. Taka zmiana zajmuje trochę czasu, dlatego też należy przygotować pliki tła dla najczęściej występujących rozdzielczości ekranu tzn: 1280x1024, 1024x768 oraz 800x600.</para>
</sect2>
</sect1>

<sect1 id="theme-engines">
<title
>Opcje dla silników tematów</title>

<sect2 id="default-themes">
<title
>Temat domyślny</title>
<table>
<title
>Opcje tematu domyślnego</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Objaśnienie</entry>
</row>
<!-- Statusbar -->
<row>
<entry
>Always Show Progress</entry>
<entry
>[true/false]</entry>
<entry
>Włącza lub wyłącza opcję pokazywania postępu uruchamiania. Wartość domyślna to: true</entry>
</row>
<row>
<entry
>Label Foreground</entry>
<entry
>[color]</entry>
<entry
>Określa kolor tekstu znajdującego się w pasku stanu. Wartość domyślna to #FFFFFF (biały).</entry>
</row>
<!-- Misc. things -->
<row>
<entry
>Icons Flashing</entry>
<entry
>[true/false]</entry>
<entry
>Włącza lub wyłącza <quote
>migotanie</quote
> ikon. Wartość domyślna to: true.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="standard-themes">
<title
>Temat standardowy</title>
<table>
<title
>Opcje tematu standardowego</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Objaśnienie</entry>
</row>
<!-- Statusbar -->
<row>
<entry
>Statusbar Position</entry>
<entry
>[top/bottom]</entry>
<entry
>Przełącza pozycję paska stanu. Wartość domyślna to dół ekranu (bottom).</entry>
</row>
<row>
<entry
>Statusbar Visible</entry>
<entry
>[true/false]</entry>
<entry
>Włącza lub wyłącza wyświetlanie paska stanu. Wartość domyślna to: true.</entry>
</row>
<row>
<entry
>Progress Visible</entry>
<entry
>[true/false]</entry>
<entry
>Włącza lub wyłącza opcję pokazywania postępu uruchamiania. Wartość domyślna to: true</entry>
</row>
<!-- Fonts -->
<row>
<entry
>Statusbar Font</entry>
<entry
>[fontname]</entry>
<entry
>Określa nazwę czcionki stosowanej w pasku stanu. Wartość domyślna to: Helvetica.</entry>
</row>
<row>
<entry
>Statusbar Font Size</entry>
<entry
>[size]</entry>
<entry
>Wielkość czcionki dla tekstu paska stanu. Wartość domyślna to 16.</entry>
</row>
<row>
<entry
>Statusbar Font Bold</entry>
<entry
>[true/false]</entry>
<entry
>Włącza pogrubienie czcionki w pasku stanu. Wartość domyślna to: true.</entry>
</row>
<row>
<entry
>Statusbar Font Italic</entry>
<entry
>[true/false]</entry>
<entry
>Włącza pochylenie czcionki w pasku stanu. Wartość domyślna to: false.</entry>
</row>
<!-- Misc. things -->
<row>
<entry
>Statusbar Foreground</entry>
<entry
>[color]</entry>
<entry
>Określa kolor tekstu w pasku stanu. Wartość domyślna to: white (biały).</entry>
</row>
<row>
<entry
>Statusbar Background</entry>
<entry
>[color]</entry>
<entry
>Określa kolor tła dla paska stanu. Wartość domyślna to: black (czarny).</entry>
</row>
<row>
<entry
>Statusbar Icon</entry>
<entry
>[true/false]</entry>
<entry
>Włącza wyświetlanie ikony dla paska stanu.</entry>
</row>
<row>
<entry
>Icons Visible</entry>
<entry
>[true/false]</entry>
<entry
>Włącza lub wyłącza pokazywanie ikon. Wartość domyślna to: true.</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Włącza lub wyłącza podskakiwanie ikon. Wartość domyślna to: true.</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[0-3,10-13]</entry>
<entry
>Pozycja wyświetlania ikon. Wartość domyślna to: bottom-left (w dolnej lewej części ekranu)</entry>
</row>
<row>
<entry
>Splash Screen</entry>
<entry
>[name]</entry>
<entry
>Zmienia wyświetlany na ekranie powitalnym obrazek.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="redmond-themes">
<title
>Temat Redmond</title>
<table>
<title
>Opcje dla tematu Redmond</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Objaśnienie</entry>
</row>
<!-- Main elements -->
<row>
<entry
>Background Image</entry>
<entry
>[filename]</entry>
<entry
>Pozwala na określenie przez użytkownika własnego obrazu tła.</entry>
</row>
<row>
<entry
>User Icon</entry>
<entry
>[Iconname]</entry>
<entry
>Nazwa standardowego zestawu wyświetlanych ikon. Wartością domyślną jest zestaw <constant
>go</constant
>. </entry>
</row>
<row>
<entry
>Welcome Text</entry>
<entry
>[text]</entry>
<entry
>Napis wyświetlany na ekranie powitalny. Wartość domyślna to: "Welcome".</entry>
</row>
<row>
<entry
>Username Text</entry>
<entry
>[text]</entry>
<entry
>Tekst wyświetlany zamiast rzeczywistej nazwy użytkownika.</entry>
</row>
<!-- Positioning elements -->
<row>
<entry
>Welcome Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Pozycja wyświetlania tekstu powitalnego na ekranie.</entry>
</row>
<row>
<entry
>Username Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Pozycja wyświetlania nazwy użytkownika na ekranie.</entry>
</row>
<row>
<entry
>Action Text Position</entry>
<entry
>[x,y]</entry>
<entry
>Pozycja wyświetlania bieżącej akcji na ekranie.</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[x,y]</entry>
<entry
>Pozycja wyświetlania ikony użytkownika na ekranie.</entry>
</row>
<!-- Show to show.. -->
<row>
<entry
>Show Welcome Text</entry>
<entry
>[true/false]</entry>
<entry
>Włącza lub wyłącza wyświetlanie tekstu powitalnego. Wartość domyślna to: true.</entry>
</row>
<row>
<entry
>Show Welcome Shadow</entry>
<entry
>[true/false]</entry>
<entry
>Włącza wyświetlanie cienia dla tekstu powitalnego. Wartość domyślna to: true.</entry>
</row>
<row>
<entry
>Show Username</entry>
<entry
>[true/false]</entry>
<entry
>Włącza wyświetlanie nazwy użytkownika. Wartość domyślna to: true.</entry>
</row>
<row>
<entry
>Show Action</entry>
<entry
>[true/false]</entry>
<entry
>Włącza lub wyłącza wyświetlanie aktualnie wykonywanej czynności. Wartość domyślna to: true.</entry>
</row>
<row>
<entry
>Show Icon</entry>
<entry
>[true/false]</entry>
<entry
>Włącza lub wyłącza wyświetlanie ikon. Wartość domyślna to: true.</entry>
</row>
<row>
<entry
>Use KDM User Icon</entry>
<entry
>[true/false]</entry>
<entry
>Wyświetla ikonę logowania użytkownika. Wartość domyślna to: true.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="macx-themes">
<title
>Temat MacX</title>
<table>
<title
>Opcje dla tematu MacX</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Objaśnienie</entry>
</row>
<row>
<entry
>Icon Size Minimum</entry>
<entry
>[size]</entry>
<entry
>Ustawia minimalny rozmiar ikon. Wartość domyślna to: 16.</entry>
</row>
<row>
<entry
>Icon Size Maximum</entry>
<entry
>[size]</entry>
<entry
>Ustawia maksymalny rozmiar ikon. Wartość domyślna to: 84.</entry>
</row>
<row>
<entry
>Optimized Icon Rendering</entry>
<entry
>[true/false]</entry>
<entry
>Włącza optymalizację wyświetlania ikon. Wartość domyślna to: true.</entry>
</row>
<row>
<entry
>Progress Bar Visible</entry>
<entry
>[true/false]</entry>
<entry
>Wartość domyślna to: true.</entry>
</row>
<row>
<entry
>Progress Bar Position</entry>
<entry
>[top/bottom]</entry>
<entry
>Określa położenie paska postępu. Wartość domyślna to: bottom (dół ekranu).</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Włącza lub wyłącza podskakiwanie ikon. Wartość domyślna to: false.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="mac-classic-themes">
<title
>Temat MacClassic</title>
<table>
<title
>Opcje dla tematu MacClassic</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Objaśnienie</entry>
</row>
<row>
<entry
>Icon Position</entry>
<entry
>[0-3,10-13]</entry>
<entry
>Miejsce wyświetlania ikon na ekranie. Wartością domyślną jest: bottom left (lewy dół).</entry>
</row>
<row>
<entry
>Icons Jumping</entry>
<entry
>[true/false]</entry>
<entry
>Włącza lub wyłącza podskakiwanie ikon. Wartość domyślna to: false.</entry>
</row>
<row>
<entry
>Icons Visible</entry>
<entry
>[true/false]</entry>
<entry
>Włącza lub wyłącza pokazywanie ikon. Wartość domyślna to: true.</entry>
</row>
<row>
<entry
>Splash Screen</entry>
<entry
>[name]</entry>
<entry
>Zmienia wyświetlany na ekranie powitalnym obrazek.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="themes-2k">
<title
>Temat 2k </title>
<table>
<title
>Opcje dla tematu 2k</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Name</entry>
<entry
>Argument</entry>
<entry
>Objaśnienie</entry>
</row>
<row>
<entry
>Title Background Color</entry>
<entry
>[color]</entry>
<entry
>Kolor tła dla tytułu. Wartość domyślna to: dark blue (ciemno niebieski).</entry>
</row>
<row>
<entry
>Title Foreground Color</entry>
<entry
>[color]</entry>
<entry
>Kolor tekstu tytułu. Wartość domyślna to: white (biały).</entry>
</row>
<row>
<entry
>Status Text Color</entry>
<entry
>[color]</entry>
<entry
>Kolor tekstu stanu. Wartością domyślną jest kolor tła dla tekstu tytułu.</entry>
</row>
<row>
<entry
>Rotator Color 1</entry>
<entry
>[color]</entry>
<entry
>Określa kolor wiatraka 1. Wartość domyślna to kolor ciemno niebieski (dark blue).</entry>
</row>
<row>
<entry
>Rotator Color 2</entry>
<entry
>[color]</entry>
<entry
>Określa kolor wiatraka 2. Wartość domyślna to kolor modry (cyan).</entry>
</row>
<row>
<entry
>Rotator Speed</entry>
<entry
>[value]</entry>
<entry
>Szybkość obrotu wiatraka. Wartość domyślna to 30.</entry>
</row>
<row>
<entry
>Window Title</entry>
<entry
>[text]</entry>
<entry
>określa tekst wyświetlany w tytule okna.</entry>
</row>
<row>
<entry
>Logo File</entry>
<entry
>[filename]</entry>
<entry
>Określa plik z obrazem do wyświetlenia.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>
</sect1>
</chapter>

<chapter id="from-other-applications">
<title
>Wykorzystanie &ksplash; w programach użytkownika.</title>

<para
>W tym rozdziale opisany jest sposób wykorzystania &ksplash; w programach tworzonych przez użytkownika. Jeżeli czytelnik nie tworzy programów dla środowiska &kde;, to może pominąć tą część.</para>

<sect1 id="basic-other-reqs">
<title
>Podstawowe wymagania</title>

<para
>Tworzona aplikacja &kde; musi wykorzystywać mechanizm &DCOP; tzn. technologię komunikacji pomiędzy programami w środowisku &kde;. W przypadku wykorzystania <ulink url="http://developer.kde.org"
>szkieletu aplikacji &kde;</ulink
> dzieje się to automatycznie. Więcej informacji dotyczących &DCOP; i innych technologii środowiska &kde; dostępnych jest na stronach <ulink url="http://developer.kde.org"
>dla programistów i twórców &kde;</ulink
>.</para>
</sect1>

<sect1 id="other-using">
<title
>Uruchamianie &ksplash;</title>

<para
>Zanim program użytkownika rozpocznie pracę obciążającą procesor lub przed rozpoczęciem jej ładowania itp. należy wywołać &ksplash; w sposób następujący:</para>

<programlisting
>DCOPClient *c = kapp-&gt;dcopClient();
QString error;
QCString KSplashName;
int pid = 0;
QStringList args;
args &lt;&lt; "--theme=MyCoolTheme" &lt;&lt; "--managed";
if (kapp-&gt;startServiceByDesktopName("ksplash", args, &amp;error,
&amp;KSplashName, &amp;pid))
{
  KMessageBox::sorry(0, error, "Unable to invoke KSplash");
  // Some error processing here.
}
</programlisting>

<para
>W przykładzie przyjęto założenie, iż uruchomione zostało tylko jedno wystąpienie programu &ksplash;. Inne przypadki są bardziej złożone, a ich opis dostępny jest w dokumentacji mechanizmu &DCOP;.</para>
</sect1>

<sect1 id="show-messages">
<title
>Wyświetlanie komunikatów</title>

<para
>Zanim wyświetlone zostaną jakiekolwiek komunikaty, należy określić ilość wyświetlanych etapów (kroków) uruchamiania. Na przykład procedura uruchamiania środowiska &kde; zawiera 7 kroków.</para>

<programlisting
>QByteArray data;
    QDataStream arg(data,IO_WriteOnly);
    arg &lt;&lt; someNumber;
    if (!(c-&gt;send(KSplashName, "KSplashIface", "setStartupItemCount(int)",
data))
      // Some error processing here.
</programlisting>

<para
>Zawsze gdy należy wyświetlić wiadomość (z ikoną lub bez) należy wywołać funkcję</para>

<programlisting
>arg &lt;&lt; QString("iconName") &lt;&lt; QString("programName") &lt;&lt;
QString("Some description");
    if (!(c-&gt;send(KSplashName, "KSplashIface",
"programStarted(QString,QString,QString)", data))
    {
      // Some error processing here.
    }
</programlisting>

<para
>Każde wywołanie funkcji <constant
>programStarted</constant
>, zwiększa licznik kroków uruchamiania. Jeżeli program skończy się uruchamiać to poniższy kod zamyka ekran powitalny:</para>

<programlisting
>if (!(c-&gt;send(KSplashName, "KSplashIface", "startupComplete()", data))
    {
      // obsługa błędów.
    }
</programlisting>

<para
>To wszystko !. Nic już więcej nie trzeba robić, aby skorzystać z możliwości, które oferuje program  &ksplash;.</para>

</sect1>
</chapter>

<!-- FIXME: Better to leave this out until it's written, or the translators -->
<!-- will have to still translate it ... -->

<chapter id="wrplugins">
<title
>Tworzenie wtyczek dla programu &ksplash;</title>

<para
>Tworzenie nowych wtyczek dla programu &ksplash; jest stosunkowo proste. W tym rozdziale, pokazana zostanie procedura tworzenia prostej wtyczki, która będzie naśladować ekran powitalny pewnego dobrze znanego systemu operacyjnego. Dla zrozumienia zawartości tego rozdziału użytkownik powinien znać podstawy języka C++ oraz zasady budowy aplikacji dla KDE/Qt.</para>

<sect1 id="basic-requirements">
<title
>Podstawowe wymagania</title>
<para
>Utworzona zostanie wtyczka o nazwie <literal
>2k</literal
>. Nazwa wtyczki wykorzystywana jest w wielu różnych miejscach, i ważne jest aby była konsekwentnie używana aby mogła zostać rozpoznana przez &ksplash;. Wtyczki &ksplash; są dynamicznie ładowanymi bibliotekami, których powinny być nazwane zgodnie z poniższą konwencją: </para>
<simplelist>
<member
>Biblioteka powinna mieś nazwę <filename
>ksplash+nazwa_wtyczki_małymi_literami</filename
>. W opisywanym przykładzie, będzie to nazwa <filename
>ksplash2k</filename
>.</member>
<member
>Oprócz biblioteki, powinien istnieć odpowiadający jej plik desktop o nazwie <filename
>ksplash+nazwa_wtyczki_małymi_literami.desktop</filename
>. W opisywanym przykładzie, będzie to <filename
>ksplash2k.desktop</filename
>. </member>
<member
>Obiekt zwracanym przez bibliotekę, powinien być klasą o nazwie <literal
>Theme+nazwa_tematu</literal
>. Tutaj będzie to <literal
>Theme2k</literal
>.</member>
</simplelist>
<para
>Jeżeli powyższe informacje wydają się niezrozumiałe, to nie należy się tym martwić. W dalszej części zostanie przedstawione więcej szczegółów na ten temat. Kolejnym istotnym wymaganiem jest to, aby klasa nowej wtyczki była potomna wobec klasy <literal
>ThemeEngine</literal
>. </para>
</sect1>
<sect1 id="skeleton">
<title
>Tworzenie szkieletu programu</title>
<para
>Ponieważ wykorzystany zostanie standardowy szablon aplikacji &kde;, nie będzie konieczne tworzenie kodu uzależnionego od platformy sprzętowej, na której program będzie uruchamiany. Aby skorzystać z szablonu należy zainstalować pakiet <filename
>kdesdk</filename
>. Utworzenie szkieletu programu sprowadza się do uruchomienie polecenia <literal
>kapptemplate</literal
>, które utworzy główny katalog programu "2k" wraz z pewnymi typowymi plikami jak np. AUTHORS, itp. Najważniejsza część programu znajdzie się w podkatalogu <filename class="directory"
>2k</filename
>. Należy przejść do niego oraz wykasować wszystkie znajdujące się tam pliki. W tym momencie szkielet aplikacji jest już gotowy. </para>
<para
>Następnym krokiem jest utworzenie pliku <filename
>.desktop</filename
>, którego celem jest informowanie programu &ksplash; o dostępności tworzonej wtyczki. Należy stosować konsekwencję nazywania plików opisaną w <link linkend="basic-requirements"
>poprzedniej części</link
> i utworzyć plik o nazwie <filename
>ksplash2k.desktop</filename
> w odpowiednim katalogu. Powinien mieć on następującą zawartość: </para>
<programlisting
><literal>
[Desktop Entry]
Encoding=UTF-8
Type=Service
Comment=KSplash Plugin
Name=KSplash2k
ServiceTypes=KSplash/Plugin
X-KDE-Library=ksplash2k
X-KSplash-Default=true
X-KSplash-PluginName=2k
X-KSplash-ObjectName=Theme2k
</literal
>
</programlisting>
<para
>Parametry <literal
>Encoding</literal
>, <literal
>Type</literal
>, <literal
>Comment</literal
> oraz <literal
>ServiceTypes</literal
> są takie same jak we wszystkich innych wtyczkach. Nazwa wtyczki i nazwa biblioteki musi być zgodna z omawianą wcześniej konwencją nazewniczą. Parametr <literal
>X-KSplash-Default</literal
> zawiera wartość true lub false (prawda lub fałsz) określając czy wtyczka będzie widoczna w oknie modułu konfiguracji wtyczek. Poza bardzo wyjątkowymi sytuacjami, parametr ten powinien mieć wartość <constant
>true</constant
>. </para>
</sect1>
<sect1 id="headerfile">
<title
>Deklaracja klasy: plugin</title>
<para
>Po zakończeniu prac przygotowawczych, należy przejść do najciekawszej części - stworzenia klasy z programem określającym wymagane przez użytkownika zachowanie. Mimo tego, iż użytkownik może nakazać programowi wykonanie dowolnych czynności, to powinien pamiętać o kilku ograniczeniach.</para>
<orderedlist>
<listitem
><para
>Klasa Plugin musi dziedziczyć klasę <constant
>ThemeEngine</constant
>.</para
></listitem>
<listitem
><para
>Wtyczka musi być nazwana zgodnie z zasadą: <classname
>Theme+Nazwa_Wtyczki</classname
>.</para
></listitem>
<listitem
><para
>Klasa powinna zawierać definicję statycznej funkcji typu o nazwie <function
>names</function
> zwracającej listę nazw używanych do uruchamiania wtyczki.</para
></listitem>
<listitem
><para
>Jeżeli wtyczka ma być konfigurowana w module centrum sterowania, to kod programu powinien zawierać zdefiniowaną klasę bazującą na klasie <literal
>ThemeEngineConfig</literal
> umożliwiającą konfigurację wtyczki.</para
></listitem>
<listitem
><para
>Aby wtyczka mogła funkcjonować, to jej klasa musi zawierać definicję - zastąpienie - co najmniej jednej z następujących funkcji wirtualnych: <function
>slotSetText</function
>, <function
>slotSetPixmap</function
>, <function
>slotUpdateProgress</function
> lub <function
>slotUpdateSteps</function
>.</para
></listitem>
<listitem
><para
>Konstruktor powinien być następujący <literal
>ThemeEngine( QWidget *parent, const char *name, const QStringList &amp;args )</literal
> tak aby mógł być wykorzystany przez klasę <classname
>KGenericFactory</classname
>.</para
></listitem>
</orderedlist>
<para
>Ostatnie wymaganie może wydawać się skomplikowane, jednak jak okaże się to poniżej, poprzez dodanie jednego wiersza to kodu programu, można go praktycznie zignorować.</para>
</sect1>
<sect1 id="headercode">
<title
>Kod dla pliku nagłówkowego</title>
<para
>Poniżej przedstawiono zawartość pliku nagłówkowego <filename
>theme2k.h</filename
> uwzględniającego powyższe wymagania:</para>
<example>
<title
>Zawartość pliku <filename
>theme2k.h</filename
></title>
<programlisting
>#ifndef __THEME2K_H__
#define __THEME2K_H__

#include &lt;qlabel.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kdialogbase.h&gt;
#include &lt;kpixmap.h&gt;
#include &lt;ksplash/themeengine.h&gt;

class RotWidget;

class Cfg2k: public ThemeEngineConfig
{
  Q_OBJECT
public:
  Cfg2k( KConfig * );
};

class ObjKsTheme;
class Theme2k: public ThemeEngine
{
  Q_OBJECT
public:
  Theme2k( QWidget *, const char *, const QStringList&amp; );

  inline const QString name()
  {
    return( QString("KSplash2k") );
  }
  inline const KDialogBase *config( KConfig *kc )
  {
    return new Cfg2k( kc );
  }
  static QStringList names()
  {
    QStringList Names;
    Names &lt;&lt; "KSplash2k";
    Names &lt;&lt; "ks2k";
    Names &lt;&lt; "2k";
    Names &lt;&lt; "2000";
    return( Names );
  };

public slots:
  inline void slotSetText( const QString&amp; s )
  {
    if( mText &amp;&amp; mText-&gt;text() != s ) mText-&gt;setText( s );
  };

private:
  void initUi();
  void readSettings();

  QLabel *mText;
  RotWidget *mRotator;
  QColor mTBgColor, mTFgColor, mRotColor1, mRotColor2, mStatusColor;
  int mRotSpeed;
  QString mWndTitle, mLogoFile;
};

#endif
</programlisting>
</example>
<para
>Analizując zawartość powyższego kodu programu zauważyć można następujące elementy. Klasa <classname
>Theme2k</classname
> została nazwana zgodnie z omawianą wcześniej konwencją nazewniczą, jest potomna względem klasy <classname
>ThemeEngine</classname
>. Zawiera ona metodę <methodname
>Theme2k::names()</methodname
> oraz konstruktor obsługujący wymagane parametry wtyczki: <function
>Theme2k( QWidget *, const char *, const QStringList&amp; );</function
> dodatkowo zdefiniowana została metoda <methodname
>Theme2k::slotSetText()</methodname
>.Na razie nie należy zwracać uwagi na klasę <classname
>RotWidget</classname
>, która udostępnia obsługę miłych dla oka elementów interfejsu użytkownika. Omawiana w przykładzie wtyczka jest bardzo prosta, nie wyświetla ona żadnych ikon czy też paska postępu. Jeżeli użytkownik chciałby wyświetlać ikony, to powinien zdefiniować funkcję <function
>slotSetPixmap</function
>. Istnieją również funkcje określające rozmiar - ilość kroków - paska postępu (<function
>slotUpdateSteps</function
>) oraz zwiększające pozycję na pasku (<function
>slotUpdateProgress</function
>) o jeden krok. </para>
</sect1>
<sect1 id="Implementation">
<title
>Kod implementacji wtyczki</title>
<para
>Omówione zostały tylko najważniejsze części implementacji. Pełny kod programu dostępny jest w załączniku. Pierwszą częścią jest zadeklarowanie wymaganych bibliotek:</para>
<example>
<title
>Wymagane biblioteki</title>
<programlisting
>K_EXPORT_COMPONENT_FACTORY( ksplash2k, KGenericFactory&lt;Theme2k&gt; );
</programlisting>
</example>
<para
>Makro <constant
>K_EXPORT_COMPONENT_FACTORY</constant
> jest zdefiniowane w pliku <filename
>kgenericfactory.h</filename
>. Kontynuując, ponieważ jest to bardzo prosta wtyczka, to konstruktor klasy jest bardzo prosty.</para>
<example>
<title
>Konstruktor wtyczki</title>
<programlisting
>Theme2k::Theme2k( QWidget *parent, const char *name, const QStringList &amp;args
 )
    :ThemeEngine( parent, name, args )
{
  readSettings();
  initUi();
}
</programlisting>
</example>
<para
>Metoda <function
>readSettings()</function
> pokazuje właściwy sposób odczytywania ustawień tematu. (Jest to niezbędne gdy chcemy aby inni użytkownicy korzystali z tworzonej wtyczki przy tworzeniu własnych tematów)</para>
<example>
<title
>Odczyt opcji konfiguracji tematu</title>
<programlisting
>void Theme2k::readSettings()
{
  if( !mTheme )
    return;

  KConfig *cfg = mTheme-&gt;themeConfig();
  if( !cfg )
    return;

  cfg-&gt;setGroup( QString("KSplash Theme: %1").arg(mTheme-&gt;theme()) );

  QColor DefaultTBgColor( Qt::darkBlue );
  QColor DefaultTFgColor( Qt::white );

  mTBgColor = cfg-&gt;readColorEntry( "Title Background Color",
&amp;DefaultTBgColor );
  mTFgColor = cfg-&gt;readColorEntry( "Title Foreground Color",
&amp;DefaultTFgColor );
  mStatusColor = cfg-&gt;readColorEntry("Status Text Color", &amp;mTBgColor );

  QColor DefaultRot1( Qt::darkBlue );
  QColor DefaultRot2( Qt::cyan );
  mRotColor1 = cfg-&gt;readColorEntry( "Rotator Color 1", &amp;DefaultRot1 );
  mRotColor2 = cfg-&gt;readColorEntry( "Rotator Color 2", &amp;DefaultRot2 );

  mRotSpeed = cfg-&gt;readNumEntry( "Rotator Speed", 30 );
  mWndTitle = cfg-&gt;readEntry( "Window Title", i18n("Please wait...") );
  mLogoFile = cfg-&gt;readEntry( "Logo File", QString::null );
}
</programlisting>
</example>
<para
>Ponieważ należy dbać o użytkownika, ważne jest aby dopasować rozsądne wartości domyślne dla parametrów nie zdefiniowanych w pliku tematu. Należy pamiętać, aby zawsze ustawić grupę na "KSplash Theme: nazwa_tematu" aby zachować zgodność z przyszłymi możliwymi specyfikacjami tematów. Metoda <function
>initUI()</function
> nie jest zbyt interesująca, ponieważ jedynie tworzy elementy kontrolne interfejsu użytkownika. Więcej na ten temat w załączniku. </para>
</sect1>
<sect1 id="compilingfile">
<title
>Kompilacja wtyczki</title>
<para
>Ponieważ do kompilacji wtyczki wykorzystywane jest środowisko programistyczne &kde; to niezbędne jest utworzenie pliku <filename
>Makefile.am</filename
>. Powinien on wyglądać tak:</para>
<example>
<title
>Zawartość pliku <filename
>Makefile.am</filename
></title>
<programlisting
>INCLUDES = $(all_includes)

kde_module_LTLIBRARIES = ksplash2k.la

ksplash2k_la_SOURCES = theme2k.cpp rotwidget.cpp
ksplash2k_la_LDFLAGS = $(all_libraries) $(KDE_RPATH)
ksplash2k_la_LIBADD = $(LIB_KDEUI) -lksplashthemes

METASOURCES = AUTO

noinst_HEADERS        = theme2k.h rotwidget.h

servicesdir = $(kde_servicesdir)
services_DATA = ksplash2k.desktop

themedir = $(kde_datadir)/ksplash/Themes/2k
theme_DATA = Theme.rc Preview.png
</programlisting>
</example>
<para
>Więcej informacji dotyczących tworzenia plików <filename
>Makefile.am</filename
> dla programów środowiska &kde; znajduje się na <ulink url="http://developer.kde.org/documentation/other/makefile_am_howto.html"
> stronach</ulink
> deweloperów &kde;. Jedyną rzeczą o której należy pamiętać jest utworzenie domyślnego tematu bazującego na utworzonej wtyczce wraz z odpowiednim obrazkiem podglądu. W dobrym tonie jest również przygotowanie przykładowego pliku <filename
>Theme.rc</filename
> zawierającego komentarze ilustrujące działanie różnorodnych opcji konfiguracyjnych.</para>
</sect1>
</chapter>

<chapter id="faq">
<title
>Pytania i odpowiedzi</title>
&reporting.bugs; &updating.documentation; <qandaset id="faqlist">
<qandaentry>
<question>
<para
>Dlaczego nie mogę znaleźć żadnych tematów pracujących z &ksplash;?</para>
</question>
<answer>
<para
>Prawdopodobnie nie zainstalowano właściwych wtyczek. Są one dostępne w pakiecie <literal
>kde-artwork</literal
>. Należy go pobrać, zainstalować i spróbować ponownie.</para>
</answer>
</qandaentry>
<qandaentry>
<question>
<para
>Do czego służy plik <filename
>Theme.rc</filename
> i jak można go utworzyć?</para>
</question>
<answer>
<para
>Plik <filename
>Theme.rc</filename
> zawiera ustawienia tematu. Więcej informacji dotyczących konfiguracji tematów zawiera część <link linkend="themes"
>Tworzenie tematów dla &ksplash;</link
>. </para>
</answer>
</qandaentry>
</qandaset>
</chapter>

<chapter id="credits">
<title
>Zasługi i licencje</title>

<para
>&ksplash;</para>

<para
>Prawa autorskie do programu &copy; 2003 &Ravikiran.Rajagopal; &Ravikiran.Rajagopal.mail;</para>

<itemizedlist>
<title
>Współtwórcy</title>
<listitem
><para
>&Brian.C.Ledbetter; &Brian.C.Ledbetter.mail;</para>
</listitem>
</itemizedlist>

<para
>Prawa autorskie do dokumentacji &copy; 2003 &Teemu.Rytilahti; &Teemu.Rytilahti.mail;</para>
&underFDL; &underGPL; </chapter>

<appendix id="installation">
<title
>Instalacja</title>

<sect1 id="requirements">
<title
>Wymagania</title>

<para
>Do poprawnego działania &ksplash; wymagane jest środowieko &kde; w wersji 3.2 lub wyższej. Niektóre tematy mogą wymagać specjalnych wtyczek, jeżeli dany temat nie działa, to należy się skontaktować z jego autorem i zorientować się gdzie można pozyskać właściwą wtyczkę.</para>

</sect1>

<sect1 id="compilation">
<title
>Kompilacja i instalacja</title>
&install.compile.documentation; </sect1>
</appendix>
<appendix id="srccode">
<title
>Kod źródłowy</title>
<sect1 id="theme2kcpp">
<title
>Zawartość pliku <filename
>theme2k.cpp</filename
></title>
<programlisting
>#include &lt;qlabel.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kapplication.h&gt;
#include &lt;kconfig.h&gt;
#include &lt;kdebug.h&gt;
#include &lt;kdialogbase.h&gt;
#include &lt;kgenericfactory.h&gt;
#include &lt;kglobalsettings.h&gt;
#include &lt;klocale.h&gt;
#include &lt;ksplash/objkstheme.h&gt;
#include &lt;kstandarddirs.h&gt;

#include "rotwidget.h"
#include "theme2k.h"
#include "theme2k.moc"

K_EXPORT_COMPONENT_FACTORY( ksplash2k, KGenericFactory&lt;Theme2k&gt; );

Cfg2k::Cfg2k( KConfig * )
{}

Theme2k::Theme2k( QWidget *parent, const char *name, const QStringList &amp;args
 )
    :ThemeEngine( parent, name, args )
{
  readSettings();
  initUi();
}

void Theme2k::initUi()
{
  QVBox *vbox = new QVBox( this );
  vbox-&gt;setFrameShape( QFrame::WinPanel );
  vbox-&gt;setFrameShadow( QFrame::Raised );

  QHBox *labelBox = new QHBox( vbox );
  labelBox-&gt;setPalette( mTBgColor );
  labelBox-&gt;setMargin( 1 );
  QLabel *lbl = new QLabel( mWndTitle, labelBox );
  lbl-&gt;setFont( QFont( "Arial", 12, QFont::Bold ) );
  lbl-&gt;setPaletteForegroundColor( mTFgColor );

  QLabel *logo = new QLabel( vbox );
  logo-&gt;setPalette( Qt::white );

  QString px( locate( "appdata", mTheme-&gt;themeDir() +
(mLogoFile.isNull()?QString("/Logo.png"):mLogoFile) ) );
  if (px.isNull())
    px = locate("appdata","Themes/Default/splash_top.png");
  if( !px.isNull() )
  {
    QPixmap pix( px );
    logo-&gt;setPixmap( pix );
  }
  else
  {
    logo-&gt;setText( "&lt;B&gt;KDE&lt;/B&gt;2000" );
    logo-&gt;setAlignment( AlignCenter|AlignVCenter );
  }

  mRotator = new RotWidget( vbox, mRotColor1, mRotColor2, mRotSpeed );

  QHBox *hbox = new QHBox( vbox );
  labelBox-&gt;setSpacing( 4 );
  labelBox-&gt;setMargin( 4 );

  mText = new QLabel( hbox );
  mText-&gt;setPaletteForegroundColor( mStatusColor );
  mText-&gt;setPaletteBackgroundColor( mTFgColor );
  mText-&gt;setText( mWndTitle );
  mText-&gt;setFixedHeight( 48 );

  setFixedSize( vbox-&gt;sizeHint() );
  QRect rect(KGlobalSettings::splashScreenDesktopGeometry());
  move( rect.x() + (rect.width() - size().width())/2,
        rect.y() + (rect.height() - size().height())/2 );
}

void Theme2k::readSettings()
{
  if( !mTheme )
    return;

  KConfig *cfg = mTheme-&gt;themeConfig();
  if( !cfg )
    return;

  cfg-&gt;setGroup( QString("KSplash Theme: %1").arg(mTheme-&gt;theme()) );

  QColor DefaultTBgColor( Qt::darkBlue );
  QColor DefaultTFgColor( Qt::white );

  mTBgColor = cfg-&gt;readColorEntry( "Title Background Color",
&amp;DefaultTBgColor );
  mTFgColor = cfg-&gt;readColorEntry( "Title Foreground Color",
&amp;DefaultTFgColor );
  mStatusColor = cfg-&gt;readColorEntry("Status Text Color", &amp;mTBgColor );

  QColor DefaultRot1( Qt::darkBlue );
  QColor DefaultRot2( Qt::cyan );
  mRotColor1 = cfg-&gt;readColorEntry( "Rotator Color 1", &amp;DefaultRot1 );
  mRotColor2 = cfg-&gt;readColorEntry( "Rotator Color 2", &amp;DefaultRot2 );

  mRotSpeed = cfg-&gt;readNumEntry( "Rotator Speed", 30 );
  mWndTitle = cfg-&gt;readEntry( "Window Title", i18n("Please wait...") );
  mLogoFile = cfg-&gt;readEntry( "Logo File", QString::null );
}
</programlisting>
</sect1>
<sect1 id="rotwidgeth">
<title
>Zawartość pliku <filename
>rotwidget.h</filename
></title>
<programlisting
>#ifndef         __ROTWIDGET_H__
#define         __ROTWIDGET_H__

#include &lt;qlabel.h&gt;
#include &lt;qtimer.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kdialogbase.h&gt;
#include &lt;kpixmap.h&gt;

/**
 * @short Display a rotating-gradient widget.
 */
class         RotWidget: public QWidget
{
  Q_OBJECT
public:
  RotWidget( QWidget *, const QColor&amp;, const QColor&amp;, int );
  ~RotWidget();

private slots:
  void stepEvent();

protected:
  void        preparePixmap( int );
  void        paintEvent( QPaintEvent * );
  void        resizeEvent( QResizeEvent * );

  QColor m_color1, m_color2;
  int m_step, m_speed;
  QTimer *m_stepTimer;

  QList&lt;KPixmap&gt; m_stepPixmap;
};

#endif
</programlisting>
</sect1>
<sect1 id="rotwidgetcpp">
<title
>Zawartość pliku <filename
>rotwidget.cpp</filename
></title>
<programlisting
>#include &lt;kdebug.h&gt;
#include &lt;kdialogbase.h&gt;
#include &lt;kpixmapeffect.h&gt;

#include &lt;qlabel.h&gt;
#include &lt;qpainter.h&gt;
#include &lt;qwidget.h&gt;

#include "rotwidget.h"
#include "rotwidget.moc"

RotWidget::RotWidget( QWidget *parent, const QColor&amp; c1, const QColor&amp;
c2, int sp )
    :QWidget(parent), m_color1(c1), m_color2(c2), m_step(0), m_speed(sp)
{
  if( (m_speed &lt;= 0) || (m_speed &gt; 20) )
    m_speed = 1;
  setFixedHeight( 6 );

  for( int i = 0; i &lt;= width(); i++ )
    preparePixmap( i );

  m_stepTimer = new QTimer( this );
  connect(m_stepTimer, SIGNAL(timeout()), this, SLOT(stepEvent()));
  m_stepTimer-&gt;start( 50 );
}

RotWidget::~RotWidget()
{
}

void RotWidget::stepEvent()
{
  // This is inefficient as we create too many pixmaps, optimize later.
  m_step += m_speed;
  if( m_step &gt; width() )
    m_step = 0;
  repaint( true );
}

// Todo: Optimize drawing.
void RotWidget::paintEvent( QPaintEvent *pe )
{
  QPainter p;
  p.begin( this );

  QRect r = pe-&gt;rect();

  if( m_stepPixmap.at( m_step ) )
    bitBlt( this, r.x(), r.y(), m_stepPixmap.at( m_step ), r.x(), r.y(),
r.width(), r.height() );
  else
    p.fillRect( rect(), Qt::black );
  p.end();
}

void RotWidget::resizeEvent( QResizeEvent *re )
{
  m_stepPixmap.clear();
  for( int i = 0; i &lt;= re-&gt;size().width(); i++ )
    preparePixmap( i );
}

void RotWidget::preparePixmap( int step )
{
  if( step &lt; 0 )
    return;

  // Explicitly draw our first pixmap. The rest we will bitBlt() from here.
  if( step == 0 )
  {
    KPixmap tmp; tmp.resize( size().width() / 2, size().height() );
    KPixmap tmp2(tmp);
    KPixmapEffect::gradient( tmp, m_color1, m_color2,
KPixmapEffect::HorizontalGradient );
    KPixmapEffect::gradient( tmp2, m_color2, m_color1,
KPixmapEffect::HorizontalGradient );
    KPixmap *px = new KPixmap( size() );
    QPainter p;
    p.begin( px );
    p.drawPixmap( 0, 0, tmp );
    p.drawPixmap( size().width()/2, 0, tmp2 );
    p.end();
    m_stepPixmap.append( px );
  }
  else if( m_stepPixmap.at( step-1 ) )
  {
    QPixmap *prev = m_stepPixmap.at( step-1 );
    QPixmap next; next.resize( size() );
    // convert
    // prev = "[------------]"
    // to
    // next = "------------]["
    bitBlt( &amp;next, 0, 0, prev, 1, 0, prev-&gt;width()-1, prev-&gt;height()
);
    bitBlt( &amp;next, width()-1, 0, prev, 0, 0, 1, prev-&gt;height() );
    KPixmap *n = new KPixmap( next );
    m_stepPixmap.append( n );
  }
}
</programlisting>
</sect1>
</appendix>

&documentation.index;
</book>

<!--
Local Variables:
mode: xml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:

vim:tabstop=2:shiftwidth=2:expandtab
-->
