<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.2-Based Variant V1.1//EN"
"dtd/kdex.dtd" [
  <!ENTITY kappname "&ksplash;">
  <!ENTITY package "kdebase">
  <!ENTITY % addindex "IGNORE">
  <!ENTITY % French "INCLUDE">
]>

<book lang="&language;">

<bookinfo>
<title
>Manuel de &ksplash;</title>

<authorgroup>
<author
>&Teemu.Rytilahti; &Teemu.Rytilahti.mail; </author>

<othercredit role="developer"
>&Brian.C.Ledbetter; &Brian.C.Ledbetter.mail; </othercredit>

<othercredit role="developer"
>&Ravikiran.Rajagopal; &Ravikiran.Rajagopal.mail; </othercredit>

&traducteurGerardDelafond; 

</authorgroup>

<copyright>
<year
>2003</year>
<holder
>Teemu Rytilahti</holder>
</copyright>
<copyright>
<year
>2003-04</year>
<holder
>Ravikiran Rajagopal</holder>
</copyright>
<legalnotice
>&FDLNotice;</legalnotice>

<date
>2003-01-10</date>
<releaseinfo
>1.01.00</releaseinfo>

<abstract>
<para
>&ksplash; est un joli écran de démarrage qui montre la progression d'une application en chargement.</para>
</abstract>

<keywordset>
<keyword
>KDE</keyword>
<keyword
>kdebase</keyword>
<keyword
>ksplash</keyword>
<keyword
>ksplashml</keyword>
<keyword
>splashscreen</keyword>
<keyword
>agrément visuel</keyword>
</keywordset>

</bookinfo>

<chapter id="introduction">
<title
>Introduction</title>

<para
>&ksplash; est un joli écran de démarrage qui montre la progression d'une application en chargement. Veuillez rapporter tout problème ou demande de fonctionnalité aux listes de diffusion de &kde;. Les principales fonctions de &ksplash; : </para>
<simplelist>
<member
>Thémable</member>
<member
>Utilise des greffons pour une personnalisation complète</member>
<member
>Peut être utilisé par n'importe quelle application qui utilise DCOP</member>
</simplelist>

<para
>Ce manuel vous montrera comment créer des thèmes pour une utilisation avec les modules externes déjà disponibles. Si aucun des modules externes disponibles vous plaît, vous pouvez apprendre comment personnaliser l'apparence de &ksplash; en écrivant entièrement un module externe en C++. </para>
</chapter>

<chapter id="using-themes">
<title
>Utilisation de thèmes</title>

<para
>Pour utiliser des thèmes de <ulink url="http://www.kde-look.org"
>KDE-Look</ulink
>, extrayez-les dans <filename
>~/.kde/share/apps/ksplash/Themes/</filename
> pour un utilisateur ordinaire ou dans <filename
>$<envar
>KDEDIR</envar
>/share/apps/ksplash/Themes/</filename
> pour les rendre disponibles pour tous les utilisateurs de votre système.</para>

<para
>Vous pouvez aussi utiliser le module <guilabel
>Écran de démarrage</guilabel
> sous <guilabel
>Apparence et thèmes</guilabel
> dans le Centre de configuration de &kde; pour faire cela automatiquement.</para>

<sect1 id="using-kcontrol-module">
<title
>Utilisation du module du &centreConfiguration;</title>

<para
>Ce module vous permet d'installer, tester et supprimer des thèmes &ksplash;.</para>

<para
>Sur le côté du module se trouve une liste des thèmes &ksplash; actuellement disponibles. Lorsque vous en sélectionnez-un, un aperçu est affiché dans la partie principale de la fenêtre. Pour en utiliser un, appuyez sur <guibutton
>OK</guibutton
> ou <guibutton
>Appliquer</guibutton
>. Appuyez sur <guibutton
>Annuler</guibutton
> pour sortir du module sans faire de changements, et <guibutton
>Par défaut</guibutton
> pour retrouver l'écran de démarrage par défaut du système.</para>

<para
>Pour installer un nouveau module, appuyez sur <guibutton
>Ajouter...</guibutton
>, et allez chercher le thème sur votre ordinateur. Vous n'avez pas besoin de décompacter les fichiers du thème, vous pouvez choisir le fichier compressé en toute tranquillité. Installer un thème ne fait pas de lui le thème utilisé. Pour cela, il faut le choisir dans la liste et appuyer sur <guibutton
>OK</guibutton
> ou <guibutton
>Appliquer</guibutton
>.</para>

<para
>Bien que vous puissiez voir un aperçu de l'écran de démarrage, vous préférez sans doute voir à quoi il ressemble réellement, par exemple pour voir les animations. Vous pouvez tester le thème en le choisissant dans la liste puis en cliquant sur le bouton <guibutton
>Tester</guibutton
>.</para>

<para
>Vous pouvez également supprimer un thème que vous ne souhaitez plus utiliser en le choisissant dans la liste et en actionnait le bouton <guibutton
>Supprimer</guibutton
>. Notez que votre compte utilisateur ne permet pas de supprimer les thèmes installés pour l'ensemble du système. Il est également recommandé de ne pas désinstaller l'écran de démarrage par défaut.</para>

</sect1>

</chapter>

<chapter id="themes">
<title
>Comment faire des thèmes pour &ksplash;</title>
<sect1 id="themes-general">
<title
>Généralités</title>
<para
>Faire votre propre thème pour &ksplash; est facile. Après que vous avez fini votre thème, vous pouvez le poster sur <ulink url="http://www.kde-look.org"
>KDE-Look</ulink
> de telle manière que d'autres puissent l'utiliser.</para>

<sect2 id="theme-syntax">
<title
>Identification de votre thème</title>

<para
>Créons un thème nommé <literal
>MonThemeSympa</literal
>. Pour que le thème soit reconnu par &ksplash;, il doit être stocké dans un dossier nommé <filename class="directory"
>MonThemeSympa</filename
>, sous <filename class="directory"
>~/.kde/apps/ksplash/Themes/</filename
>. Il doit avoir un fichier nommé <filename
>Theme.rc</filename
>, contenant les réglages pour le thème. Vous pouvez spécifier un grand nombre de choses spéciales pour le thème, changer le moteur de modules externes à utiliser, et ainsi de suite. Vous n'avez pas à utiliser tous les réglages disponibles ; habituellement, les réglages ont une valeur par défaut acceptable. La syntaxe de base pour les entrées dans le fichier <filename
>Theme.rc</filename
> est <literal
>[option] = [valeur]</literal
>. Vous pouvez trouver la définition des différentes options dans les sections suivantes.</para>

<example>
<title
>Simple fichier <filename
>Theme.rc</filename
></title>
<programlisting
>[KSplash Theme: MonThemeSympa]
Name = MonThemeSympa
Description = A nice theme using XpLike engine
Version = 1.0
Author = Real Name &lt;realmail@mail.com&gt;
## Use the XpLike engine for this theme.
Engine = XpLike
Show Icon = false
Welcome Text = Loading KDE
</programlisting>
</example>

<para
>Après avoir spécifié le nom, la description et l'auteur du thème, vous devriez choisir un moteur de thème (aussi connu comme module externe). Puis, vous pouvez personnaliser différentes fonctionnalités du moteur de thème en assignant des paires de clé-valeur comme dans le fichier d'exemple ci-dessus.</para>

<important>
<para
>Assurez-vous que le nom du dossier qui contient les fichiers du thème (<filename class="directory"
>~/.kde/apps/ksplash/Themes/MyCoolTheme</filename
> dans notre cas) et l'identificateur (<literal
>[KSplash Theme: MyCoolTheme] </literal
> dans notre cas) du thème dans le fichier <filename
>Theme.rc</filename
> sont identiques. Dans le cas contraire, &ksplash; ne reconnaîtra pas le thème.</para>
</important>

</sect2>

<sect2 id="theme-files">
<title
>Fichiers d'arrière-plan</title>

<para
>Quand &ksplash; démarre, il essaye de trouver une image de fond pour votre résolution d'écran courante, si le moteur de thèmes en utilise une. Le fichier d'image de fond doit être nommé dans le format suivant : <filename
>Background-<replaceable
>LLLxHHH</replaceable
>.png</filename
>.</para>

<para
>Par exemple, vous devriez utiliser un fichier nommé <filename
>Background-1024x768</filename
>. Si l'image de fond pour votre résolution d'écran est introuvable, il essaye de redimensionner le <filename
>Background.png</filename
> ou le fichier spécifié dans <filename
>Theme.rc</filename
> pour s'adapter à la résolution actuelle. Le redimensionnement au vol prendra certainement du temps, ce qui fait que vous devriez fournir des images dans les tailles 1280x1024, 1024x768 et 800x600.</para>
</sect2>
</sect1>

<sect1 id="theme-engines">
<title
>Options pour les moteurs de thèmes</title>

<sect2 id="default-themes">
<title
>Thème par défaut</title>
<table>
<title
>Options du thème par défaut</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Nom</entry>
<entry
>Argument</entry>
<entry
>Explication</entry>
</row>
<!-- Statusbar -->
<row>
<entry
>Toujours afficher la progression</entry>
<entry
>[vrai/faux]</entry>
<entry
>Indique si la progression du chargement doit être affichée. La valeur par défaut est True.</entry>
</row>
<row>
<entry
>Avant-plan du label</entry>
<entry
>[couleur]</entry>
<entry
>Détermine la couleur à utiliser pour le texte de la barre d'état. La valeur par défaut est #FFFFFF (blanc).</entry>
</row>
<!-- Misc. things -->
<row>
<entry
>Icônes clignotantes</entry>
<entry
>[vrai/faux]</entry>
<entry
>Indique si l'icône doit clignoter. La valeur par défaut est <quote
>true</quote
>.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="standard-themes">
<title
>Thème standard</title>
<table>
<title
>Options de thème standard</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Nom</entry>
<entry
>Argument</entry>
<entry
>Explication</entry>
</row>
<!-- Statusbar -->
<row>
<entry
>Position de la barre d'état</entry>
<entry
>[haut/bas]</entry>
<entry
>Inverse la position de la barre d'état sur l'écran. La valeur par défaut est en bas.</entry>
</row>
<row>
<entry
>Barre d'état visible</entry>
<entry
>[vrai/faux]</entry>
<entry
>Indique si la barre d'état doit être affichée. La valeur par défaut est True.</entry>
</row>
<row>
<entry
>Progression visible</entry>
<entry
>[vrai/faux]</entry>
<entry
>Indique si la progression du chargement doit être affichée. La valeur par défaut est True.</entry>
</row>
<!-- Fonts -->
<row>
<entry
>Police de la barre d'état</entry>
<entry
>[nom de la police]</entry>
<entry
>La police utilisée dans la barre d'état. La valeur par défaut est Helvetica.</entry>
</row>
<row>
<entry
>Taille de la police de la barre d'état</entry>
<entry
>[taille]</entry>
<entry
>La taille de la police pour la barre d'état. La valeur par défaut est 16.</entry>
</row>
<row>
<entry
>Police de barre d'état en gras</entry>
<entry
>[vrai/faux]</entry>
<entry
>Indique si la police de la barre d'état doit être en gras. La valeur par défaut est True.</entry>
</row>
<row>
<entry
>Police de barre d'état en italique</entry>
<entry
>[vrai/faux]</entry>
<entry
>Indique si la police de la barre d'état doit être en italique. La valeur par défaut est False.</entry>
</row>
<!-- Misc. things -->
<row>
<entry
>Avant-plan de la barre d'état</entry>
<entry
>[couleur]</entry>
<entry
>La couleur d'avant-plan pour la barre d'état. La valeur par défaut est Blanc.</entry>
</row>
<row>
<entry
>Arrière-plan de la barre d'état</entry>
<entry
>[couleur]</entry>
<entry
>La couleur d'arrière-plan pour la barre d'état. La valeur par défaut est Noir.</entry>
</row>
<row>
<entry
>Icône de barre d'état</entry>
<entry
>[vrai/faux]</entry>
<entry
>Indique si la barre d'état doit avoir une icône.</entry>
</row>
<row>
<entry
>Icônes visibles</entry>
<entry
>[vrai/faux]</entry>
<entry
>Indique si les icônes doivent être visibles. La valeur par défaut des True.</entry>
</row>
<row>
<entry
>Icônes sautantes</entry>
<entry
>[vrai/faux]</entry>
<entry
>Indique si les icônes doivent sauter. La valeur par défaut est True.</entry>
</row>
<row>
<entry
>Position des icônes</entry>
<entry
>[0-3,10-13]</entry>
<entry
>La position où les icônes sont affichées. La valeur par défaut est en bas à gauche.</entry>
</row>
<row>
<entry
>Écran de démarrage</entry>
<entry
>[nom]</entry>
<entry
>Change l'image d'écran de démarrage qui est affichée.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="redmond-themes">
<title
>Thème Redmond</title>
<table>
<title
>Options du thème Redmond</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Nom</entry>
<entry
>Argument</entry>
<entry
>Explication</entry>
</row>
<!-- Main elements -->
<row>
<entry
>Image de fond</entry>
<entry
>[nom de fichier]</entry>
<entry
>Image de fond à utiliser, définie par l'utilisateur.</entry>
</row>
<row>
<entry
>Icône utilisateur</entry>
<entry
>[nom d'icône]</entry>
<entry
>Nom de l'icône standard à afficher pour l'utilisateur. La valeur par défaut est <constant
>go</constant
>.</entry>
</row>
<row>
<entry
>Texte de bienvenue</entry>
<entry
>[texte]</entry>
<entry
>Le texte affiché dans l'écran de démarrage. La valeur par défaut est « Bienvenue ».</entry>
</row>
<row>
<entry
>Texte de nom d'utilisateur</entry>
<entry
>[texte]</entry>
<entry
>Le texte affiché au lieu du vrai nom de l'utilisateur.</entry>
</row>
<!-- Positioning elements -->
<row>
<entry
>Position du texte de bienvenue</entry>
<entry
>[x,y]</entry>
<entry
>La position sur l'écran où le texte de bienvenue est affiché.</entry>
</row>
<row>
<entry
>Position du texte de nom d'utilisateur</entry>
<entry
>[x,y]</entry>
<entry
>La position sur l'écran où le nom d'utilisateur est affiché.</entry>
</row>
<row>
<entry
>Position du texte d'action</entry>
<entry
>[x,y]</entry>
<entry
>Position sur l'écran où l'action courante est affichée.</entry>
</row>
<row>
<entry
>Position des icônes</entry>
<entry
>[x,y]</entry>
<entry
>La position sur l'écran où l'icône d'utilisateur est affichée.</entry>
</row>
<!-- Show to show.. -->
<row>
<entry
>Afficher le texte de bienvenue</entry>
<entry
>[vrai/faux]</entry>
<entry
>Inverse l'affichage du texte de bienvenue. La valeur par défaut est True.</entry>
</row>
<row>
<entry
>Afficher l'ombre de bienvenue</entry>
<entry
>[vrai/faux]</entry>
<entry
>Inverse l'affichage de l'ombre du texte de bienvenue. La valeur par défaut est True.</entry>
</row>
<row>
<entry
>Afficher le nom d'utilisateur</entry>
<entry
>[vrai/faux]</entry>
<entry
>Inverse l'affichage du nom d'utilisateur. La valeur par défaut est True.</entry>
</row>
<row>
<entry
>Afficher l'action</entry>
<entry
>[vrai/faux]</entry>
<entry
>Inverse l'affichage de l'action actuellement en cours. La valeur par défaut est True.</entry>
</row>
<row>
<entry
>Afficher l'icône</entry>
<entry
>[vrai/faux]</entry>
<entry
>Indique si l'icône doit être affichée. La valeur par défaut est True</entry>
</row>
<row>
<entry
>Utiliser l'icône d'utilisateur de KDM</entry>
<entry
>[vrai/faux]</entry>
<entry
>Afficher l'icône de connexion de l'utilisateur. La valeur par défaut est True.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="macx-themes">
<title
>Thème MacX</title>
<table>
<title
>Options du thème MacX</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Nom</entry>
<entry
>Argument</entry>
<entry
>Explication</entry>
</row>
<row>
<entry
>Taille d'icône minimale</entry>
<entry
>[taille]</entry>
<entry
>Assigner la taille minimale pour les icônes. La valeur par défaut est 16.</entry>
</row>
<row>
<entry
>Taille d'icône maximale</entry>
<entry
>[taille]</entry>
<entry
>Assigner la taille maximale pour les icônes. La valeur par défaut est 64.</entry>
</row>
<row>
<entry
>Rendu optimisé des icônes</entry>
<entry
>[vrai/faux]</entry>
<entry
>Optimise le rendu des icônes. La valeur par défaut est True.</entry>
</row>
<row>
<entry
>Barre de progression visible</entry>
<entry
>[vrai/faux]</entry>
<entry
>La valeur par défaut est True.</entry>
</row>
<row>
<entry
>Position de la barre de progression</entry>
<entry
>[haut/bas]</entry>
<entry
>Inverse la position de la barre d'état en haut ou en bas. La valeur par défaut est en bas.</entry>
</row>
<row>
<entry
>Icônes sautantes</entry>
<entry
>[vrai/faux]</entry>
<entry
>Indique si les icônes doivent sauter. La valeur par défaut est False.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="mac-classic-themes">
<title
>Thème MacClassic</title>
<table>
<title
>Options du thème MacClassic</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Nom</entry>
<entry
>Argument</entry>
<entry
>Explication</entry>
</row>
<row>
<entry
>Position des icônes</entry>
<entry
>[0-3,10-13]</entry>
<entry
>La position des icônes sur l'écran. La valeur par défaut est en bas à gauche.</entry>
</row>
<row>
<entry
>Icônes sautantes</entry>
<entry
>[vrai/faux]</entry>
<entry
>Indique si les icônes doivent sauter. La valeur par défaut est False.</entry>
</row>
<row>
<entry
>Icônes visibles</entry>
<entry
>[vrai/faux]</entry>
<entry
>Indique si les icônes doivent être visibles. La valeur par défaut des True.</entry>
</row>
<row>
<entry
>Écran de démarrage</entry>
<entry
>[nom]</entry>
<entry
>Change l'image d'écran de démarrage qui est affichée.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>

<sect2 id="themes-2k">
<title
>Thème 2k</title>
<table>
<title
>Options du thème 2k</title>
<tgroup cols="3">
<tbody>
<row>
<entry
>Nom</entry>
<entry
>Argument</entry>
<entry
>Explication</entry>
</row>
<row>
<entry
>Couleur du titre du fond</entry>
<entry
>[couleur]</entry>
<entry
>La couleur du titre du fond. La valeur par défaut est bleu foncé.</entry>
</row>
<row>
<entry
>Couleur de l'avant-plan du titre</entry>
<entry
>[couleur]</entry>
<entry
>La couleur d'avant-plan du titre. La valeur par défaut est blanc.</entry>
</row>
<row>
<entry
>Couleur du texte d'état</entry>
<entry
>[couleur]</entry>
<entry
>La couleur pour le texte d'état. La valeur par défaut est la même que la couleur d'arrière plan du titre.</entry>
</row>
<row>
<entry
>Couleur 1 du dégradé défilant</entry>
<entry
>[couleur]</entry>
<entry
>Définit la première couleur du dégradé défilant. La valeur par défaut est bleu foncé.</entry>
</row>
<row>
<entry
>Couleur 2 du dégradé défilant</entry>
<entry
>[couleur]</entry>
<entry
>Définit la première couleur du dégradé défilant. La valeur par défaut est cyan.</entry>
</row>
<row>
<entry
>Vitesse de défilement</entry>
<entry
>[valeur]</entry>
<entry
>Définit la vitesse du rotateur. La valeur par défaut est 30.</entry>
</row>
<row>
<entry
>Titre de la fenêtre</entry>
<entry
>[texte]</entry>
<entry
>Spécifie le texte du titre de la fenêtre.</entry>
</row>
<row>
<entry
>Fichier de logo</entry>
<entry
>[nom de fichier]</entry>
<entry
>Définit le logo utilisé.</entry>
</row>
</tbody>
</tgroup>
</table>
</sect2>
</sect1>
</chapter>

<chapter id="from-other-applications">
<title
>Utilisation de &ksplash; depuis votre propre application</title>

<para
>Dans ce chapitre, nous décrivons une méthode simple pour utiliser &ksplash; comme écran de démarrage pour votre application &kde;. Si vous ne développez pas d'application pour &kde;, vous pouvez sauter ce chapitre.</para>

<sect1 id="basic-other-reqs">
<title
>Nécessités de base</title>

<para
>Votre application &kde; doit être prévue pour &DCOP;. &DCOP; est la technologie de &kde; utilisée pour communiquer entre applications. Si vous utilisez le <ulink url="http://developer.kde.org"
>cadre d'application standard de &kde;</ulink
>, ceci est pris en charge automatiquement. Pour des informations sur &DCOP; et les technologies &kde; en rapport, veuillez visiter le <ulink url="http://developer.kde.org"
>coin des développeurs de &kde;</ulink
>.</para>
</sect1>

<sect1 id="other-using">
<title
>Lancer &ksplash;</title>

<para
>Avant que votre application en commence son travail de calcul intensif, ou avant qu'elle ne commence à charger des modules externes, &etc;, invoquez &ksplash; comme suit :</para>

<programlisting
>DCOPClient *c = kapp-&gt;dcopClient();
QString error;
QCString KSplashName;
int pid = 0;
QStringList args;
args &lt;&lt; "--theme=MyCoolTheme" &lt;&lt; "--managed";
if (kapp-&gt;startServiceByDesktopName("ksplash", args, &amp;error,
&amp;KSplashName, &amp;pid))
{
  KMessageBox::sorry(0, error, "Unable to invoke KSplash");
  // Some error processing here.
}
</programlisting>

<para
>Nous supposons qu'il n'y a qu'une instance de &ksplash; en fonctionnement. Les autres cas sont un peu plus complexes. Veuillez voir la documentation de &DCOP; pour des détails plus approfondis.</para>
</sect1>

<sect1 id="show-messages">
<title
>Afficher des messages</title>

<para
>Avant que vous n'affichiez des messages, vous avez besoin de régler le nombre d'étapes que vous afficherez. Par exemple, la procédure de démarrage de &kde; utilise 7 étapes.</para>

<programlisting
>QByteArray data;
    QDataStream arg(data,IO_WriteOnly);
    arg &lt;&lt; someNumber;
    if (!(c-&gt;send(KSplashName, "KSplashIface", "setStartupItemCount(int)",
data))
      // Some error processing here.
</programlisting>

<para
>Si vous voulez afficher un message avec ou sans icône, utilisez</para>

<programlisting
>arg &lt;&lt; QString("iconName") &lt;&lt; QString("programName") &lt;&lt;
QString("Some description");
    if (!(c-&gt;send(KSplashName, "KSplashIface",
"programStarted(QString,QString,QString)", data))
    {
      // Some error processing here.
    }
</programlisting>

<para
>À chaque fois que vous appelez <constant
>programStarted</constant
>, les étapes terminées sont incrémentées. Quand votre programme a fini de démarrer, faites les choses suivantes pour éliminer l'écran de démarrage :</para>

<programlisting
>if (!(c-&gt;send(KSplashName, "KSplashIface", "startupComplete()", data))
    {
      // Some error processing here.
    }
</programlisting>

<para
>C'est tout ! Vous n'avez pas besoin d'autre chose pour prendre avantage de tout ce que &ksplash; vous offre.</para>

</sect1>
</chapter>

<!-- FIXME: Better to leave this out until it's written, or the translators -->
<!-- will have to still translate it ... -->

<chapter id="wrplugins">
<title
>Écrire de nouveaux modules externes pour &ksplash;</title>

<para
>Écrire un nouveau module externe pour &ksplash; n'est pas difficile. Dans ce chapitre, nous écrirons un simple module externe qui émulera l'écran de démarrage d'un système d'exploitation bien connu. Ce didacticiel suppose que vous connaissez les bases du C++, et un peu de programmation KDE/QT.</para>

<sect1 id="basic-requirements">
<title
>Nécessités de base</title>
<para
>Nous créerons un module externe nommé <literal
>2k</literal
>. Le nom du module externe est utilisé dans plusieurs endroits, et il est important que vous utilisiez d'une manière cohérente pour que l'additif soit reconnu par &ksplash;. Les modules externes de &ksplash; sont en fait des bibliothèques chargeables dynamiquement avec la convention de nommage suivante : </para>
<simplelist>
<member
>La bibliothèque doit être nommée comme <filename
>ksplash+lowercasethemename</filename
>. Pour notre thème, ce sera <filename
>ksplash2k</filename
>.</member>
<member
>Il devrait y avoir un fichier desktop correspondant nommé <filename
>ksplash+lowercasethemename.desktop</filename
>. Pour notre thème, ce sera <filename
>ksplash2k.desktop</filename
>. </member>
<member
>Enfin, l'objet qui est retourné par la bibliothèque doit être une classe nommée <literal
>Theme+themename</literal
>. Pour notre exemple, ce sera <literal
>Theme2k</literal
>.</member>
</simplelist>
<para
>Ne vous inquiétez pas si vous ne comprenez pas tout ce qui précède. Nous considérerons chacun de ces points en détail plus tard. L'autre détail très important est que la classe de l'additif doit être dérivée de <literal
>ThemeEngine</literal
>. </para>
</sect1>
<sect1 id="skeleton">
<title
>Construire le squelette du cadre</title>
<para
>Nous utiliserons le cadre d'application de &kde; qui prendra soin de construire l'additif et nous fournira une indépendance de la plate-forme sans travail de notre part. Pour faire cela, assurez-vous d'avoir installé le paquet <filename
>kdesdk</filename
>. Lancez la commande <literal
>kapptemplate</literal
> pour produire une application nommée « 2k ». Il créera un dossier de plus haut niveau qui contient des fichiers génériques comme AUTHORS, &etc; Nous sommes surtout intéressés par le sous-dossier nommé <filename class="directory"
>2k</filename
>. Allez dedans et supprimez tous les fichiers qui s'y trouvent. Maintenant, nous avons le squelette nécessaire. </para>
<para
>L'étape suivante est de créer un fichier <filename
>.desktop</filename
>, qui, lorsqu'installé, dira à &ksplash; que notre additif est disponible. Comme dit dans les conventions de nommage expliquées dans <link linkend="basic-requirements"
>la section précédente</link
>, créez un fichier nommé <filename
>ksplash2k.desktop</filename
> dans ce dossier. Il devrait contenir les lignes suivantes : </para>
<programlisting
><literal>
[Desktop Entry]
Encoding=UTF-8
Type=Service
Comment=KSplash Plugin
Name=KSplash2k
ServiceTypes=KSplash/Plugin
X-KDE-Library=ksplash2k
X-KSplash-Default=true
X-KSplash-PluginName=2k
X-KSplash-ObjectName=Theme2k
</literal
>
</programlisting>
<para
>Les <literal
>Encoding</literal
>, <literal
>Type</literal
>, <literal
>Comment</literal
> et <literal
>ServiceTypes</literal
> sont les mêmes pour tous les modules externes. Le nom de l'additif et le nom de la bibliothèque suivent les conventions notées plus tôt. L'entrée <literal
>X-KSplash-Default</literal
> prend une valeur booléenne qui détermine si elle est affichée dans le module du centre de configuration par défaut. Sauf pour certains rares cas, ça devrait être <constant
>true</constant
>. </para>
</sect1>
<sect1 id="headerfile">
<title
>Déclaration de la classe de l'additif</title>
<para
>Maintenant que nous avons fait le travail préliminaire, entrons dans la partie vraiment amusante - la création d'une classe qui fournira le comportement que nous voulons. Bien que nous soyons libres de faire que cette classe fasse presque tout ce que nous voulons, il y a quelques restrictions.</para>
<orderedlist>
<listitem
><para
>Les classes de modules externes doivent hériter de la classe <constant
>ThemeEngine</constant
>.</para
></listitem>
<listitem
><para
>Les classes de modules externes doivent être nommées en fonction de la règle : <classname
>Theme+PluginName</classname
>.</para
></listitem>
<listitem
><para
>Les classes de modules externes devraient fournir une fonction <literal
>static</literal
> nommée <function
>names</function
>, qui retourne une liste de noms par lesquels elle peut être invoquée.</para
></listitem>
<listitem
><para
>Si l'additif peut être configuré dans le module du centre de configuration, il devrait fournir une classe <literal
>ThemeEngineConfig</literal
> pour la configuration.</para
></listitem>
<listitem
><para
>La classe de l'additif doit écraser au moins une des fonctions virtuelles<function
>slotSetText</function
>, <function
>slotSetPixmap</function
>, <function
>slotUpdateProgress</function
> et <function
>slotUpdateSteps</function
> pour la rendre utilisable.</para
></listitem>
<listitem
><para
>Le constructeur doit prendre la forme <literal
>ThemeEngine( QWidget *parent, const char *name, const QStringList &amp;args )</literal
> de telle manière qu'il peut être utilisé avec <classname
>KGenericFactory</classname
>.</para
></listitem>
</orderedlist>
<para
>La dernière chose nécessaire peut sembler compliquée, mais, comme nous le verrons plus tard, en ajoutant une simple ligne à vos fichiers source, vous pouvez habituellement ignorer cela.</para>
</sect1>
<sect1 id="headercode">
<title
>Code pour le fichier d'en-tête</title>
<para
>Étant données les contraintes, nous verrons maintenant à quoi le fichier d'en-tête <filename
>theme2k.h</filename
> ressemble :</para>
<example>
<title
>Listing pour <filename
>theme2k.h</filename
></title>
<programlisting
>#ifndef __THEME2K_H__
#define __THEME2K_H__

#include &lt;qlabel.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kdialogbase.h&gt;
#include &lt;kpixmap.h&gt;
#include &lt;ksplash/themeengine.h&gt;

class RotWidget;

class Cfg2k: public ThemeEngineConfig
{
  Q_OBJECT
public:
  Cfg2k( KConfig * );
};

class ObjKsTheme;
class Theme2k: public ThemeEngine
{
  Q_OBJECT
public:
  Theme2k( QWidget *, const char *, const QStringList&amp; );

  inline const QString name()
  {
    return( QString("KSplash2k") );
  }
  inline const KDialogBase *config( KConfig *kc )
  {
    return new Cfg2k( kc );
  }
  static QStringList names()
  {
    QStringList Names;
    Names &lt;&lt; "KSplash2k";
    Names &lt;&lt; "ks2k";
    Names &lt;&lt; "2k";
    Names &lt;&lt; "2000";
    return( Names );
  };

public slots:
  inline void slotSetText( const QString&amp; s )
  {
    if( mText &amp;&amp; mText-&gt;text() != s ) mText-&gt;setText( s );
  };

private:
  void initUi();
  void readSettings();

  QLabel *mText;
  RotWidget *mRotator;
  QColor mTBgColor, mTFgColor, mRotColor1, mRotColor2, mStatusColor;
  int mRotSpeed;
  QString mWndTitle, mLogoFile;
};

#endif
</programlisting>
</example>
<para
>Analysons le listing ci-dessus. La classe <classname
>Theme2k</classname
> satisfait les conventions de nommage, et est héritée de <classname
>ThemeEngine</classname
>. Elle fournit un <methodname
>Theme2k::names()</methodname
>, et a un constructeur qui prend les paramètres requis : <function
>Theme2k( QWidget *, const char *, const QStringList&amp; );</function
>, et fournit aussi une méthode <methodname
>Theme2k::slotSetText()</methodname
> simple. Pour le moment, ne vous inquiétez pas à propos de la classe <classname
>RotWidget</classname
>. C'est un petit widget qui fournit des choses agréables à l'œil pour l'utilisateur. Notre additif est très simple et n'affiche pas d'icône ou de barre de progression. Si vous voulez afficher des icônes, écrasez la fonction <function
>slotSetPixmap</function
>. Des fonctions similaires existent pour la plage de la barre de progression (<function
>slotUpdateSteps</function
>) et l'incrémentation (<function
>slotUpdateProgress</function
>) le pas courant. </para>
</sect1>
<sect1 id="Implementation">
<title
>Implémentation de l'additif</title>
<para
>Nous n'examinerons que les parties significatives de l'implémentation. Pour un listing de l'implémentation complète, veuillez voir l'appendice. La première chose que nous ferons est de ne plus avoir besoin des prérequis :</para>
<example>
<title
>Bibliothèques nécessaires</title>
<programlisting
>K_EXPORT_COMPONENT_FACTORY( ksplash2k, KGenericFactory&lt;Theme2k&gt; );
</programlisting>
</example>
<para
>La macro <constant
>K_EXPORT_COMPONENT_FACTORY</constant
> est déclarée dans <filename
>kgenericfactory.h</filename
>. En avant vers le constructeur ! Comme c'est un additif très simple, le constructeur est minimaliste.</para>
<example>
<title
>Constructeur d'additif</title>
<programlisting
>Theme2k::Theme2k( QWidget *parent, const char *name, const QStringList &amp;args
 )
    :ThemeEngine( parent, name, args )
{
  readSettings();
  initUi();
}
</programlisting>
</example>
<para
>La méthode <function
>readSettings()</function
> illustre la bonne manière d'obtenir vos réglages de thème. (Vous voulez pas que les gens utilisent vos additifs dans leurs thèmes, n'est-ce pas ?)</para>
<example>
<title
>Obtenir les réglages du thème</title>
<programlisting
>void Theme2k::readSettings()
{
  if( !mTheme )
    return;

  KConfig *cfg = mTheme-&gt;themeConfig();
  if( !cfg )
    return;

  cfg-&gt;setGroup( QString("KSplash Theme: %1").arg(mTheme-&gt;theme()) );

  QColor DefaultTBgColor( Qt::darkBlue );
  QColor DefaultTFgColor( Qt::white );

  mTBgColor = cfg-&gt;readColorEntry( "Title Background Color",
&amp;DefaultTBgColor );
  mTFgColor = cfg-&gt;readColorEntry( "Title Foreground Color",
&amp;DefaultTFgColor );
  mStatusColor = cfg-&gt;readColorEntry("Status Text Color", &amp;mTBgColor );

  QColor DefaultRot1( Qt::darkBlue );
  QColor DefaultRot2( Qt::cyan );
  mRotColor1 = cfg-&gt;readColorEntry( "Rotator Color 1", &amp;DefaultRot1 );
  mRotColor2 = cfg-&gt;readColorEntry( "Rotator Color 2", &amp;DefaultRot2 );

  mRotSpeed = cfg-&gt;readNumEntry( "Rotator Speed", 30 );
  mWndTitle = cfg-&gt;readEntry( "Window Title", i18n("Please wait...") );
  mLogoFile = cfg-&gt;readEntry( "Logo File", QString::null );
}
</programlisting>
</example>
<para
>Comme nous aimons nos utilisateurs, nous fournissons des paramètres par défaut qui ne sont pas présents dans le fichier de thème. Notez que nous devrions toujours positionner notre groupe sur « KSplash Theme: themename » pour rester compatible avec les futures spécifications de thèmes. La méthode <function
>initUI()</function
> n'est pas très intéressante, car elle fabrique essentiellement les widgets. Veuillez voir l'appendice pour les détails. </para>
</sect1>
<sect1 id="compilingfile">
<title
>Compilation de l'additif</title>
<para
>Comme nous avons décidé d'utiliser le cadre de &kde; pour compiler l'additif, nous devons créer un <filename
>Makefile.am</filename
>. Il devrait ressembler à ça :</para>
<example>
<title
>Listing de <filename
>Makefile.am</filename
></title>
<programlisting
>INCLUDES = $(all_includes)

kde_module_LTLIBRARIES = ksplash2k.la

ksplash2k_la_SOURCES = theme2k.cpp rotwidget.cpp
ksplash2k_la_LDFLAGS = $(all_libraries) $(KDE_RPATH)
ksplash2k_la_LIBADD = $(LIB_KDEUI) -lksplashthemes

METASOURCES = AUTO

noinst_HEADERS        = theme2k.h rotwidget.h

servicesdir = $(kde_servicesdir)
services_DATA = ksplash2k.desktop

themedir = $(kde_datadir)/ksplash/Themes/2k
theme_DATA = Theme.rc Preview.png
</programlisting>
</example>
<para
>Pour plus d'informations sur l'écriture des fichiers <filename
>Makefile.am</filename
> pour &kde;, veuillez voir <ulink url="http://developer.kde.org/documentation/other/makefile_am_howto.html"
>Le site web des développeurs de &kde;</ulink
>. La seule chose à noter est que nous fournissons un thème par défaut basé sur cet additif, et en fournissons une image d'aperçu. Par courtoisie pour vos utilisateurs, vous devriez fournir un fichier d'exemple de <filename
>Theme.rc</filename
>, illustrant l'utilisation des diverses options.</para>
</sect1>
</chapter>

<chapter id="faq">
<title
>Questions et réponses</title>
&reporting.bugs; &updating.documentation; <qandaset id="faqlist">
<qandaentry>
<question>
<para
>Je ne peux pas trouver de thème qui fonctionne dans &ksplash;. Qu'est-ce ?</para>
</question>
<answer>
<para
>Vous n'avez probablement pas le bon additif pour le thème. Les modules externes sont dans le paquet <literal
>kde-artwork</literal
>. Téléchargez-le et installez-le, et réessayez.</para>
</answer>
</qandaentry>
<qandaentry>
<question>
<para
>Qu'est le fichier <filename
>Theme.rc</filename
> et comment en faire un ?</para>
</question>
<answer>
<para
><filename
>Theme.rc</filename
> est le fichier où vous pouvez spécifier les réglages d'un thème. Pour plus d'informations, jetez un œil à <link linkend="themes"
>Comment faire des thèmes pour &ksplash;</link
>. </para>
</answer>
</qandaentry>
</qandaset>
</chapter>

<chapter id="credits">
<title
>Remerciements et licence</title>

<para
>&ksplash;</para>

<para
>Program Copyright &copy; 2003 &Ravikiran.Rajagopal; &Ravikiran.Rajagopal.mail;</para>

<itemizedlist>
<title
>Contributeurs</title>
<listitem
><para
>&Brian.C.Ledbetter; &Brian.C.Ledbetter.mail;</para>
</listitem>
</itemizedlist>

<para
>Documentation Copyright &copy; 2003 &Teemu.Rytilahti; &Teemu.Rytilahti.mail;</para>
&underFDL; &underGPL; </chapter>

<appendix id="installation">
<title
>Installation</title>

<sect1 id="requirements">
<title
>Prérequis</title>

<para
>Dans le but d'utiliser avec succès &ksplash;, vous avez besoin de &kde; version 3.2 ou supérieur. Certains thèmes peuvent nécessiter des modules externes spécifiques. Si un thème ne fonctionne pas, veuillez contacter l'auteur du thème pour trouver où obtenir le bon additif.</para>

</sect1>

<sect1 id="compilation">
<title
>Compilation et installation</title>
&install.compile.documentation; </sect1>
</appendix>
<appendix id="srccode">
<title
>Code source</title>
<sect1 id="theme2kcpp">
<title
>Listing de <filename
>theme2k.cpp</filename
></title>
<programlisting
>#include &lt;qlabel.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kapplication.h&gt;
#include &lt;kconfig.h&gt;
#include &lt;kdebug.h&gt;
#include &lt;kdialogbase.h&gt;
#include &lt;kgenericfactory.h&gt;
#include &lt;kglobalsettings.h&gt;
#include &lt;klocale.h&gt;
#include &lt;ksplash/objkstheme.h&gt;
#include &lt;kstandarddirs.h&gt;

#include "rotwidget.h"
#include "theme2k.h"
#include "theme2k.moc"

K_EXPORT_COMPONENT_FACTORY( ksplash2k, KGenericFactory&lt;Theme2k&gt; );

Cfg2k::Cfg2k( KConfig * )
{}

Theme2k::Theme2k( QWidget *parent, const char *name, const QStringList &amp;args
 )
    :ThemeEngine( parent, name, args )
{
  readSettings();
  initUi();
}

void Theme2k::initUi()
{
  QVBox *vbox = new QVBox( this );
  vbox-&gt;setFrameShape( QFrame::WinPanel );
  vbox-&gt;setFrameShadow( QFrame::Raised );

  QHBox *labelBox = new QHBox( vbox );
  labelBox-&gt;setPalette( mTBgColor );
  labelBox-&gt;setMargin( 1 );
  QLabel *lbl = new QLabel( mWndTitle, labelBox );
  lbl-&gt;setFont( QFont( "Arial", 12, QFont::Bold ) );
  lbl-&gt;setPaletteForegroundColor( mTFgColor );

  QLabel *logo = new QLabel( vbox );
  logo-&gt;setPalette( Qt::white );

  QString px( locate( "appdata", mTheme-&gt;themeDir() +
(mLogoFile.isNull()?QString("/Logo.png"):mLogoFile) ) );
  if (px.isNull())
    px = locate("appdata","Themes/Default/splash_top.png");
  if( !px.isNull() )
  {
    QPixmap pix( px );
    logo-&gt;setPixmap( pix );
  }
  else
  {
    logo-&gt;setText( "&lt;B&gt;KDE&lt;/B&gt;2000" );
    logo-&gt;setAlignment( AlignCenter|AlignVCenter );
  }

  mRotator = new RotWidget( vbox, mRotColor1, mRotColor2, mRotSpeed );

  QHBox *hbox = new QHBox( vbox );
  labelBox-&gt;setSpacing( 4 );
  labelBox-&gt;setMargin( 4 );

  mText = new QLabel( hbox );
  mText-&gt;setPaletteForegroundColor( mStatusColor );
  mText-&gt;setPaletteBackgroundColor( mTFgColor );
  mText-&gt;setText( mWndTitle );
  mText-&gt;setFixedHeight( 48 );

  setFixedSize( vbox-&gt;sizeHint() );
  QRect rect(KGlobalSettings::splashScreenDesktopGeometry());
  move( rect.x() + (rect.width() - size().width())/2,
        rect.y() + (rect.height() - size().height())/2 );
}

void Theme2k::readSettings()
{
  if( !mTheme )
    return;

  KConfig *cfg = mTheme-&gt;themeConfig();
  if( !cfg )
    return;

  cfg-&gt;setGroup( QString("KSplash Theme: %1").arg(mTheme-&gt;theme()) );

  QColor DefaultTBgColor( Qt::darkBlue );
  QColor DefaultTFgColor( Qt::white );

  mTBgColor = cfg-&gt;readColorEntry( "Title Background Color",
&amp;DefaultTBgColor );
  mTFgColor = cfg-&gt;readColorEntry( "Title Foreground Color",
&amp;DefaultTFgColor );
  mStatusColor = cfg-&gt;readColorEntry("Status Text Color", &amp;mTBgColor );

  QColor DefaultRot1( Qt::darkBlue );
  QColor DefaultRot2( Qt::cyan );
  mRotColor1 = cfg-&gt;readColorEntry( "Rotator Color 1", &amp;DefaultRot1 );
  mRotColor2 = cfg-&gt;readColorEntry( "Rotator Color 2", &amp;DefaultRot2 );

  mRotSpeed = cfg-&gt;readNumEntry( "Rotator Speed", 30 );
  mWndTitle = cfg-&gt;readEntry( "Window Title", i18n("Please wait...") );
  mLogoFile = cfg-&gt;readEntry( "Logo File", QString::null );
}
</programlisting>
</sect1>
<sect1 id="rotwidgeth">
<title
>Listing de <filename
>rotwidget.h</filename
></title>
<programlisting
>#ifndef         __ROTWIDGET_H__
#define         __ROTWIDGET_H__

#include &lt;qlabel.h&gt;
#include &lt;qtimer.h&gt;
#include &lt;qwidget.h&gt;

#include &lt;kdialogbase.h&gt;
#include &lt;kpixmap.h&gt;

/**
 * @short Display a rotating-gradient widget.
 */
class         RotWidget: public QWidget
{
  Q_OBJECT
public:
  RotWidget( QWidget *, const QColor&amp;, const QColor&amp;, int );
  ~RotWidget();

private slots:
  void stepEvent();

protected:
  void        preparePixmap( int );
  void        paintEvent( QPaintEvent * );
  void        resizeEvent( QResizeEvent * );

  QColor m_color1, m_color2;
  int m_step, m_speed;
  QTimer *m_stepTimer;

  QList&lt;KPixmap&gt; m_stepPixmap;
};

#endif
</programlisting>
</sect1>
<sect1 id="rotwidgetcpp">
<title
>Listing de <filename
>rotwidget.cpp</filename
></title>
<programlisting
>#include &lt;kdebug.h&gt;
#include &lt;kdialogbase.h&gt;
#include &lt;kpixmapeffect.h&gt;

#include &lt;qlabel.h&gt;
#include &lt;qpainter.h&gt;
#include &lt;qwidget.h&gt;

#include "rotwidget.h"
#include "rotwidget.moc"

RotWidget::RotWidget( QWidget *parent, const QColor&amp; c1, const QColor&amp;
c2, int sp )
    :QWidget(parent), m_color1(c1), m_color2(c2), m_step(0), m_speed(sp)
{
  if( (m_speed &lt;= 0) || (m_speed &gt; 20) )
    m_speed = 1;
  setFixedHeight( 6 );

  for( int i = 0; i &lt;= width(); i++ )
    preparePixmap( i );

  m_stepTimer = new QTimer( this );
  connect(m_stepTimer, SIGNAL(timeout()), this, SLOT(stepEvent()));
  m_stepTimer-&gt;start( 50 );
}

RotWidget::~RotWidget()
{
}

void RotWidget::stepEvent()
{
  // This is inefficient as we create too many pixmaps, optimize later.
  m_step += m_speed;
  if( m_step &gt; width() )
    m_step = 0;
  repaint( true );
}

// Todo: Optimize drawing.
void RotWidget::paintEvent( QPaintEvent *pe )
{
  QPainter p;
  p.begin( this );

  QRect r = pe-&gt;rect();

  if( m_stepPixmap.at( m_step ) )
    bitBlt( this, r.x(), r.y(), m_stepPixmap.at( m_step ), r.x(), r.y(),
r.width(), r.height() );
  else
    p.fillRect( rect(), Qt::black );
  p.end();
}

void RotWidget::resizeEvent( QResizeEvent *re )
{
  m_stepPixmap.clear();
  for( int i = 0; i &lt;= re-&gt;size().width(); i++ )
    preparePixmap( i );
}

void RotWidget::preparePixmap( int step )
{
  if( step &lt; 0 )
    return;

  // Explicitly draw our first pixmap. The rest we will bitBlt() from here.
  if( step == 0 )
  {
    KPixmap tmp; tmp.resize( size().width() / 2, size().height() );
    KPixmap tmp2(tmp);
    KPixmapEffect::gradient( tmp, m_color1, m_color2,
KPixmapEffect::HorizontalGradient );
    KPixmapEffect::gradient( tmp2, m_color2, m_color1,
KPixmapEffect::HorizontalGradient );
    KPixmap *px = new KPixmap( size() );
    QPainter p;
    p.begin( px );
    p.drawPixmap( 0, 0, tmp );
    p.drawPixmap( size().width()/2, 0, tmp2 );
    p.end();
    m_stepPixmap.append( px );
  }
  else if( m_stepPixmap.at( step-1 ) )
  {
    QPixmap *prev = m_stepPixmap.at( step-1 );
    QPixmap next; next.resize( size() );
    // convert
    // prev = "[------------]"
    // to
    // next = "------------]["
    bitBlt( &amp;next, 0, 0, prev, 1, 0, prev-&gt;width()-1, prev-&gt;height()
);
    bitBlt( &amp;next, width()-1, 0, prev, 0, 0, 1, prev-&gt;height() );
    KPixmap *n = new KPixmap( next );
    m_stepPixmap.append( n );
  }
}
</programlisting>
</sect1>
</appendix>

&documentation.index;
</book>

<!--
Local Variables:
mode: xml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:

vim:tabstop=2:shiftwidth=2:expandtab
-->
